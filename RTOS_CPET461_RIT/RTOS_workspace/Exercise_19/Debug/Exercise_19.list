
Exercise_19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f54  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080070f4  080070f4  000170f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007178  08007178  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007178  08007178  00017178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007180  08007180  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007180  08007180  00017180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007184  08007184  00017184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004558  20000010  08007198  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004568  08007198  00024568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b81d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003994  00000000  00000000  0003b85d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001890  00000000  00000000  0003f1f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001708  00000000  00000000  00040a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018dfb  00000000  00000000  00042190  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013296  00000000  00000000  0005af8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a467  00000000  00000000  0006e221  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00108688  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006860  00000000  00000000  00108704  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080070dc 	.word	0x080070dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	080070dc 	.word	0x080070dc

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	2000002c 	.word	0x2000002c
 8000510:	20000080 	.word	0x20000080

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b092      	sub	sp, #72	; 0x48
 8000518:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fdfd 	bl	8001118 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f84f 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f9c1 	bl	80008a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000526:	f000 f8cf 	bl	80006c8 <MX_I2C1_Init>
  MX_I2S2_Init();
 800052a:	f000 f8fb 	bl	8000724 <MX_I2S2_Init>
  MX_I2S3_Init();
 800052e:	f000 f927 	bl	8000780 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000532:	f000 f955 	bl	80007e0 <MX_SPI1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000536:	f000 f989 	bl	800084c <MX_USB_OTG_FS_PCD_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of QS2A */
  osMessageQDef(QS2A, 16, uint16_t);
 800053a:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <main+0x94>)
 800053c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000540:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000542:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  QS2AHandle = osMessageCreate(osMessageQ(QS2A), NULL);
 8000546:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800054a:	2100      	movs	r1, #0
 800054c:	4618      	mov	r0, r3
 800054e:	f004 fbf8 	bl	8004d42 <osMessageCreate>
 8000552:	4602      	mov	r2, r0
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <main+0x98>)
 8000556:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of AlarmTask */
  osThreadDef(AlarmTask, StartAlarmTask, osPriorityNormal, 0, 128);
 8000558:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <main+0x9c>)
 800055a:	f107 041c 	add.w	r4, r7, #28
 800055e:	461d      	mov	r5, r3
 8000560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000564:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000568:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AlarmTaskHandle = osThreadCreate(osThread(AlarmTask), NULL);
 800056c:	f107 031c 	add.w	r3, r7, #28
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f004 fb85 	bl	8004c82 <osThreadCreate>
 8000578:	4602      	mov	r2, r0
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <main+0xa0>)
 800057c:	601a      	str	r2, [r3, #0]

  /* definition and creation of SensorMonitorin */
  osThreadDef(SensorMonitorin, StartSensorMonitoringTask, osPriorityNormal, 0, 128);
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <main+0xa4>)
 8000580:	463c      	mov	r4, r7
 8000582:	461d      	mov	r5, r3
 8000584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000588:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SensorMonitorinHandle = osThreadCreate(osThread(SensorMonitorin), NULL);
 8000590:	463b      	mov	r3, r7
 8000592:	2100      	movs	r1, #0
 8000594:	4618      	mov	r0, r3
 8000596:	f004 fb74 	bl	8004c82 <osThreadCreate>
 800059a:	4602      	mov	r2, r0
 800059c:	4b07      	ldr	r3, [pc, #28]	; (80005bc <main+0xa8>)
 800059e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005a0:	f004 fb68 	bl	8004c74 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <main+0x90>
 80005a6:	bf00      	nop
 80005a8:	080070f4 	.word	0x080070f4
 80005ac:	2000442c 	.word	0x2000442c
 80005b0:	08007110 	.word	0x08007110
 80005b4:	20004490 	.word	0x20004490
 80005b8:	0800713c 	.word	0x0800713c
 80005bc:	20004430 	.word	0x20004430

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b09a      	sub	sp, #104	; 0x68
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005ca:	2230      	movs	r2, #48	; 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f006 fd7b 	bl	80070ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
 80005f4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	4b31      	ldr	r3, [pc, #196]	; (80006c0 <SystemClock_Config+0x100>)
 80005fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fe:	4a30      	ldr	r2, [pc, #192]	; (80006c0 <SystemClock_Config+0x100>)
 8000600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000604:	6413      	str	r3, [r2, #64]	; 0x40
 8000606:	4b2e      	ldr	r3, [pc, #184]	; (80006c0 <SystemClock_Config+0x100>)
 8000608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	4b2b      	ldr	r3, [pc, #172]	; (80006c4 <SystemClock_Config+0x104>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a2a      	ldr	r2, [pc, #168]	; (80006c4 <SystemClock_Config+0x104>)
 800061c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000620:	6013      	str	r3, [r2, #0]
 8000622:	4b28      	ldr	r3, [pc, #160]	; (80006c4 <SystemClock_Config+0x104>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800062e:	2301      	movs	r3, #1
 8000630:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000632:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000636:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000638:	2302      	movs	r3, #2
 800063a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000640:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000642:	2304      	movs	r3, #4
 8000644:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000646:	23c0      	movs	r3, #192	; 0xc0
 8000648:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800064a:	2304      	movs	r3, #4
 800064c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800064e:	2308      	movs	r3, #8
 8000650:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000652:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000656:	4618      	mov	r0, r3
 8000658:	f002 fd68 	bl	800312c <HAL_RCC_OscConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000662:	f000 fa9f 	bl	8000ba4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000666:	230f      	movs	r3, #15
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066a:	2302      	movs	r3, #2
 800066c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000672:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000676:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800067c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000680:	2103      	movs	r1, #3
 8000682:	4618      	mov	r0, r3
 8000684:	f002 ffc2 	bl	800360c <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800068e:	f000 fa89 	bl	8000ba4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000692:	2301      	movs	r3, #1
 8000694:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000696:	23c8      	movs	r3, #200	; 0xc8
 8000698:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800069a:	2305      	movs	r3, #5
 800069c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800069e:	2302      	movs	r3, #2
 80006a0:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	4618      	mov	r0, r3
 80006a8:	f003 f9d4 	bl	8003a54 <HAL_RCCEx_PeriphCLKConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80006b2:	f000 fa77 	bl	8000ba4 <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3768      	adds	r7, #104	; 0x68
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_I2C1_Init+0x50>)
 80006ce:	4a13      	ldr	r2, [pc, #76]	; (800071c <MX_I2C1_Init+0x54>)
 80006d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_I2C1_Init+0x50>)
 80006d4:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_I2C1_Init+0x58>)
 80006d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_I2C1_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_I2C1_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_I2C1_Init+0x50>)
 80006e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <MX_I2C1_Init+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_I2C1_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_I2C1_Init+0x50>)
 8000706:	f001 f801 	bl	800170c <HAL_I2C_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000710:	f000 fa48 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20003fcc 	.word	0x20003fcc
 800071c:	40005400 	.word	0x40005400
 8000720:	000186a0 	.word	0x000186a0

08000724 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_I2S2_Init+0x50>)
 800072a:	4a13      	ldr	r2, [pc, #76]	; (8000778 <MX_I2S2_Init+0x54>)
 800072c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_I2S2_Init+0x50>)
 8000730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000734:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_I2S2_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800073c:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <MX_I2S2_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_I2S2_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <MX_I2S2_Init+0x50>)
 800074a:	4a0c      	ldr	r2, [pc, #48]	; (800077c <MX_I2S2_Init+0x58>)
 800074c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_I2S2_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <MX_I2S2_Init+0x50>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_I2S2_Init+0x50>)
 800075c:	2201      	movs	r2, #1
 800075e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000760:	4804      	ldr	r0, [pc, #16]	; (8000774 <MX_I2S2_Init+0x50>)
 8000762:	f001 f90b 	bl	800197c <HAL_I2S_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 800076c:	f000 fa1a 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20004494 	.word	0x20004494
 8000778:	40003800 	.word	0x40003800
 800077c:	00017700 	.word	0x00017700

08000780 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000784:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <MX_I2S3_Init+0x54>)
 8000786:	4a14      	ldr	r2, [pc, #80]	; (80007d8 <MX_I2S3_Init+0x58>)
 8000788:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_I2S3_Init+0x54>)
 800078c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000790:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_I2S3_Init+0x54>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000798:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_I2S3_Init+0x54>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <MX_I2S3_Init+0x54>)
 80007a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_I2S3_Init+0x54>)
 80007a8:	4a0c      	ldr	r2, [pc, #48]	; (80007dc <MX_I2S3_Init+0x5c>)
 80007aa:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_I2S3_Init+0x54>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_I2S3_Init+0x54>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_I2S3_Init+0x54>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_I2S3_Init+0x54>)
 80007c0:	f001 f8dc 	bl	800197c <HAL_I2S_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007ca:	f000 f9eb 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	200044dc 	.word	0x200044dc
 80007d8:	40003c00 	.word	0x40003c00
 80007dc:	00017700 	.word	0x00017700

080007e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007e4:	4b17      	ldr	r3, [pc, #92]	; (8000844 <MX_SPI1_Init+0x64>)
 80007e6:	4a18      	ldr	r2, [pc, #96]	; (8000848 <MX_SPI1_Init+0x68>)
 80007e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ea:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_SPI1_Init+0x64>)
 80007ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_SPI1_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <MX_SPI1_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_SPI1_Init+0x64>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_SPI1_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_SPI1_Init+0x64>)
 800080c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000810:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_SPI1_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <MX_SPI1_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_SPI1_Init+0x64>)
 8000820:	2200      	movs	r2, #0
 8000822:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000824:	4b07      	ldr	r3, [pc, #28]	; (8000844 <MX_SPI1_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_SPI1_Init+0x64>)
 800082c:	220a      	movs	r2, #10
 800082e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000830:	4804      	ldr	r0, [pc, #16]	; (8000844 <MX_SPI1_Init+0x64>)
 8000832:	f003 fa5d 	bl	8003cf0 <HAL_SPI_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800083c:	f000 f9b2 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20004438 	.word	0x20004438
 8000848:	40013000 	.word	0x40013000

0800084c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000852:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000856:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085a:	2204      	movs	r2, #4
 800085c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000860:	2202      	movs	r2, #2
 8000862:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086c:	2202      	movs	r2, #2
 800086e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000884:	2201      	movs	r2, #1
 8000886:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000890:	f001 fd14 	bl	80022bc <HAL_PCD_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800089a:	f000 f983 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20004020 	.word	0x20004020

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08c      	sub	sp, #48	; 0x30
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
 80008c2:	4b60      	ldr	r3, [pc, #384]	; (8000a44 <MX_GPIO_Init+0x19c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a5f      	ldr	r2, [pc, #380]	; (8000a44 <MX_GPIO_Init+0x19c>)
 80008c8:	f043 0310 	orr.w	r3, r3, #16
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b5d      	ldr	r3, [pc, #372]	; (8000a44 <MX_GPIO_Init+0x19c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0310 	and.w	r3, r3, #16
 80008d6:	61bb      	str	r3, [r7, #24]
 80008d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
 80008de:	4b59      	ldr	r3, [pc, #356]	; (8000a44 <MX_GPIO_Init+0x19c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a58      	ldr	r2, [pc, #352]	; (8000a44 <MX_GPIO_Init+0x19c>)
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b56      	ldr	r3, [pc, #344]	; (8000a44 <MX_GPIO_Init+0x19c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0304 	and.w	r3, r3, #4
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	4b52      	ldr	r3, [pc, #328]	; (8000a44 <MX_GPIO_Init+0x19c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a51      	ldr	r2, [pc, #324]	; (8000a44 <MX_GPIO_Init+0x19c>)
 8000900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b4f      	ldr	r3, [pc, #316]	; (8000a44 <MX_GPIO_Init+0x19c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	4b4b      	ldr	r3, [pc, #300]	; (8000a44 <MX_GPIO_Init+0x19c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a4a      	ldr	r2, [pc, #296]	; (8000a44 <MX_GPIO_Init+0x19c>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b48      	ldr	r3, [pc, #288]	; (8000a44 <MX_GPIO_Init+0x19c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	4b44      	ldr	r3, [pc, #272]	; (8000a44 <MX_GPIO_Init+0x19c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a43      	ldr	r2, [pc, #268]	; (8000a44 <MX_GPIO_Init+0x19c>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b41      	ldr	r3, [pc, #260]	; (8000a44 <MX_GPIO_Init+0x19c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b3d      	ldr	r3, [pc, #244]	; (8000a44 <MX_GPIO_Init+0x19c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a3c      	ldr	r2, [pc, #240]	; (8000a44 <MX_GPIO_Init+0x19c>)
 8000954:	f043 0308 	orr.w	r3, r3, #8
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b3a      	ldr	r3, [pc, #232]	; (8000a44 <MX_GPIO_Init+0x19c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0308 	and.w	r3, r3, #8
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2108      	movs	r1, #8
 800096a:	4837      	ldr	r0, [pc, #220]	; (8000a48 <MX_GPIO_Init+0x1a0>)
 800096c:	f000 feb4 	bl	80016d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000970:	2201      	movs	r2, #1
 8000972:	2101      	movs	r1, #1
 8000974:	4835      	ldr	r0, [pc, #212]	; (8000a4c <MX_GPIO_Init+0x1a4>)
 8000976:	f000 feaf 	bl	80016d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800097a:	2200      	movs	r2, #0
 800097c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000980:	4833      	ldr	r0, [pc, #204]	; (8000a50 <MX_GPIO_Init+0x1a8>)
 8000982:	f000 fea9 	bl	80016d8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000986:	2304      	movs	r3, #4
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	482b      	ldr	r0, [pc, #172]	; (8000a48 <MX_GPIO_Init+0x1a0>)
 800099a:	f000 fd03 	bl	80013a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800099e:	2308      	movs	r3, #8
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4824      	ldr	r0, [pc, #144]	; (8000a48 <MX_GPIO_Init+0x1a0>)
 80009b6:	f000 fcf5 	bl	80013a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80009ba:	2332      	movs	r3, #50	; 0x32
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009be:	4b25      	ldr	r3, [pc, #148]	; (8000a54 <MX_GPIO_Init+0x1ac>)
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	481e      	ldr	r0, [pc, #120]	; (8000a48 <MX_GPIO_Init+0x1a0>)
 80009ce:	f000 fce9 	bl	80013a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009d2:	2301      	movs	r3, #1
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4818      	ldr	r0, [pc, #96]	; (8000a4c <MX_GPIO_Init+0x1a4>)
 80009ea:	f000 fcdb 	bl	80013a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009ee:	2301      	movs	r3, #1
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f2:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MX_GPIO_Init+0x1ac>)
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4815      	ldr	r0, [pc, #84]	; (8000a58 <MX_GPIO_Init+0x1b0>)
 8000a02:	f000 fccf 	bl	80013a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000a06:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a0a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480c      	ldr	r0, [pc, #48]	; (8000a50 <MX_GPIO_Init+0x1a8>)
 8000a20:	f000 fcc0 	bl	80013a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a24:	2320      	movs	r3, #32
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	4806      	ldr	r0, [pc, #24]	; (8000a50 <MX_GPIO_Init+0x1a8>)
 8000a38:	f000 fcb4 	bl	80013a4 <HAL_GPIO_Init>

}
 8000a3c:	bf00      	nop
 8000a3e:	3730      	adds	r7, #48	; 0x30
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40020800 	.word	0x40020800
 8000a50:	40020c00 	.word	0x40020c00
 8000a54:	10120000 	.word	0x10120000
 8000a58:	40020000 	.word	0x40020000

08000a5c <StartAlarmTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartAlarmTask */
void StartAlarmTask(void const * argument)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
    osEvent QueReadState;
	for(;;)
	{
		QueReadState = osMessageGet(QS2AHandle, 0);
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <StartAlarmTask+0x5c>)
 8000a66:	6819      	ldr	r1, [r3, #0]
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f004 f9d0 	bl	8004e14 <osMessageGet>

		if(QueReadState.status == osEventMessage)
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	2b10      	cmp	r3, #16
 8000a78:	d118      	bne.n	8000aac <StartAlarmTask+0x50>
		{
			SensorState = QueReadState.value.v;
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <StartAlarmTask+0x60>)
 8000a80:	601a      	str	r2, [r3, #0]
			if(SensorState == SensorInAlarm)
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <StartAlarmTask+0x60>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d106      	bne.n	8000a98 <StartAlarmTask+0x3c>
			{
				HAL_GPIO_WritePin(GPIOD, red, GPIO_PIN_SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a90:	480b      	ldr	r0, [pc, #44]	; (8000ac0 <StartAlarmTask+0x64>)
 8000a92:	f000 fe21 	bl	80016d8 <HAL_GPIO_WritePin>
 8000a96:	e009      	b.n	8000aac <StartAlarmTask+0x50>
			}
			else if (SensorState == SensorNotInAlarm)
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <StartAlarmTask+0x60>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d105      	bne.n	8000aac <StartAlarmTask+0x50>
			{
				HAL_GPIO_WritePin(GPIOD, red, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aa6:	4806      	ldr	r0, [pc, #24]	; (8000ac0 <StartAlarmTask+0x64>)
 8000aa8:	f000 fe16 	bl	80016d8 <HAL_GPIO_WritePin>
			}
		}
		osDelay(500);
 8000aac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ab0:	f004 f933 	bl	8004d1a <osDelay>
		QueReadState = osMessageGet(QS2AHandle, 0);
 8000ab4:	e7d6      	b.n	8000a64 <StartAlarmTask+0x8>
 8000ab6:	bf00      	nop
 8000ab8:	2000442c 	.word	0x2000442c
 8000abc:	20004434 	.word	0x20004434
 8000ac0:	40020c00 	.word	0x40020c00

08000ac4 <StartSensorMonitoringTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorMonitoringTask */
void StartSensorMonitoringTask(void const * argument)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensorMonitoringTask */
  /* Infinite loop */
  for(;;)
  {
    PushButton = HAL_GPIO_ReadPin(GPIOA, PB);
 8000acc:	2101      	movs	r1, #1
 8000ace:	4827      	ldr	r0, [pc, #156]	; (8000b6c <StartSensorMonitoringTask+0xa8>)
 8000ad0:	f000 fdea 	bl	80016a8 <HAL_GPIO_ReadPin>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <StartSensorMonitoringTask+0xac>)
 8000ada:	601a      	str	r2, [r3, #0]

    while(HAL_GPIO_ReadPin(GPIOA, PB) == GPIO_PIN_RESET);
 8000adc:	bf00      	nop
 8000ade:	2101      	movs	r1, #1
 8000ae0:	4822      	ldr	r0, [pc, #136]	; (8000b6c <StartSensorMonitoringTask+0xa8>)
 8000ae2:	f000 fde1 	bl	80016a8 <HAL_GPIO_ReadPin>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d0f8      	beq.n	8000ade <StartSensorMonitoringTask+0x1a>
    HAL_GPIO_WritePin(GPIOD, blue, SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000af2:	4820      	ldr	r0, [pc, #128]	; (8000b74 <StartSensorMonitoringTask+0xb0>)
 8000af4:	f000 fdf0 	bl	80016d8 <HAL_GPIO_WritePin>

    while(HAL_GPIO_ReadPin(GPIOA, PB) == GPIO_PIN_SET);
 8000af8:	bf00      	nop
 8000afa:	2101      	movs	r1, #1
 8000afc:	481b      	ldr	r0, [pc, #108]	; (8000b6c <StartSensorMonitoringTask+0xa8>)
 8000afe:	f000 fdd3 	bl	80016a8 <HAL_GPIO_ReadPin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d0f8      	beq.n	8000afa <StartSensorMonitoringTask+0x36>
    HAL_GPIO_WritePin(GPIOD, blue, RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b0e:	4819      	ldr	r0, [pc, #100]	; (8000b74 <StartSensorMonitoringTask+0xb0>)
 8000b10:	f000 fde2 	bl	80016d8 <HAL_GPIO_WritePin>

    if(SensorState == SensorNotInAlarm)
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <StartSensorMonitoringTask+0xb4>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d111      	bne.n	8000b40 <StartSensorMonitoringTask+0x7c>
    {
    	SensorState = SensorInAlarm;
 8000b1c:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <StartSensorMonitoringTask+0xb4>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	601a      	str	r2, [r3, #0]
    	osMessagePut(QS2AHandle, SensorState, 1);
 8000b22:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <StartSensorMonitoringTask+0xb8>)
 8000b24:	6818      	ldr	r0, [r3, #0]
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <StartSensorMonitoringTask+0xb4>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f004 f931 	bl	8004d94 <osMessagePut>
    	HAL_GPIO_WritePin(GPIOD, orange, GPIO_PIN_SET);
 8000b32:	2201      	movs	r2, #1
 8000b34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b38:	480e      	ldr	r0, [pc, #56]	; (8000b74 <StartSensorMonitoringTask+0xb0>)
 8000b3a:	f000 fdcd 	bl	80016d8 <HAL_GPIO_WritePin>
 8000b3e:	e010      	b.n	8000b62 <StartSensorMonitoringTask+0x9e>
    }

    else
    {
    	SensorState = SensorNotInAlarm;
 8000b40:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <StartSensorMonitoringTask+0xb4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
    	osMessagePut(QS2AHandle, SensorState, 0);
 8000b46:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <StartSensorMonitoringTask+0xb8>)
 8000b48:	6818      	ldr	r0, [r3, #0]
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <StartSensorMonitoringTask+0xb4>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	4619      	mov	r1, r3
 8000b52:	f004 f91f 	bl	8004d94 <osMessagePut>
    	HAL_GPIO_WritePin(GPIOD, orange, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b5c:	4805      	ldr	r0, [pc, #20]	; (8000b74 <StartSensorMonitoringTask+0xb0>)
 8000b5e:	f000 fdbb 	bl	80016d8 <HAL_GPIO_WritePin>
    }

    osDelay(250);
 8000b62:	20fa      	movs	r0, #250	; 0xfa
 8000b64:	f004 f8d9 	bl	8004d1a <osDelay>
    PushButton = HAL_GPIO_ReadPin(GPIOA, PB);
 8000b68:	e7b0      	b.n	8000acc <StartSensorMonitoringTask+0x8>
 8000b6a:	bf00      	nop
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	20004428 	.word	0x20004428
 8000b74:	40020c00 	.word	0x40020c00
 8000b78:	20004434 	.word	0x20004434
 8000b7c:	2000442c 	.word	0x2000442c

08000b80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d101      	bne.n	8000b96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b92:	f000 fae3 	bl	800115c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40010000 	.word	0x40010000

08000ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
	...

08000bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <HAL_MspInit+0x54>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	4a11      	ldr	r2, [pc, #68]	; (8000c08 <HAL_MspInit+0x54>)
 8000bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bca:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <HAL_MspInit+0x54>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <HAL_MspInit+0x54>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <HAL_MspInit+0x54>)
 8000be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be4:	6413      	str	r3, [r2, #64]	; 0x40
 8000be6:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <HAL_MspInit+0x54>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	210f      	movs	r1, #15
 8000bf6:	f06f 0001 	mvn.w	r0, #1
 8000bfa:	f000 fba9 	bl	8001350 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40023800 	.word	0x40023800

08000c0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	; 0x28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a19      	ldr	r2, [pc, #100]	; (8000c90 <HAL_I2C_MspInit+0x84>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d12c      	bne.n	8000c88 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <HAL_I2C_MspInit+0x88>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a17      	ldr	r2, [pc, #92]	; (8000c94 <HAL_I2C_MspInit+0x88>)
 8000c38:	f043 0302 	orr.w	r3, r3, #2
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <HAL_I2C_MspInit+0x88>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c4a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c50:	2312      	movs	r3, #18
 8000c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4619      	mov	r1, r3
 8000c66:	480c      	ldr	r0, [pc, #48]	; (8000c98 <HAL_I2C_MspInit+0x8c>)
 8000c68:	f000 fb9c 	bl	80013a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HAL_I2C_MspInit+0x88>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <HAL_I2C_MspInit+0x88>)
 8000c76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <HAL_I2C_MspInit+0x88>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c88:	bf00      	nop
 8000c8a:	3728      	adds	r7, #40	; 0x28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40005400 	.word	0x40005400
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020400 	.word	0x40020400

08000c9c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08e      	sub	sp, #56	; 0x38
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a59      	ldr	r2, [pc, #356]	; (8000e20 <HAL_I2S_MspInit+0x184>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d15b      	bne.n	8000d76 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	623b      	str	r3, [r7, #32]
 8000cc2:	4b58      	ldr	r3, [pc, #352]	; (8000e24 <HAL_I2S_MspInit+0x188>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	4a57      	ldr	r2, [pc, #348]	; (8000e24 <HAL_I2S_MspInit+0x188>)
 8000cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cce:	4b55      	ldr	r3, [pc, #340]	; (8000e24 <HAL_I2S_MspInit+0x188>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd6:	623b      	str	r3, [r7, #32]
 8000cd8:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
 8000cde:	4b51      	ldr	r3, [pc, #324]	; (8000e24 <HAL_I2S_MspInit+0x188>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a50      	ldr	r2, [pc, #320]	; (8000e24 <HAL_I2S_MspInit+0x188>)
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b4e      	ldr	r3, [pc, #312]	; (8000e24 <HAL_I2S_MspInit+0x188>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0304 	and.w	r3, r3, #4
 8000cf2:	61fb      	str	r3, [r7, #28]
 8000cf4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61bb      	str	r3, [r7, #24]
 8000cfa:	4b4a      	ldr	r3, [pc, #296]	; (8000e24 <HAL_I2S_MspInit+0x188>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a49      	ldr	r2, [pc, #292]	; (8000e24 <HAL_I2S_MspInit+0x188>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b47      	ldr	r3, [pc, #284]	; (8000e24 <HAL_I2S_MspInit+0x188>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	61bb      	str	r3, [r7, #24]
 8000d10:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d12:	2304      	movs	r3, #4
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000d22:	2306      	movs	r3, #6
 8000d24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	483e      	ldr	r0, [pc, #248]	; (8000e28 <HAL_I2S_MspInit+0x18c>)
 8000d2e:	f000 fb39 	bl	80013a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d32:	2308      	movs	r3, #8
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d42:	2305      	movs	r3, #5
 8000d44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4836      	ldr	r0, [pc, #216]	; (8000e28 <HAL_I2S_MspInit+0x18c>)
 8000d4e:	f000 fb29 	bl	80013a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000d52:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d64:	2305      	movs	r3, #5
 8000d66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	482f      	ldr	r0, [pc, #188]	; (8000e2c <HAL_I2S_MspInit+0x190>)
 8000d70:	f000 fb18 	bl	80013a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d74:	e04f      	b.n	8000e16 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a2d      	ldr	r2, [pc, #180]	; (8000e30 <HAL_I2S_MspInit+0x194>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d14a      	bne.n	8000e16 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <HAL_I2S_MspInit+0x188>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	4a26      	ldr	r2, [pc, #152]	; (8000e24 <HAL_I2S_MspInit+0x188>)
 8000d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d90:	4b24      	ldr	r3, [pc, #144]	; (8000e24 <HAL_I2S_MspInit+0x188>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d98:	617b      	str	r3, [r7, #20]
 8000d9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <HAL_I2S_MspInit+0x188>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	4a1f      	ldr	r2, [pc, #124]	; (8000e24 <HAL_I2S_MspInit+0x188>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	6313      	str	r3, [r2, #48]	; 0x30
 8000dac:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <HAL_I2S_MspInit+0x188>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <HAL_I2S_MspInit+0x188>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	4a18      	ldr	r2, [pc, #96]	; (8000e24 <HAL_I2S_MspInit+0x188>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc8:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <HAL_I2S_MspInit+0x188>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000dd4:	2310      	movs	r3, #16
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000de4:	2306      	movs	r3, #6
 8000de6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dec:	4619      	mov	r1, r3
 8000dee:	4811      	ldr	r0, [pc, #68]	; (8000e34 <HAL_I2S_MspInit+0x198>)
 8000df0:	f000 fad8 	bl	80013a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000df4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e06:	2306      	movs	r3, #6
 8000e08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4805      	ldr	r0, [pc, #20]	; (8000e28 <HAL_I2S_MspInit+0x18c>)
 8000e12:	f000 fac7 	bl	80013a4 <HAL_GPIO_Init>
}
 8000e16:	bf00      	nop
 8000e18:	3738      	adds	r7, #56	; 0x38
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40003800 	.word	0x40003800
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020800 	.word	0x40020800
 8000e2c:	40020400 	.word	0x40020400
 8000e30:	40003c00 	.word	0x40003c00
 8000e34:	40020000 	.word	0x40020000

08000e38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a19      	ldr	r2, [pc, #100]	; (8000ebc <HAL_SPI_MspInit+0x84>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d12b      	bne.n	8000eb2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_SPI_MspInit+0x88>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	4a17      	ldr	r2, [pc, #92]	; (8000ec0 <HAL_SPI_MspInit+0x88>)
 8000e64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e68:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_SPI_MspInit+0x88>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_SPI_MspInit+0x88>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a10      	ldr	r2, [pc, #64]	; (8000ec0 <HAL_SPI_MspInit+0x88>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_SPI_MspInit+0x88>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e92:	23e0      	movs	r3, #224	; 0xe0
 8000e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ea2:	2305      	movs	r3, #5
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <HAL_SPI_MspInit+0x8c>)
 8000eae:	f000 fa79 	bl	80013a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	3728      	adds	r7, #40	; 0x28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40013000 	.word	0x40013000
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020000 	.word	0x40020000

08000ec8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ee8:	d147      	bne.n	8000f7a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	4b25      	ldr	r3, [pc, #148]	; (8000f84 <HAL_PCD_MspInit+0xbc>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a24      	ldr	r2, [pc, #144]	; (8000f84 <HAL_PCD_MspInit+0xbc>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <HAL_PCD_MspInit+0xbc>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000f06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4619      	mov	r1, r3
 8000f1a:	481b      	ldr	r0, [pc, #108]	; (8000f88 <HAL_PCD_MspInit+0xc0>)
 8000f1c:	f000 fa42 	bl	80013a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000f20:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f32:	230a      	movs	r3, #10
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4812      	ldr	r0, [pc, #72]	; (8000f88 <HAL_PCD_MspInit+0xc0>)
 8000f3e:	f000 fa31 	bl	80013a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <HAL_PCD_MspInit+0xbc>)
 8000f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f46:	4a0f      	ldr	r2, [pc, #60]	; (8000f84 <HAL_PCD_MspInit+0xbc>)
 8000f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f4c:	6353      	str	r3, [r2, #52]	; 0x34
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <HAL_PCD_MspInit+0xbc>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <HAL_PCD_MspInit+0xbc>)
 8000f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <HAL_PCD_MspInit+0xbc>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2105      	movs	r1, #5
 8000f6e:	2043      	movs	r0, #67	; 0x43
 8000f70:	f000 f9ee 	bl	8001350 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000f74:	2043      	movs	r0, #67	; 0x43
 8000f76:	f000 fa07 	bl	8001388 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	; 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020000 	.word	0x40020000

08000f8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08c      	sub	sp, #48	; 0x30
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	2019      	movs	r0, #25
 8000fa2:	f000 f9d5 	bl	8001350 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000fa6:	2019      	movs	r0, #25
 8000fa8:	f000 f9ee 	bl	8001388 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	4b1e      	ldr	r3, [pc, #120]	; (800102c <HAL_InitTick+0xa0>)
 8000fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb4:	4a1d      	ldr	r2, [pc, #116]	; (800102c <HAL_InitTick+0xa0>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6453      	str	r3, [r2, #68]	; 0x44
 8000fbc:	4b1b      	ldr	r3, [pc, #108]	; (800102c <HAL_InitTick+0xa0>)
 8000fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fc8:	f107 0210 	add.w	r2, r7, #16
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f002 fd0c 	bl	80039f0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000fd8:	f002 fcf6 	bl	80039c8 <HAL_RCC_GetPCLK2Freq>
 8000fdc:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe0:	4a13      	ldr	r2, [pc, #76]	; (8001030 <HAL_InitTick+0xa4>)
 8000fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe6:	0c9b      	lsrs	r3, r3, #18
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <HAL_InitTick+0xa8>)
 8000fee:	4a12      	ldr	r2, [pc, #72]	; (8001038 <HAL_InitTick+0xac>)
 8000ff0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <HAL_InitTick+0xa8>)
 8000ff4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ff8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ffa:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <HAL_InitTick+0xa8>)
 8000ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ffe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <HAL_InitTick+0xa8>)
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <HAL_InitTick+0xa8>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800100c:	4809      	ldr	r0, [pc, #36]	; (8001034 <HAL_InitTick+0xa8>)
 800100e:	f002 fed3 	bl	8003db8 <HAL_TIM_Base_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d104      	bne.n	8001022 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001018:	4806      	ldr	r0, [pc, #24]	; (8001034 <HAL_InitTick+0xa8>)
 800101a:	f002 ff02 	bl	8003e22 <HAL_TIM_Base_Start_IT>
 800101e:	4603      	mov	r3, r0
 8001020:	e000      	b.n	8001024 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
}
 8001024:	4618      	mov	r0, r3
 8001026:	3730      	adds	r7, #48	; 0x30
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40023800 	.word	0x40023800
 8001030:	431bde83 	.word	0x431bde83
 8001034:	20004524 	.word	0x20004524
 8001038:	40010000 	.word	0x40010000

0800103c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <HardFault_Handler+0x4>

08001050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <MemManage_Handler+0x4>

08001056 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <BusFault_Handler+0x4>

0800105c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <UsageFault_Handler+0x4>

08001062 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001076:	f002 fef8 	bl	8003e6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20004524 	.word	0x20004524

08001084 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001088:	4802      	ldr	r0, [pc, #8]	; (8001094 <OTG_FS_IRQHandler+0x10>)
 800108a:	f001 fa34 	bl	80024f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20004020 	.word	0x20004020

08001098 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <SystemInit+0x28>)
 800109e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010a2:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <SystemInit+0x28>)
 80010a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <SystemInit+0x28>)
 80010ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010b2:	609a      	str	r2, [r3, #8]
#endif
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010ca:	e003      	b.n	80010d4 <LoopCopyDataInit>

080010cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010d2:	3104      	adds	r1, #4

080010d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010d4:	480b      	ldr	r0, [pc, #44]	; (8001104 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010dc:	d3f6      	bcc.n	80010cc <CopyDataInit>
  ldr  r2, =_sbss
 80010de:	4a0b      	ldr	r2, [pc, #44]	; (800110c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010e0:	e002      	b.n	80010e8 <LoopFillZerobss>

080010e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010e4:	f842 3b04 	str.w	r3, [r2], #4

080010e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010ec:	d3f9      	bcc.n	80010e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010ee:	f7ff ffd3 	bl	8001098 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010f2:	f005 ffbb 	bl	800706c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010f6:	f7ff fa0d 	bl	8000514 <main>
  bx  lr    
 80010fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010fc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001100:	08007188 	.word	0x08007188
  ldr  r0, =_sdata
 8001104:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001108:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 800110c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001110:	20004568 	.word	0x20004568

08001114 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <ADC_IRQHandler>
	...

08001118 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800111c:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <HAL_Init+0x40>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <HAL_Init+0x40>)
 8001122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001126:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001128:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <HAL_Init+0x40>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <HAL_Init+0x40>)
 800112e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001132:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <HAL_Init+0x40>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a07      	ldr	r2, [pc, #28]	; (8001158 <HAL_Init+0x40>)
 800113a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800113e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001140:	2003      	movs	r0, #3
 8001142:	f000 f8fa 	bl	800133a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001146:	2000      	movs	r0, #0
 8001148:	f7ff ff20 	bl	8000f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800114c:	f7ff fd32 	bl	8000bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023c00 	.word	0x40023c00

0800115c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_IncTick+0x20>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x24>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	4a04      	ldr	r2, [pc, #16]	; (8001180 <HAL_IncTick+0x24>)
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000008 	.word	0x20000008
 8001180:	20004564 	.word	0x20004564

08001184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <HAL_GetTick+0x14>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20004564 	.word	0x20004564

0800119c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff ffee 	bl	8001184 <HAL_GetTick>
 80011a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b4:	d005      	beq.n	80011c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <HAL_Delay+0x40>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4413      	add	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011c2:	bf00      	nop
 80011c4:	f7ff ffde 	bl	8001184 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d8f7      	bhi.n	80011c4 <HAL_Delay+0x28>
  {
  }
}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000008 	.word	0x20000008

080011e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011fc:	4013      	ands	r3, r2
 80011fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800120c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001212:	4a04      	ldr	r2, [pc, #16]	; (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	60d3      	str	r3, [r2, #12]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <__NVIC_GetPriorityGrouping+0x18>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	f003 0307 	and.w	r3, r3, #7
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	2b00      	cmp	r3, #0
 8001254:	db0b      	blt.n	800126e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	f003 021f 	and.w	r2, r3, #31
 800125c:	4907      	ldr	r1, [pc, #28]	; (800127c <__NVIC_EnableIRQ+0x38>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	095b      	lsrs	r3, r3, #5
 8001264:	2001      	movs	r0, #1
 8001266:	fa00 f202 	lsl.w	r2, r0, r2
 800126a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000e100 	.word	0xe000e100

08001280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	db0a      	blt.n	80012aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	490c      	ldr	r1, [pc, #48]	; (80012cc <__NVIC_SetPriority+0x4c>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	0112      	lsls	r2, r2, #4
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	440b      	add	r3, r1
 80012a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a8:	e00a      	b.n	80012c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4908      	ldr	r1, [pc, #32]	; (80012d0 <__NVIC_SetPriority+0x50>)
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	3b04      	subs	r3, #4
 80012b8:	0112      	lsls	r2, r2, #4
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	440b      	add	r3, r1
 80012be:	761a      	strb	r2, [r3, #24]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000e100 	.word	0xe000e100
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	; 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f1c3 0307 	rsb	r3, r3, #7
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	bf28      	it	cs
 80012f2:	2304      	movcs	r3, #4
 80012f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3304      	adds	r3, #4
 80012fa:	2b06      	cmp	r3, #6
 80012fc:	d902      	bls.n	8001304 <NVIC_EncodePriority+0x30>
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3b03      	subs	r3, #3
 8001302:	e000      	b.n	8001306 <NVIC_EncodePriority+0x32>
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	f04f 32ff 	mov.w	r2, #4294967295
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43da      	mvns	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	401a      	ands	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800131c:	f04f 31ff 	mov.w	r1, #4294967295
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	43d9      	mvns	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	4313      	orrs	r3, r2
         );
}
 800132e:	4618      	mov	r0, r3
 8001330:	3724      	adds	r7, #36	; 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff ff4c 	bl	80011e0 <__NVIC_SetPriorityGrouping>
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
 800135c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001362:	f7ff ff61 	bl	8001228 <__NVIC_GetPriorityGrouping>
 8001366:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	68b9      	ldr	r1, [r7, #8]
 800136c:	6978      	ldr	r0, [r7, #20]
 800136e:	f7ff ffb1 	bl	80012d4 <NVIC_EncodePriority>
 8001372:	4602      	mov	r2, r0
 8001374:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001378:	4611      	mov	r1, r2
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff ff80 	bl	8001280 <__NVIC_SetPriority>
}
 8001380:	bf00      	nop
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff ff54 	bl	8001244 <__NVIC_EnableIRQ>
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b089      	sub	sp, #36	; 0x24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
 80013be:	e159      	b.n	8001674 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013c0:	2201      	movs	r2, #1
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	429a      	cmp	r2, r3
 80013da:	f040 8148 	bne.w	800166e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d00b      	beq.n	80013fe <HAL_GPIO_Init+0x5a>
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d007      	beq.n	80013fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013f2:	2b11      	cmp	r3, #17
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b12      	cmp	r3, #18
 80013fc:	d130      	bne.n	8001460 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	2203      	movs	r2, #3
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	68da      	ldr	r2, [r3, #12]
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001434:	2201      	movs	r2, #1
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	091b      	lsrs	r3, r3, #4
 800144a:	f003 0201 	and.w	r2, r3, #1
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	2203      	movs	r2, #3
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b02      	cmp	r3, #2
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0xfc>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b12      	cmp	r3, #18
 800149e:	d123      	bne.n	80014e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	08da      	lsrs	r2, r3, #3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3208      	adds	r2, #8
 80014a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	f003 0307 	and.w	r3, r3, #7
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	220f      	movs	r2, #15
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	691a      	ldr	r2, [r3, #16]
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	08da      	lsrs	r2, r3, #3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3208      	adds	r2, #8
 80014e2:	69b9      	ldr	r1, [r7, #24]
 80014e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	2203      	movs	r2, #3
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4013      	ands	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 0203 	and.w	r2, r3, #3
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001524:	2b00      	cmp	r3, #0
 8001526:	f000 80a2 	beq.w	800166e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	4b56      	ldr	r3, [pc, #344]	; (8001688 <HAL_GPIO_Init+0x2e4>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	4a55      	ldr	r2, [pc, #340]	; (8001688 <HAL_GPIO_Init+0x2e4>)
 8001534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001538:	6453      	str	r3, [r2, #68]	; 0x44
 800153a:	4b53      	ldr	r3, [pc, #332]	; (8001688 <HAL_GPIO_Init+0x2e4>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001546:	4a51      	ldr	r2, [pc, #324]	; (800168c <HAL_GPIO_Init+0x2e8>)
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	089b      	lsrs	r3, r3, #2
 800154c:	3302      	adds	r3, #2
 800154e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001552:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	220f      	movs	r2, #15
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4013      	ands	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a48      	ldr	r2, [pc, #288]	; (8001690 <HAL_GPIO_Init+0x2ec>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d019      	beq.n	80015a6 <HAL_GPIO_Init+0x202>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a47      	ldr	r2, [pc, #284]	; (8001694 <HAL_GPIO_Init+0x2f0>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d013      	beq.n	80015a2 <HAL_GPIO_Init+0x1fe>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a46      	ldr	r2, [pc, #280]	; (8001698 <HAL_GPIO_Init+0x2f4>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d00d      	beq.n	800159e <HAL_GPIO_Init+0x1fa>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a45      	ldr	r2, [pc, #276]	; (800169c <HAL_GPIO_Init+0x2f8>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d007      	beq.n	800159a <HAL_GPIO_Init+0x1f6>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a44      	ldr	r2, [pc, #272]	; (80016a0 <HAL_GPIO_Init+0x2fc>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d101      	bne.n	8001596 <HAL_GPIO_Init+0x1f2>
 8001592:	2304      	movs	r3, #4
 8001594:	e008      	b.n	80015a8 <HAL_GPIO_Init+0x204>
 8001596:	2307      	movs	r3, #7
 8001598:	e006      	b.n	80015a8 <HAL_GPIO_Init+0x204>
 800159a:	2303      	movs	r3, #3
 800159c:	e004      	b.n	80015a8 <HAL_GPIO_Init+0x204>
 800159e:	2302      	movs	r3, #2
 80015a0:	e002      	b.n	80015a8 <HAL_GPIO_Init+0x204>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <HAL_GPIO_Init+0x204>
 80015a6:	2300      	movs	r3, #0
 80015a8:	69fa      	ldr	r2, [r7, #28]
 80015aa:	f002 0203 	and.w	r2, r2, #3
 80015ae:	0092      	lsls	r2, r2, #2
 80015b0:	4093      	lsls	r3, r2
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015b8:	4934      	ldr	r1, [pc, #208]	; (800168c <HAL_GPIO_Init+0x2e8>)
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	089b      	lsrs	r3, r3, #2
 80015be:	3302      	adds	r3, #2
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015c6:	4b37      	ldr	r3, [pc, #220]	; (80016a4 <HAL_GPIO_Init+0x300>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4013      	ands	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015ea:	4a2e      	ldr	r2, [pc, #184]	; (80016a4 <HAL_GPIO_Init+0x300>)
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015f0:	4b2c      	ldr	r3, [pc, #176]	; (80016a4 <HAL_GPIO_Init+0x300>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001614:	4a23      	ldr	r2, [pc, #140]	; (80016a4 <HAL_GPIO_Init+0x300>)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800161a:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <HAL_GPIO_Init+0x300>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	43db      	mvns	r3, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800163e:	4a19      	ldr	r2, [pc, #100]	; (80016a4 <HAL_GPIO_Init+0x300>)
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001644:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <HAL_GPIO_Init+0x300>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001668:	4a0e      	ldr	r2, [pc, #56]	; (80016a4 <HAL_GPIO_Init+0x300>)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3301      	adds	r3, #1
 8001672:	61fb      	str	r3, [r7, #28]
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	2b0f      	cmp	r3, #15
 8001678:	f67f aea2 	bls.w	80013c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800167c:	bf00      	nop
 800167e:	3724      	adds	r7, #36	; 0x24
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	40023800 	.word	0x40023800
 800168c:	40013800 	.word	0x40013800
 8001690:	40020000 	.word	0x40020000
 8001694:	40020400 	.word	0x40020400
 8001698:	40020800 	.word	0x40020800
 800169c:	40020c00 	.word	0x40020c00
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40013c00 	.word	0x40013c00

080016a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	691a      	ldr	r2, [r3, #16]
 80016b8:	887b      	ldrh	r3, [r7, #2]
 80016ba:	4013      	ands	r3, r2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d002      	beq.n	80016c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016c0:	2301      	movs	r3, #1
 80016c2:	73fb      	strb	r3, [r7, #15]
 80016c4:	e001      	b.n	80016ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	807b      	strh	r3, [r7, #2]
 80016e4:	4613      	mov	r3, r2
 80016e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016e8:	787b      	ldrb	r3, [r7, #1]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ee:	887a      	ldrh	r2, [r7, #2]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016f4:	e003      	b.n	80016fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016f6:	887b      	ldrh	r3, [r7, #2]
 80016f8:	041a      	lsls	r2, r3, #16
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	619a      	str	r2, [r3, #24]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e11f      	b.n	800195e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d106      	bne.n	8001738 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff fa6a 	bl	8000c0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2224      	movs	r2, #36	; 0x24
 800173c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0201 	bic.w	r2, r2, #1
 800174e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800175e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800176e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001770:	f002 f916 	bl	80039a0 <HAL_RCC_GetPCLK1Freq>
 8001774:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	4a7b      	ldr	r2, [pc, #492]	; (8001968 <HAL_I2C_Init+0x25c>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d807      	bhi.n	8001790 <HAL_I2C_Init+0x84>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4a7a      	ldr	r2, [pc, #488]	; (800196c <HAL_I2C_Init+0x260>)
 8001784:	4293      	cmp	r3, r2
 8001786:	bf94      	ite	ls
 8001788:	2301      	movls	r3, #1
 800178a:	2300      	movhi	r3, #0
 800178c:	b2db      	uxtb	r3, r3
 800178e:	e006      	b.n	800179e <HAL_I2C_Init+0x92>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4a77      	ldr	r2, [pc, #476]	; (8001970 <HAL_I2C_Init+0x264>)
 8001794:	4293      	cmp	r3, r2
 8001796:	bf94      	ite	ls
 8001798:	2301      	movls	r3, #1
 800179a:	2300      	movhi	r3, #0
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e0db      	b.n	800195e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4a72      	ldr	r2, [pc, #456]	; (8001974 <HAL_I2C_Init+0x268>)
 80017aa:	fba2 2303 	umull	r2, r3, r2, r3
 80017ae:	0c9b      	lsrs	r3, r3, #18
 80017b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68ba      	ldr	r2, [r7, #8]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	4a64      	ldr	r2, [pc, #400]	; (8001968 <HAL_I2C_Init+0x25c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d802      	bhi.n	80017e0 <HAL_I2C_Init+0xd4>
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	3301      	adds	r3, #1
 80017de:	e009      	b.n	80017f4 <HAL_I2C_Init+0xe8>
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017e6:	fb02 f303 	mul.w	r3, r2, r3
 80017ea:	4a63      	ldr	r2, [pc, #396]	; (8001978 <HAL_I2C_Init+0x26c>)
 80017ec:	fba2 2303 	umull	r2, r3, r2, r3
 80017f0:	099b      	lsrs	r3, r3, #6
 80017f2:	3301      	adds	r3, #1
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	6812      	ldr	r2, [r2, #0]
 80017f8:	430b      	orrs	r3, r1
 80017fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001806:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	4956      	ldr	r1, [pc, #344]	; (8001968 <HAL_I2C_Init+0x25c>)
 8001810:	428b      	cmp	r3, r1
 8001812:	d80d      	bhi.n	8001830 <HAL_I2C_Init+0x124>
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	1e59      	subs	r1, r3, #1
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001822:	3301      	adds	r3, #1
 8001824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001828:	2b04      	cmp	r3, #4
 800182a:	bf38      	it	cc
 800182c:	2304      	movcc	r3, #4
 800182e:	e04f      	b.n	80018d0 <HAL_I2C_Init+0x1c4>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d111      	bne.n	800185c <HAL_I2C_Init+0x150>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	1e58      	subs	r0, r3, #1
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6859      	ldr	r1, [r3, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	440b      	add	r3, r1
 8001846:	fbb0 f3f3 	udiv	r3, r0, r3
 800184a:	3301      	adds	r3, #1
 800184c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001850:	2b00      	cmp	r3, #0
 8001852:	bf0c      	ite	eq
 8001854:	2301      	moveq	r3, #1
 8001856:	2300      	movne	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	e012      	b.n	8001882 <HAL_I2C_Init+0x176>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	1e58      	subs	r0, r3, #1
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6859      	ldr	r1, [r3, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	0099      	lsls	r1, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001872:	3301      	adds	r3, #1
 8001874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001878:	2b00      	cmp	r3, #0
 800187a:	bf0c      	ite	eq
 800187c:	2301      	moveq	r3, #1
 800187e:	2300      	movne	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_I2C_Init+0x17e>
 8001886:	2301      	movs	r3, #1
 8001888:	e022      	b.n	80018d0 <HAL_I2C_Init+0x1c4>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10e      	bne.n	80018b0 <HAL_I2C_Init+0x1a4>
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	1e58      	subs	r0, r3, #1
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6859      	ldr	r1, [r3, #4]
 800189a:	460b      	mov	r3, r1
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	440b      	add	r3, r1
 80018a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80018a4:	3301      	adds	r3, #1
 80018a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ae:	e00f      	b.n	80018d0 <HAL_I2C_Init+0x1c4>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	1e58      	subs	r0, r3, #1
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6859      	ldr	r1, [r3, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	0099      	lsls	r1, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018c6:	3301      	adds	r3, #1
 80018c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	6809      	ldr	r1, [r1, #0]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69da      	ldr	r2, [r3, #28]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6911      	ldr	r1, [r2, #16]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	68d2      	ldr	r2, [r2, #12]
 800190a:	4311      	orrs	r1, r2
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	430b      	orrs	r3, r1
 8001912:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695a      	ldr	r2, [r3, #20]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f042 0201 	orr.w	r2, r2, #1
 800193e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2220      	movs	r2, #32
 800194a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	000186a0 	.word	0x000186a0
 800196c:	001e847f 	.word	0x001e847f
 8001970:	003d08ff 	.word	0x003d08ff
 8001974:	431bde83 	.word	0x431bde83
 8001978:	10624dd3 	.word	0x10624dd3

0800197c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b088      	sub	sp, #32
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e128      	b.n	8001be0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d109      	bne.n	80019ae <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a90      	ldr	r2, [pc, #576]	; (8001be8 <HAL_I2S_Init+0x26c>)
 80019a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff f977 	bl	8000c9c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2202      	movs	r2, #2
 80019b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80019c4:	f023 030f 	bic.w	r3, r3, #15
 80019c8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2202      	movs	r2, #2
 80019d0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d060      	beq.n	8001a9c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d102      	bne.n	80019e8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80019e2:	2310      	movs	r3, #16
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	e001      	b.n	80019ec <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80019e8:	2320      	movs	r3, #32
 80019ea:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2b20      	cmp	r3, #32
 80019f2:	d802      	bhi.n	80019fa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80019fa:	2001      	movs	r0, #1
 80019fc:	f002 f91a 	bl	8003c34 <HAL_RCCEx_GetPeriphCLKFreq>
 8001a00:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a0a:	d125      	bne.n	8001a58 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d010      	beq.n	8001a36 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	461a      	mov	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a30:	3305      	adds	r3, #5
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	e01f      	b.n	8001a76 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	461a      	mov	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a52:	3305      	adds	r3, #5
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	e00e      	b.n	8001a76 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	461a      	mov	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a72:	3305      	adds	r3, #5
 8001a74:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4a5c      	ldr	r2, [pc, #368]	; (8001bec <HAL_I2S_Init+0x270>)
 8001a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7e:	08db      	lsrs	r3, r3, #3
 8001a80:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	085b      	lsrs	r3, r3, #1
 8001a92:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	021b      	lsls	r3, r3, #8
 8001a98:	61bb      	str	r3, [r7, #24]
 8001a9a:	e003      	b.n	8001aa4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d902      	bls.n	8001ab0 <HAL_I2S_Init+0x134>
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	2bff      	cmp	r3, #255	; 0xff
 8001aae:	d907      	bls.n	8001ac0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab4:	f043 0210 	orr.w	r2, r3, #16
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e08f      	b.n	8001be0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691a      	ldr	r2, [r3, #16]
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	ea42 0103 	orr.w	r1, r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	69fa      	ldr	r2, [r7, #28]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001ade:	f023 030f 	bic.w	r3, r3, #15
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6851      	ldr	r1, [r2, #4]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6892      	ldr	r2, [r2, #8]
 8001aea:	4311      	orrs	r1, r2
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	68d2      	ldr	r2, [r2, #12]
 8001af0:	4311      	orrs	r1, r2
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6992      	ldr	r2, [r2, #24]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	431a      	orrs	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b02:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d161      	bne.n	8001bd0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a38      	ldr	r2, [pc, #224]	; (8001bf0 <HAL_I2S_Init+0x274>)
 8001b10:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a37      	ldr	r2, [pc, #220]	; (8001bf4 <HAL_I2S_Init+0x278>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d101      	bne.n	8001b20 <HAL_I2S_Init+0x1a4>
 8001b1c:	4b36      	ldr	r3, [pc, #216]	; (8001bf8 <HAL_I2S_Init+0x27c>)
 8001b1e:	e001      	b.n	8001b24 <HAL_I2S_Init+0x1a8>
 8001b20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6812      	ldr	r2, [r2, #0]
 8001b2a:	4932      	ldr	r1, [pc, #200]	; (8001bf4 <HAL_I2S_Init+0x278>)
 8001b2c:	428a      	cmp	r2, r1
 8001b2e:	d101      	bne.n	8001b34 <HAL_I2S_Init+0x1b8>
 8001b30:	4a31      	ldr	r2, [pc, #196]	; (8001bf8 <HAL_I2S_Init+0x27c>)
 8001b32:	e001      	b.n	8001b38 <HAL_I2S_Init+0x1bc>
 8001b34:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001b38:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001b3c:	f023 030f 	bic.w	r3, r3, #15
 8001b40:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a2b      	ldr	r2, [pc, #172]	; (8001bf4 <HAL_I2S_Init+0x278>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d101      	bne.n	8001b50 <HAL_I2S_Init+0x1d4>
 8001b4c:	4b2a      	ldr	r3, [pc, #168]	; (8001bf8 <HAL_I2S_Init+0x27c>)
 8001b4e:	e001      	b.n	8001b54 <HAL_I2S_Init+0x1d8>
 8001b50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b54:	2202      	movs	r2, #2
 8001b56:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a25      	ldr	r2, [pc, #148]	; (8001bf4 <HAL_I2S_Init+0x278>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d101      	bne.n	8001b66 <HAL_I2S_Init+0x1ea>
 8001b62:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <HAL_I2S_Init+0x27c>)
 8001b64:	e001      	b.n	8001b6a <HAL_I2S_Init+0x1ee>
 8001b66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b76:	d003      	beq.n	8001b80 <HAL_I2S_Init+0x204>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d103      	bne.n	8001b88 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001b80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	e001      	b.n	8001b8c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	b299      	uxth	r1, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001ba2:	4303      	orrs	r3, r0
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	430b      	orrs	r3, r1
 8001ba8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001baa:	4313      	orrs	r3, r2
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	897b      	ldrh	r3, [r7, #10]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bb8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a0d      	ldr	r2, [pc, #52]	; (8001bf4 <HAL_I2S_Init+0x278>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d101      	bne.n	8001bc8 <HAL_I2S_Init+0x24c>
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <HAL_I2S_Init+0x27c>)
 8001bc6:	e001      	b.n	8001bcc <HAL_I2S_Init+0x250>
 8001bc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bcc:	897a      	ldrh	r2, [r7, #10]
 8001bce:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3720      	adds	r7, #32
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	08001cf3 	.word	0x08001cf3
 8001bec:	cccccccd 	.word	0xcccccccd
 8001bf0:	08001e09 	.word	0x08001e09
 8001bf4:	40003800 	.word	0x40003800
 8001bf8:	40003400 	.word	0x40003400

08001bfc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	881a      	ldrh	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	1c9a      	adds	r2, r3, #2
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10e      	bne.n	8001c8c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c7c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff ffb8 	bl	8001bfc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca6:	b292      	uxth	r2, r2
 8001ca8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cae:	1c9a      	adds	r2, r3, #2
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10e      	bne.n	8001cea <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cda:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff ff93 	bl	8001c10 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b086      	sub	sp, #24
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d13a      	bne.n	8001d84 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d109      	bne.n	8001d2c <I2S_IRQHandler+0x3a>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d22:	2b40      	cmp	r3, #64	; 0x40
 8001d24:	d102      	bne.n	8001d2c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff ffb4 	bl	8001c94 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d32:	2b40      	cmp	r3, #64	; 0x40
 8001d34:	d126      	bne.n	8001d84 <I2S_IRQHandler+0x92>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	2b20      	cmp	r3, #32
 8001d42:	d11f      	bne.n	8001d84 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d52:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001d54:	2300      	movs	r3, #0
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	f043 0202 	orr.w	r2, r3, #2
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ff50 	bl	8001c24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b03      	cmp	r3, #3
 8001d8e:	d136      	bne.n	8001dfe <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d109      	bne.n	8001dae <I2S_IRQHandler+0xbc>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da4:	2b80      	cmp	r3, #128	; 0x80
 8001da6:	d102      	bne.n	8001dae <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff ff45 	bl	8001c38 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f003 0308 	and.w	r3, r3, #8
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	d122      	bne.n	8001dfe <I2S_IRQHandler+0x10c>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 0320 	and.w	r3, r3, #32
 8001dc2:	2b20      	cmp	r3, #32
 8001dc4:	d11b      	bne.n	8001dfe <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001dd4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df0:	f043 0204 	orr.w	r2, r3, #4
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff ff13 	bl	8001c24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001dfe:	bf00      	nop
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b088      	sub	sp, #32
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4aa2      	ldr	r2, [pc, #648]	; (80020a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d101      	bne.n	8001e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001e22:	4ba2      	ldr	r3, [pc, #648]	; (80020ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001e24:	e001      	b.n	8001e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001e26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a9b      	ldr	r2, [pc, #620]	; (80020a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d101      	bne.n	8001e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001e40:	4b9a      	ldr	r3, [pc, #616]	; (80020ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001e42:	e001      	b.n	8001e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001e44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e54:	d004      	beq.n	8001e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f040 8099 	bne.w	8001f92 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d107      	bne.n	8001e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d002      	beq.n	8001e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f925 	bl	80020c4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d107      	bne.n	8001e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d002      	beq.n	8001e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f9c8 	bl	8002224 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e9a:	2b40      	cmp	r3, #64	; 0x40
 8001e9c:	d13a      	bne.n	8001f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	f003 0320 	and.w	r3, r3, #32
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d035      	beq.n	8001f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a7e      	ldr	r2, [pc, #504]	; (80020a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d101      	bne.n	8001eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001eb2:	4b7e      	ldr	r3, [pc, #504]	; (80020ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001eb4:	e001      	b.n	8001eba <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001eb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4979      	ldr	r1, [pc, #484]	; (80020a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001ec2:	428b      	cmp	r3, r1
 8001ec4:	d101      	bne.n	8001eca <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001ec6:	4b79      	ldr	r3, [pc, #484]	; (80020ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ec8:	e001      	b.n	8001ece <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001eca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ece:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ed2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ee2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	f043 0202 	orr.w	r2, r3, #2
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff fe88 	bl	8001c24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	f040 80be 	bne.w	800209c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f003 0320 	and.w	r3, r3, #32
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 80b8 	beq.w	800209c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f3a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a59      	ldr	r2, [pc, #356]	; (80020a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d101      	bne.n	8001f4a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001f46:	4b59      	ldr	r3, [pc, #356]	; (80020ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001f48:	e001      	b.n	8001f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001f4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4954      	ldr	r1, [pc, #336]	; (80020a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001f56:	428b      	cmp	r3, r1
 8001f58:	d101      	bne.n	8001f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001f5a:	4b54      	ldr	r3, [pc, #336]	; (80020ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001f5c:	e001      	b.n	8001f62 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001f5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f66:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60bb      	str	r3, [r7, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	f043 0204 	orr.w	r2, r3, #4
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff fe4a 	bl	8001c24 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001f90:	e084      	b.n	800209c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d107      	bne.n	8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f8be 	bl	8002128 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d107      	bne.n	8001fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d002      	beq.n	8001fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f8fd 	bl	80021c0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fcc:	2b40      	cmp	r3, #64	; 0x40
 8001fce:	d12f      	bne.n	8002030 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f003 0320 	and.w	r3, r3, #32
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d02a      	beq.n	8002030 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001fe8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a2e      	ldr	r2, [pc, #184]	; (80020a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d101      	bne.n	8001ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001ff4:	4b2d      	ldr	r3, [pc, #180]	; (80020ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ff6:	e001      	b.n	8001ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001ff8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4929      	ldr	r1, [pc, #164]	; (80020a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002004:	428b      	cmp	r3, r1
 8002006:	d101      	bne.n	800200c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002008:	4b28      	ldr	r3, [pc, #160]	; (80020ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800200a:	e001      	b.n	8002010 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800200c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002010:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002014:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	f043 0202 	orr.w	r2, r3, #2
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff fdfa 	bl	8001c24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b08      	cmp	r3, #8
 8002038:	d131      	bne.n	800209e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	f003 0320 	and.w	r3, r3, #32
 8002040:	2b00      	cmp	r3, #0
 8002042:	d02c      	beq.n	800209e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a17      	ldr	r2, [pc, #92]	; (80020a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d101      	bne.n	8002052 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800204e:	4b17      	ldr	r3, [pc, #92]	; (80020ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002050:	e001      	b.n	8002056 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002052:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4912      	ldr	r1, [pc, #72]	; (80020a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800205e:	428b      	cmp	r3, r1
 8002060:	d101      	bne.n	8002066 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002062:	4b12      	ldr	r3, [pc, #72]	; (80020ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002064:	e001      	b.n	800206a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002066:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800206a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800206e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800207e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208c:	f043 0204 	orr.w	r2, r3, #4
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff fdc5 	bl	8001c24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800209a:	e000      	b.n	800209e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800209c:	bf00      	nop
}
 800209e:	bf00      	nop
 80020a0:	3720      	adds	r7, #32
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40003800 	.word	0x40003800
 80020ac:	40003400 	.word	0x40003400

080020b0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	1c99      	adds	r1, r3, #2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6251      	str	r1, [r2, #36]	; 0x24
 80020d6:	881a      	ldrh	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	3b01      	subs	r3, #1
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d113      	bne.n	800211e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002104:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800210a:	b29b      	uxth	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d106      	bne.n	800211e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff ffc9 	bl	80020b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	1c99      	adds	r1, r3, #2
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6251      	str	r1, [r2, #36]	; 0x24
 800213a:	8819      	ldrh	r1, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a1d      	ldr	r2, [pc, #116]	; (80021b8 <I2SEx_TxISR_I2SExt+0x90>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d101      	bne.n	800214a <I2SEx_TxISR_I2SExt+0x22>
 8002146:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <I2SEx_TxISR_I2SExt+0x94>)
 8002148:	e001      	b.n	800214e <I2SEx_TxISR_I2SExt+0x26>
 800214a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800214e:	460a      	mov	r2, r1
 8002150:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002156:	b29b      	uxth	r3, r3
 8002158:	3b01      	subs	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002164:	b29b      	uxth	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d121      	bne.n	80021ae <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a12      	ldr	r2, [pc, #72]	; (80021b8 <I2SEx_TxISR_I2SExt+0x90>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d101      	bne.n	8002178 <I2SEx_TxISR_I2SExt+0x50>
 8002174:	4b11      	ldr	r3, [pc, #68]	; (80021bc <I2SEx_TxISR_I2SExt+0x94>)
 8002176:	e001      	b.n	800217c <I2SEx_TxISR_I2SExt+0x54>
 8002178:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	490d      	ldr	r1, [pc, #52]	; (80021b8 <I2SEx_TxISR_I2SExt+0x90>)
 8002184:	428b      	cmp	r3, r1
 8002186:	d101      	bne.n	800218c <I2SEx_TxISR_I2SExt+0x64>
 8002188:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <I2SEx_TxISR_I2SExt+0x94>)
 800218a:	e001      	b.n	8002190 <I2SEx_TxISR_I2SExt+0x68>
 800218c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002190:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002194:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800219a:	b29b      	uxth	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	d106      	bne.n	80021ae <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff ff81 	bl	80020b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40003800 	.word	0x40003800
 80021bc:	40003400 	.word	0x40003400

080021c0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68d8      	ldr	r0, [r3, #12]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d2:	1c99      	adds	r1, r3, #2
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80021d8:	b282      	uxth	r2, r0
 80021da:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	3b01      	subs	r3, #1
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d113      	bne.n	800221c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002202:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002208:	b29b      	uxth	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d106      	bne.n	800221c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff ff4a 	bl	80020b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800221c:	bf00      	nop
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a20      	ldr	r2, [pc, #128]	; (80022b4 <I2SEx_RxISR_I2SExt+0x90>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d101      	bne.n	800223a <I2SEx_RxISR_I2SExt+0x16>
 8002236:	4b20      	ldr	r3, [pc, #128]	; (80022b8 <I2SEx_RxISR_I2SExt+0x94>)
 8002238:	e001      	b.n	800223e <I2SEx_RxISR_I2SExt+0x1a>
 800223a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800223e:	68d8      	ldr	r0, [r3, #12]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002244:	1c99      	adds	r1, r3, #2
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	62d1      	str	r1, [r2, #44]	; 0x2c
 800224a:	b282      	uxth	r2, r0
 800224c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002252:	b29b      	uxth	r3, r3
 8002254:	3b01      	subs	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002260:	b29b      	uxth	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d121      	bne.n	80022aa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a12      	ldr	r2, [pc, #72]	; (80022b4 <I2SEx_RxISR_I2SExt+0x90>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d101      	bne.n	8002274 <I2SEx_RxISR_I2SExt+0x50>
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <I2SEx_RxISR_I2SExt+0x94>)
 8002272:	e001      	b.n	8002278 <I2SEx_RxISR_I2SExt+0x54>
 8002274:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	490d      	ldr	r1, [pc, #52]	; (80022b4 <I2SEx_RxISR_I2SExt+0x90>)
 8002280:	428b      	cmp	r3, r1
 8002282:	d101      	bne.n	8002288 <I2SEx_RxISR_I2SExt+0x64>
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <I2SEx_RxISR_I2SExt+0x94>)
 8002286:	e001      	b.n	800228c <I2SEx_RxISR_I2SExt+0x68>
 8002288:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800228c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002290:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002296:	b29b      	uxth	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	d106      	bne.n	80022aa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7ff ff03 	bl	80020b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40003800 	.word	0x40003800
 80022b8:	40003400 	.word	0x40003400

080022bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022be:	b08f      	sub	sp, #60	; 0x3c
 80022c0:	af0a      	add	r7, sp, #40	; 0x28
 80022c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e10f      	b.n	80024ee <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d106      	bne.n	80022ee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7fe fded 	bl	8000ec8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2203      	movs	r2, #3
 80022f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d102      	bne.n	8002308 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f002 f875 	bl	80043fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	603b      	str	r3, [r7, #0]
 8002318:	687e      	ldr	r6, [r7, #4]
 800231a:	466d      	mov	r5, sp
 800231c:	f106 0410 	add.w	r4, r6, #16
 8002320:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002322:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002324:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002326:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002328:	e894 0003 	ldmia.w	r4, {r0, r1}
 800232c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002330:	1d33      	adds	r3, r6, #4
 8002332:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002334:	6838      	ldr	r0, [r7, #0]
 8002336:	f001 ff5d 	bl	80041f4 <USB_CoreInit>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2202      	movs	r2, #2
 8002344:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e0d0      	b.n	80024ee <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f002 f863 	bl	800441e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002358:	2300      	movs	r3, #0
 800235a:	73fb      	strb	r3, [r7, #15]
 800235c:	e04a      	b.n	80023f4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800235e:	7bfa      	ldrb	r2, [r7, #15]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	1a9b      	subs	r3, r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	333d      	adds	r3, #61	; 0x3d
 800236e:	2201      	movs	r2, #1
 8002370:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002372:	7bfa      	ldrb	r2, [r7, #15]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	333c      	adds	r3, #60	; 0x3c
 8002382:	7bfa      	ldrb	r2, [r7, #15]
 8002384:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002386:	7bfa      	ldrb	r2, [r7, #15]
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	b298      	uxth	r0, r3
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	3342      	adds	r3, #66	; 0x42
 800239a:	4602      	mov	r2, r0
 800239c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800239e:	7bfa      	ldrb	r2, [r7, #15]
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	333f      	adds	r3, #63	; 0x3f
 80023ae:	2200      	movs	r2, #0
 80023b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023b2:	7bfa      	ldrb	r2, [r7, #15]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	1a9b      	subs	r3, r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	3344      	adds	r3, #68	; 0x44
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	1a9b      	subs	r3, r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	440b      	add	r3, r1
 80023d4:	3348      	adds	r3, #72	; 0x48
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023da:	7bfa      	ldrb	r2, [r7, #15]
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	1a9b      	subs	r3, r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	440b      	add	r3, r1
 80023e8:	3350      	adds	r3, #80	; 0x50
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
 80023f0:	3301      	adds	r3, #1
 80023f2:	73fb      	strb	r3, [r7, #15]
 80023f4:	7bfa      	ldrb	r2, [r7, #15]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d3af      	bcc.n	800235e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023fe:	2300      	movs	r3, #0
 8002400:	73fb      	strb	r3, [r7, #15]
 8002402:	e044      	b.n	800248e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002404:	7bfa      	ldrb	r2, [r7, #15]
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	1a9b      	subs	r3, r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002416:	2200      	movs	r2, #0
 8002418:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800241a:	7bfa      	ldrb	r2, [r7, #15]
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	1a9b      	subs	r3, r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	440b      	add	r3, r1
 8002428:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800242c:	7bfa      	ldrb	r2, [r7, #15]
 800242e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002430:	7bfa      	ldrb	r2, [r7, #15]
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	1a9b      	subs	r3, r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002442:	2200      	movs	r2, #0
 8002444:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002446:	7bfa      	ldrb	r2, [r7, #15]
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800245c:	7bfa      	ldrb	r2, [r7, #15]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	1a9b      	subs	r3, r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002472:	7bfa      	ldrb	r2, [r7, #15]
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	4613      	mov	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	1a9b      	subs	r3, r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	440b      	add	r3, r1
 8002480:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	3301      	adds	r3, #1
 800248c:	73fb      	strb	r3, [r7, #15]
 800248e:	7bfa      	ldrb	r2, [r7, #15]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	429a      	cmp	r2, r3
 8002496:	d3b5      	bcc.n	8002404 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	603b      	str	r3, [r7, #0]
 800249e:	687e      	ldr	r6, [r7, #4]
 80024a0:	466d      	mov	r5, sp
 80024a2:	f106 0410 	add.w	r4, r6, #16
 80024a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80024b6:	1d33      	adds	r3, r6, #4
 80024b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024ba:	6838      	ldr	r0, [r7, #0]
 80024bc:	f001 ffda 	bl	8004474 <USB_DevInit>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d005      	beq.n	80024d2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2202      	movs	r2, #2
 80024ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e00d      	b.n	80024ee <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f002 fa1a 	bl	8004920 <USB_DevDisconnect>

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024f6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024f6:	b590      	push	{r4, r7, lr}
 80024f8:	b08d      	sub	sp, #52	; 0x34
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f002 fab2 	bl	8004a76 <USB_GetMode>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	f040 838e 	bne.w	8002c36 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f002 fa16 	bl	8004950 <USB_ReadInterrupts>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 8384 	beq.w	8002c34 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f002 fa0d 	bl	8004950 <USB_ReadInterrupts>
 8002536:	4603      	mov	r3, r0
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b02      	cmp	r3, #2
 800253e:	d107      	bne.n	8002550 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695a      	ldr	r2, [r3, #20]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f002 0202 	and.w	r2, r2, #2
 800254e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f002 f9fb 	bl	8004950 <USB_ReadInterrupts>
 800255a:	4603      	mov	r3, r0
 800255c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002560:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002564:	d17b      	bne.n	800265e <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8002566:	2300      	movs	r3, #0
 8002568:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f002 fa01 	bl	8004976 <USB_ReadDevAllOutEpInterrupt>
 8002574:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002576:	e06f      	b.n	8002658 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d064      	beq.n	800264c <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	4611      	mov	r1, r2
 800258c:	4618      	mov	r0, r3
 800258e:	f002 fa26 	bl	80049de <USB_ReadDevOutEPInterrupt>
 8002592:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00c      	beq.n	80025b8 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	015a      	lsls	r2, r3, #5
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025aa:	461a      	mov	r2, r3
 80025ac:	2301      	movs	r3, #1
 80025ae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80025b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fc46 	bl	8002e44 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00c      	beq.n	80025dc <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80025c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 fd45 	bl	8003054 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	015a      	lsls	r2, r3, #5
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025d6:	461a      	mov	r2, r3
 80025d8:	2308      	movs	r3, #8
 80025da:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	f003 0310 	and.w	r3, r3, #16
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d008      	beq.n	80025f8 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	015a      	lsls	r2, r3, #5
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025f2:	461a      	mov	r2, r3
 80025f4:	2310      	movs	r3, #16
 80025f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	f003 0320 	and.w	r3, r3, #32
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d015      	beq.n	800262e <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d108      	bne.n	800261c <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002614:	461a      	mov	r2, r3
 8002616:	2101      	movs	r1, #1
 8002618:	f002 fa70 	bl	8004afc <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	015a      	lsls	r2, r3, #5
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	4413      	add	r3, r2
 8002624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002628:	461a      	mov	r2, r3
 800262a:	2320      	movs	r3, #32
 800262c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d009      	beq.n	800264c <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	4413      	add	r3, r2
 8002640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002644:	461a      	mov	r2, r3
 8002646:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800264a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	3301      	adds	r3, #1
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002654:	085b      	lsrs	r3, r3, #1
 8002656:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265a:	2b00      	cmp	r3, #0
 800265c:	d18c      	bne.n	8002578 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f002 f974 	bl	8004950 <USB_ReadInterrupts>
 8002668:	4603      	mov	r3, r0
 800266a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800266e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002672:	f040 80c4 	bne.w	80027fe <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f002 f995 	bl	80049aa <USB_ReadDevAllInEpInterrupt>
 8002680:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002686:	e0b6      	b.n	80027f6 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 80ab 	beq.w	80027ea <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	4611      	mov	r1, r2
 800269e:	4618      	mov	r0, r3
 80026a0:	f002 f9bb 	bl	8004a1a <USB_ReadDevInEPInterrupt>
 80026a4:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d05b      	beq.n	8002768 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	2201      	movs	r2, #1
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69f9      	ldr	r1, [r7, #28]
 80026cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80026d0:	4013      	ands	r3, r2
 80026d2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026e0:	461a      	mov	r2, r3
 80026e2:	2301      	movs	r3, #1
 80026e4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d11b      	bne.n	8002726 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f2:	4613      	mov	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	1a9b      	subs	r3, r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	3348      	adds	r3, #72	; 0x48
 80026fe:	6819      	ldr	r1, [r3, #0]
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4403      	add	r3, r0
 800270e:	3344      	adds	r3, #68	; 0x44
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4419      	add	r1, r3
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002718:	4613      	mov	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4403      	add	r3, r0
 8002722:	3348      	adds	r3, #72	; 0x48
 8002724:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	b2db      	uxtb	r3, r3
 800272a:	4619      	mov	r1, r3
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 fa91 	bl	8002c54 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d116      	bne.n	8002768 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	2b00      	cmp	r3, #0
 800273e:	d113      	bne.n	8002768 <HAL_PCD_IRQHandler+0x272>
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002744:	4613      	mov	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	1a9b      	subs	r3, r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	3350      	adds	r3, #80	; 0x50
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d108      	bne.n	8002768 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6818      	ldr	r0, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002760:	461a      	mov	r2, r3
 8002762:	2101      	movs	r1, #1
 8002764:	f002 f9ca 	bl	8004afc <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b00      	cmp	r3, #0
 8002770:	d008      	beq.n	8002784 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	015a      	lsls	r2, r3, #5
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	4413      	add	r3, r2
 800277a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800277e:	461a      	mov	r2, r3
 8002780:	2308      	movs	r3, #8
 8002782:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	f003 0310 	and.w	r3, r3, #16
 800278a:	2b00      	cmp	r3, #0
 800278c:	d008      	beq.n	80027a0 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	015a      	lsls	r2, r3, #5
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	4413      	add	r3, r2
 8002796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800279a:	461a      	mov	r2, r3
 800279c:	2310      	movs	r3, #16
 800279e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d008      	beq.n	80027bc <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	015a      	lsls	r2, r3, #5
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027b6:	461a      	mov	r2, r3
 80027b8:	2340      	movs	r3, #64	; 0x40
 80027ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d008      	beq.n	80027d8 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027d2:	461a      	mov	r2, r3
 80027d4:	2302      	movs	r3, #2
 80027d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80027e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 fa9f 	bl	8002d28 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	3301      	adds	r3, #1
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80027f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f2:	085b      	lsrs	r3, r3, #1
 80027f4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80027f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f47f af45 	bne.w	8002688 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f002 f8a4 	bl	8004950 <USB_ReadInterrupts>
 8002808:	4603      	mov	r3, r0
 800280a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800280e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002812:	d122      	bne.n	800285a <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	69fa      	ldr	r2, [r7, #28]
 800281e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002822:	f023 0301 	bic.w	r3, r3, #1
 8002826:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800282e:	2b01      	cmp	r3, #1
 8002830:	d108      	bne.n	8002844 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800283a:	2100      	movs	r1, #0
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 fc69 	bl	8003114 <HAL_PCDEx_LPM_Callback>
 8002842:	e002      	b.n	800284a <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 fa39 	bl	8002cbc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	695a      	ldr	r2, [r3, #20]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002858:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f002 f876 	bl	8004950 <USB_ReadInterrupts>
 8002864:	4603      	mov	r3, r0
 8002866:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800286a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800286e:	d112      	bne.n	8002896 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b01      	cmp	r3, #1
 800287e:	d102      	bne.n	8002886 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 fa11 	bl	8002ca8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695a      	ldr	r2, [r3, #20]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002894:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f002 f858 	bl	8004950 <USB_ReadInterrupts>
 80028a0:	4603      	mov	r3, r0
 80028a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028aa:	f040 80a7 	bne.w	80029fc <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	69fa      	ldr	r2, [r7, #28]
 80028b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028bc:	f023 0301 	bic.w	r3, r3, #1
 80028c0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2110      	movs	r1, #16
 80028c8:	4618      	mov	r0, r3
 80028ca:	f001 ff45 	bl	8004758 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ce:	2300      	movs	r3, #0
 80028d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028d2:	e036      	b.n	8002942 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80028d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028e0:	461a      	mov	r2, r3
 80028e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80028e6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80028e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028f8:	0151      	lsls	r1, r2, #5
 80028fa:	69fa      	ldr	r2, [r7, #28]
 80028fc:	440a      	add	r2, r1
 80028fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002902:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002906:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290a:	015a      	lsls	r2, r3, #5
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	4413      	add	r3, r2
 8002910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002914:	461a      	mov	r2, r3
 8002916:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800291a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800291c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	4413      	add	r3, r2
 8002924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800292c:	0151      	lsls	r1, r2, #5
 800292e:	69fa      	ldr	r2, [r7, #28]
 8002930:	440a      	add	r2, r1
 8002932:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002936:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800293a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800293c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293e:	3301      	adds	r3, #1
 8002940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002948:	429a      	cmp	r2, r3
 800294a:	d3c3      	bcc.n	80028d4 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	69fa      	ldr	r2, [r7, #28]
 8002956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800295a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800295e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	2b00      	cmp	r3, #0
 8002966:	d016      	beq.n	8002996 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800296e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002972:	69fa      	ldr	r2, [r7, #28]
 8002974:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002978:	f043 030b 	orr.w	r3, r3, #11
 800297c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002988:	69fa      	ldr	r2, [r7, #28]
 800298a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800298e:	f043 030b 	orr.w	r3, r3, #11
 8002992:	6453      	str	r3, [r2, #68]	; 0x44
 8002994:	e015      	b.n	80029c2 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	69fa      	ldr	r2, [r7, #28]
 80029a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029a8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80029ac:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	69fa      	ldr	r2, [r7, #28]
 80029b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029bc:	f043 030b 	orr.w	r3, r3, #11
 80029c0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	69fa      	ldr	r2, [r7, #28]
 80029cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80029d4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029e6:	461a      	mov	r2, r3
 80029e8:	f002 f888 	bl	8004afc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695a      	ldr	r2, [r3, #20]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80029fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f001 ffa5 	bl	8004950 <USB_ReadInterrupts>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a10:	d124      	bne.n	8002a5c <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f002 f83b 	bl	8004a92 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f001 fefa 	bl	800481a <USB_GetDevSpeed>
 8002a26:	4603      	mov	r3, r0
 8002a28:	461a      	mov	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681c      	ldr	r4, [r3, #0]
 8002a32:	f000 ffa9 	bl	8003988 <HAL_RCC_GetHCLKFreq>
 8002a36:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	461a      	mov	r2, r3
 8002a40:	4620      	mov	r0, r4
 8002a42:	f001 fc39 	bl	80042b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f924 	bl	8002c94 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695a      	ldr	r2, [r3, #20]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002a5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f001 ff75 	bl	8004950 <USB_ReadInterrupts>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f003 0310 	and.w	r3, r3, #16
 8002a6c:	2b10      	cmp	r3, #16
 8002a6e:	d161      	bne.n	8002b34 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	699a      	ldr	r2, [r3, #24]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0210 	bic.w	r2, r2, #16
 8002a7e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f003 020f 	and.w	r2, r3, #15
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	1a9b      	subs	r3, r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	0c5b      	lsrs	r3, r3, #17
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d124      	bne.n	8002af6 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d035      	beq.n	8002b24 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	091b      	lsrs	r3, r3, #4
 8002ac0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ac2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	461a      	mov	r2, r3
 8002aca:	6a38      	ldr	r0, [r7, #32]
 8002acc:	f001 feff 	bl	80048ce <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	091b      	lsrs	r3, r3, #4
 8002ad8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002adc:	441a      	add	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	699a      	ldr	r2, [r3, #24]
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aee:	441a      	add	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	619a      	str	r2, [r3, #24]
 8002af4:	e016      	b.n	8002b24 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	0c5b      	lsrs	r3, r3, #17
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	2b06      	cmp	r3, #6
 8002b00:	d110      	bne.n	8002b24 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b08:	2208      	movs	r2, #8
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	6a38      	ldr	r0, [r7, #32]
 8002b0e:	f001 fede 	bl	80048ce <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	699a      	ldr	r2, [r3, #24]
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	091b      	lsrs	r3, r3, #4
 8002b1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b1e:	441a      	add	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699a      	ldr	r2, [r3, #24]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0210 	orr.w	r2, r2, #16
 8002b32:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f001 ff09 	bl	8004950 <USB_ReadInterrupts>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	f003 0308 	and.w	r3, r3, #8
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d10a      	bne.n	8002b5e <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 f899 	bl	8002c80 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f002 0208 	and.w	r2, r2, #8
 8002b5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f001 fef4 	bl	8004950 <USB_ReadInterrupts>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b72:	d10f      	bne.n	8002b94 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f8b2 	bl	8002ce8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695a      	ldr	r2, [r3, #20]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002b92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f001 fed9 	bl	8004950 <USB_ReadInterrupts>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ba4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ba8:	d10f      	bne.n	8002bca <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f88b 	bl	8002cd0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695a      	ldr	r2, [r3, #20]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002bc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f001 febe 	bl	8004950 <USB_ReadInterrupts>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bde:	d10a      	bne.n	8002bf6 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f88d 	bl	8002d00 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695a      	ldr	r2, [r3, #20]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002bf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f001 fea8 	bl	8004950 <USB_ReadInterrupts>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d115      	bne.n	8002c36 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d002      	beq.n	8002c22 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f879 	bl	8002d14 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6859      	ldr	r1, [r3, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	e000      	b.n	8002c36 <HAL_PCD_IRQHandler+0x740>
      return;
 8002c34:	bf00      	nop
    }
  }
}
 8002c36:	3734      	adds	r7, #52	; 0x34
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd90      	pop	{r4, r7, pc}

08002c3c <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08a      	sub	sp, #40	; 0x28
 8002d2c:	af02      	add	r7, sp, #8
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	1a9b      	subs	r3, r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	3338      	adds	r3, #56	; 0x38
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	699a      	ldr	r2, [r3, #24]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d901      	bls.n	8002d60 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e06c      	b.n	8002e3a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	695a      	ldr	r2, [r3, #20]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	69fa      	ldr	r2, [r7, #28]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d902      	bls.n	8002d7c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	3303      	adds	r3, #3
 8002d80:	089b      	lsrs	r3, r3, #2
 8002d82:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d84:	e02b      	b.n	8002dde <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	695a      	ldr	r2, [r3, #20]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	69fa      	ldr	r2, [r7, #28]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d902      	bls.n	8002da2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	3303      	adds	r3, #3
 8002da6:	089b      	lsrs	r3, r3, #2
 8002da8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	68d9      	ldr	r1, [r3, #12]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	6978      	ldr	r0, [r7, #20]
 8002dc2:	f001 fd4f 	bl	8004864 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	441a      	add	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	699a      	ldr	r2, [r3, #24]
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	441a      	add	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d809      	bhi.n	8002e08 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	699a      	ldr	r2, [r3, #24]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d203      	bcs.n	8002e08 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1be      	bne.n	8002d86 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	695a      	ldr	r2, [r3, #20]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d811      	bhi.n	8002e38 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	6939      	ldr	r1, [r7, #16]
 8002e30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e34:	4013      	ands	r3, r2
 8002e36:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3720      	adds	r7, #32
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	333c      	adds	r3, #60	; 0x3c
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	015a      	lsls	r2, r3, #5
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	4413      	add	r3, r2
 8002e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	f040 80b3 	bne.w	8002fe2 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d028      	beq.n	8002ed8 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4a70      	ldr	r2, [pc, #448]	; (800304c <PCD_EP_OutXfrComplete_int+0x208>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d90e      	bls.n	8002eac <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d009      	beq.n	8002eac <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	015a      	lsls	r2, r3, #5
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eaa:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff fedd 	bl	8002c6c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6818      	ldr	r0, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	f001 fe1c 	bl	8004afc <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	2308      	movs	r3, #8
 8002ed4:	6093      	str	r3, [r2, #8]
 8002ed6:	e0b3      	b.n	8003040 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f003 0320 	and.w	r3, r3, #32
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d009      	beq.n	8002ef6 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	015a      	lsls	r2, r3, #5
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eee:	461a      	mov	r2, r3
 8002ef0:	2320      	movs	r3, #32
 8002ef2:	6093      	str	r3, [r2, #8]
 8002ef4:	e0a4      	b.n	8003040 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f040 809f 	bne.w	8003040 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	4a51      	ldr	r2, [pc, #324]	; (800304c <PCD_EP_OutXfrComplete_int+0x208>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d90f      	bls.n	8002f2a <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00a      	beq.n	8002f2a <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f20:	461a      	mov	r2, r3
 8002f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f26:	6093      	str	r3, [r2, #8]
 8002f28:	e08a      	b.n	8003040 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f3c:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	0159      	lsls	r1, r3, #5
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	440b      	add	r3, r1
 8002f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002f50:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	4613      	mov	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	1a9b      	subs	r3, r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4403      	add	r3, r0
 8002f60:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002f64:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f78:	6819      	ldr	r1, [r3, #0]
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	1a9b      	subs	r3, r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4403      	add	r3, r0
 8002f88:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4419      	add	r1, r3
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	4613      	mov	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	1a9b      	subs	r3, r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4403      	add	r3, r0
 8002f9e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fa2:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	4619      	mov	r1, r3
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff fe46 	bl	8002c3c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d144      	bne.n	8003040 <PCD_EP_OutXfrComplete_int+0x1fc>
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	1a9b      	subs	r3, r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d138      	bne.n	8003040 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6818      	ldr	r0, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fd8:	461a      	mov	r2, r3
 8002fda:	2101      	movs	r1, #1
 8002fdc:	f001 fd8e 	bl	8004afc <USB_EP0_OutStart>
 8002fe0:	e02e      	b.n	8003040 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4a1a      	ldr	r2, [pc, #104]	; (8003050 <PCD_EP_OutXfrComplete_int+0x20c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d124      	bne.n	8003034 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00a      	beq.n	800300a <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	015a      	lsls	r2, r3, #5
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003000:	461a      	mov	r2, r3
 8003002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003006:	6093      	str	r3, [r2, #8]
 8003008:	e01a      	b.n	8003040 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	f003 0320 	and.w	r3, r3, #32
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4413      	add	r3, r2
 800301c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003020:	461a      	mov	r2, r3
 8003022:	2320      	movs	r3, #32
 8003024:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	b2db      	uxtb	r3, r3
 800302a:	4619      	mov	r1, r3
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7ff fe05 	bl	8002c3c <HAL_PCD_DataOutStageCallback>
 8003032:	e005      	b.n	8003040 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	4619      	mov	r1, r3
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff fdfe 	bl	8002c3c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	4f54300a 	.word	0x4f54300a
 8003050:	4f54310a 	.word	0x4f54310a

08003054 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	333c      	adds	r3, #60	; 0x3c
 800306c:	3304      	adds	r3, #4
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4413      	add	r3, r2
 800307a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d113      	bne.n	80030b2 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4a1f      	ldr	r2, [pc, #124]	; (800310c <PCD_EP_OutSetupPacket_int+0xb8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d922      	bls.n	80030d8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003098:	2b00      	cmp	r3, #0
 800309a:	d01d      	beq.n	80030d8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	015a      	lsls	r2, r3, #5
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	4413      	add	r3, r2
 80030a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a8:	461a      	mov	r2, r3
 80030aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ae:	6093      	str	r3, [r2, #8]
 80030b0:	e012      	b.n	80030d8 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	4a16      	ldr	r2, [pc, #88]	; (8003110 <PCD_EP_OutSetupPacket_int+0xbc>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d10e      	bne.n	80030d8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d009      	beq.n	80030d8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	015a      	lsls	r2, r3, #5
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4413      	add	r3, r2
 80030cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030d0:	461a      	mov	r2, r3
 80030d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7ff fdc7 	bl	8002c6c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4a0a      	ldr	r2, [pc, #40]	; (800310c <PCD_EP_OutSetupPacket_int+0xb8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d90c      	bls.n	8003100 <PCD_EP_OutSetupPacket_int+0xac>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d108      	bne.n	8003100 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6818      	ldr	r0, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80030f8:	461a      	mov	r2, r3
 80030fa:	2101      	movs	r1, #1
 80030fc:	f001 fcfe 	bl	8004afc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	4f54300a 	.word	0x4f54300a
 8003110:	4f54310a 	.word	0x4f54310a

08003114 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e25b      	b.n	80035f6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d075      	beq.n	8003236 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800314a:	4ba3      	ldr	r3, [pc, #652]	; (80033d8 <HAL_RCC_OscConfig+0x2ac>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 030c 	and.w	r3, r3, #12
 8003152:	2b04      	cmp	r3, #4
 8003154:	d00c      	beq.n	8003170 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003156:	4ba0      	ldr	r3, [pc, #640]	; (80033d8 <HAL_RCC_OscConfig+0x2ac>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800315e:	2b08      	cmp	r3, #8
 8003160:	d112      	bne.n	8003188 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003162:	4b9d      	ldr	r3, [pc, #628]	; (80033d8 <HAL_RCC_OscConfig+0x2ac>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800316a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800316e:	d10b      	bne.n	8003188 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003170:	4b99      	ldr	r3, [pc, #612]	; (80033d8 <HAL_RCC_OscConfig+0x2ac>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d05b      	beq.n	8003234 <HAL_RCC_OscConfig+0x108>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d157      	bne.n	8003234 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e236      	b.n	80035f6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003190:	d106      	bne.n	80031a0 <HAL_RCC_OscConfig+0x74>
 8003192:	4b91      	ldr	r3, [pc, #580]	; (80033d8 <HAL_RCC_OscConfig+0x2ac>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a90      	ldr	r2, [pc, #576]	; (80033d8 <HAL_RCC_OscConfig+0x2ac>)
 8003198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	e01d      	b.n	80031dc <HAL_RCC_OscConfig+0xb0>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031a8:	d10c      	bne.n	80031c4 <HAL_RCC_OscConfig+0x98>
 80031aa:	4b8b      	ldr	r3, [pc, #556]	; (80033d8 <HAL_RCC_OscConfig+0x2ac>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a8a      	ldr	r2, [pc, #552]	; (80033d8 <HAL_RCC_OscConfig+0x2ac>)
 80031b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	4b88      	ldr	r3, [pc, #544]	; (80033d8 <HAL_RCC_OscConfig+0x2ac>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a87      	ldr	r2, [pc, #540]	; (80033d8 <HAL_RCC_OscConfig+0x2ac>)
 80031bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	e00b      	b.n	80031dc <HAL_RCC_OscConfig+0xb0>
 80031c4:	4b84      	ldr	r3, [pc, #528]	; (80033d8 <HAL_RCC_OscConfig+0x2ac>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a83      	ldr	r2, [pc, #524]	; (80033d8 <HAL_RCC_OscConfig+0x2ac>)
 80031ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	4b81      	ldr	r3, [pc, #516]	; (80033d8 <HAL_RCC_OscConfig+0x2ac>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a80      	ldr	r2, [pc, #512]	; (80033d8 <HAL_RCC_OscConfig+0x2ac>)
 80031d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d013      	beq.n	800320c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e4:	f7fd ffce 	bl	8001184 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031ec:	f7fd ffca 	bl	8001184 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b64      	cmp	r3, #100	; 0x64
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e1fb      	b.n	80035f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fe:	4b76      	ldr	r3, [pc, #472]	; (80033d8 <HAL_RCC_OscConfig+0x2ac>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0f0      	beq.n	80031ec <HAL_RCC_OscConfig+0xc0>
 800320a:	e014      	b.n	8003236 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320c:	f7fd ffba 	bl	8001184 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003214:	f7fd ffb6 	bl	8001184 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b64      	cmp	r3, #100	; 0x64
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e1e7      	b.n	80035f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003226:	4b6c      	ldr	r3, [pc, #432]	; (80033d8 <HAL_RCC_OscConfig+0x2ac>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0xe8>
 8003232:	e000      	b.n	8003236 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d063      	beq.n	800330a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003242:	4b65      	ldr	r3, [pc, #404]	; (80033d8 <HAL_RCC_OscConfig+0x2ac>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 030c 	and.w	r3, r3, #12
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00b      	beq.n	8003266 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800324e:	4b62      	ldr	r3, [pc, #392]	; (80033d8 <HAL_RCC_OscConfig+0x2ac>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003256:	2b08      	cmp	r3, #8
 8003258:	d11c      	bne.n	8003294 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800325a:	4b5f      	ldr	r3, [pc, #380]	; (80033d8 <HAL_RCC_OscConfig+0x2ac>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d116      	bne.n	8003294 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003266:	4b5c      	ldr	r3, [pc, #368]	; (80033d8 <HAL_RCC_OscConfig+0x2ac>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d005      	beq.n	800327e <HAL_RCC_OscConfig+0x152>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d001      	beq.n	800327e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e1bb      	b.n	80035f6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327e:	4b56      	ldr	r3, [pc, #344]	; (80033d8 <HAL_RCC_OscConfig+0x2ac>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	4952      	ldr	r1, [pc, #328]	; (80033d8 <HAL_RCC_OscConfig+0x2ac>)
 800328e:	4313      	orrs	r3, r2
 8003290:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003292:	e03a      	b.n	800330a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d020      	beq.n	80032de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800329c:	4b4f      	ldr	r3, [pc, #316]	; (80033dc <HAL_RCC_OscConfig+0x2b0>)
 800329e:	2201      	movs	r2, #1
 80032a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a2:	f7fd ff6f 	bl	8001184 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032aa:	f7fd ff6b 	bl	8001184 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e19c      	b.n	80035f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032bc:	4b46      	ldr	r3, [pc, #280]	; (80033d8 <HAL_RCC_OscConfig+0x2ac>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c8:	4b43      	ldr	r3, [pc, #268]	; (80033d8 <HAL_RCC_OscConfig+0x2ac>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4940      	ldr	r1, [pc, #256]	; (80033d8 <HAL_RCC_OscConfig+0x2ac>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	600b      	str	r3, [r1, #0]
 80032dc:	e015      	b.n	800330a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032de:	4b3f      	ldr	r3, [pc, #252]	; (80033dc <HAL_RCC_OscConfig+0x2b0>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e4:	f7fd ff4e 	bl	8001184 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032ec:	f7fd ff4a 	bl	8001184 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e17b      	b.n	80035f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032fe:	4b36      	ldr	r3, [pc, #216]	; (80033d8 <HAL_RCC_OscConfig+0x2ac>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b00      	cmp	r3, #0
 8003314:	d030      	beq.n	8003378 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d016      	beq.n	800334c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800331e:	4b30      	ldr	r3, [pc, #192]	; (80033e0 <HAL_RCC_OscConfig+0x2b4>)
 8003320:	2201      	movs	r2, #1
 8003322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003324:	f7fd ff2e 	bl	8001184 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800332c:	f7fd ff2a 	bl	8001184 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e15b      	b.n	80035f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800333e:	4b26      	ldr	r3, [pc, #152]	; (80033d8 <HAL_RCC_OscConfig+0x2ac>)
 8003340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0f0      	beq.n	800332c <HAL_RCC_OscConfig+0x200>
 800334a:	e015      	b.n	8003378 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800334c:	4b24      	ldr	r3, [pc, #144]	; (80033e0 <HAL_RCC_OscConfig+0x2b4>)
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003352:	f7fd ff17 	bl	8001184 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800335a:	f7fd ff13 	bl	8001184 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e144      	b.n	80035f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800336c:	4b1a      	ldr	r3, [pc, #104]	; (80033d8 <HAL_RCC_OscConfig+0x2ac>)
 800336e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1f0      	bne.n	800335a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 80a0 	beq.w	80034c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003386:	2300      	movs	r3, #0
 8003388:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800338a:	4b13      	ldr	r3, [pc, #76]	; (80033d8 <HAL_RCC_OscConfig+0x2ac>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10f      	bne.n	80033b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003396:	2300      	movs	r3, #0
 8003398:	60bb      	str	r3, [r7, #8]
 800339a:	4b0f      	ldr	r3, [pc, #60]	; (80033d8 <HAL_RCC_OscConfig+0x2ac>)
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	4a0e      	ldr	r2, [pc, #56]	; (80033d8 <HAL_RCC_OscConfig+0x2ac>)
 80033a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a4:	6413      	str	r3, [r2, #64]	; 0x40
 80033a6:	4b0c      	ldr	r3, [pc, #48]	; (80033d8 <HAL_RCC_OscConfig+0x2ac>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033b2:	2301      	movs	r3, #1
 80033b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b6:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <HAL_RCC_OscConfig+0x2b8>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d121      	bne.n	8003406 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033c2:	4b08      	ldr	r3, [pc, #32]	; (80033e4 <HAL_RCC_OscConfig+0x2b8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a07      	ldr	r2, [pc, #28]	; (80033e4 <HAL_RCC_OscConfig+0x2b8>)
 80033c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ce:	f7fd fed9 	bl	8001184 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d4:	e011      	b.n	80033fa <HAL_RCC_OscConfig+0x2ce>
 80033d6:	bf00      	nop
 80033d8:	40023800 	.word	0x40023800
 80033dc:	42470000 	.word	0x42470000
 80033e0:	42470e80 	.word	0x42470e80
 80033e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033e8:	f7fd fecc 	bl	8001184 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e0fd      	b.n	80035f6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fa:	4b81      	ldr	r3, [pc, #516]	; (8003600 <HAL_RCC_OscConfig+0x4d4>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0f0      	beq.n	80033e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d106      	bne.n	800341c <HAL_RCC_OscConfig+0x2f0>
 800340e:	4b7d      	ldr	r3, [pc, #500]	; (8003604 <HAL_RCC_OscConfig+0x4d8>)
 8003410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003412:	4a7c      	ldr	r2, [pc, #496]	; (8003604 <HAL_RCC_OscConfig+0x4d8>)
 8003414:	f043 0301 	orr.w	r3, r3, #1
 8003418:	6713      	str	r3, [r2, #112]	; 0x70
 800341a:	e01c      	b.n	8003456 <HAL_RCC_OscConfig+0x32a>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	2b05      	cmp	r3, #5
 8003422:	d10c      	bne.n	800343e <HAL_RCC_OscConfig+0x312>
 8003424:	4b77      	ldr	r3, [pc, #476]	; (8003604 <HAL_RCC_OscConfig+0x4d8>)
 8003426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003428:	4a76      	ldr	r2, [pc, #472]	; (8003604 <HAL_RCC_OscConfig+0x4d8>)
 800342a:	f043 0304 	orr.w	r3, r3, #4
 800342e:	6713      	str	r3, [r2, #112]	; 0x70
 8003430:	4b74      	ldr	r3, [pc, #464]	; (8003604 <HAL_RCC_OscConfig+0x4d8>)
 8003432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003434:	4a73      	ldr	r2, [pc, #460]	; (8003604 <HAL_RCC_OscConfig+0x4d8>)
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	6713      	str	r3, [r2, #112]	; 0x70
 800343c:	e00b      	b.n	8003456 <HAL_RCC_OscConfig+0x32a>
 800343e:	4b71      	ldr	r3, [pc, #452]	; (8003604 <HAL_RCC_OscConfig+0x4d8>)
 8003440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003442:	4a70      	ldr	r2, [pc, #448]	; (8003604 <HAL_RCC_OscConfig+0x4d8>)
 8003444:	f023 0301 	bic.w	r3, r3, #1
 8003448:	6713      	str	r3, [r2, #112]	; 0x70
 800344a:	4b6e      	ldr	r3, [pc, #440]	; (8003604 <HAL_RCC_OscConfig+0x4d8>)
 800344c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344e:	4a6d      	ldr	r2, [pc, #436]	; (8003604 <HAL_RCC_OscConfig+0x4d8>)
 8003450:	f023 0304 	bic.w	r3, r3, #4
 8003454:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d015      	beq.n	800348a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800345e:	f7fd fe91 	bl	8001184 <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003464:	e00a      	b.n	800347c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003466:	f7fd fe8d 	bl	8001184 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	f241 3288 	movw	r2, #5000	; 0x1388
 8003474:	4293      	cmp	r3, r2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e0bc      	b.n	80035f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800347c:	4b61      	ldr	r3, [pc, #388]	; (8003604 <HAL_RCC_OscConfig+0x4d8>)
 800347e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0ee      	beq.n	8003466 <HAL_RCC_OscConfig+0x33a>
 8003488:	e014      	b.n	80034b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800348a:	f7fd fe7b 	bl	8001184 <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003490:	e00a      	b.n	80034a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003492:	f7fd fe77 	bl	8001184 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e0a6      	b.n	80035f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a8:	4b56      	ldr	r3, [pc, #344]	; (8003604 <HAL_RCC_OscConfig+0x4d8>)
 80034aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1ee      	bne.n	8003492 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034b4:	7dfb      	ldrb	r3, [r7, #23]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d105      	bne.n	80034c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ba:	4b52      	ldr	r3, [pc, #328]	; (8003604 <HAL_RCC_OscConfig+0x4d8>)
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	4a51      	ldr	r2, [pc, #324]	; (8003604 <HAL_RCC_OscConfig+0x4d8>)
 80034c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 8092 	beq.w	80035f4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034d0:	4b4c      	ldr	r3, [pc, #304]	; (8003604 <HAL_RCC_OscConfig+0x4d8>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 030c 	and.w	r3, r3, #12
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d05c      	beq.n	8003596 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d141      	bne.n	8003568 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e4:	4b48      	ldr	r3, [pc, #288]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ea:	f7fd fe4b 	bl	8001184 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f2:	f7fd fe47 	bl	8001184 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e078      	b.n	80035f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003504:	4b3f      	ldr	r3, [pc, #252]	; (8003604 <HAL_RCC_OscConfig+0x4d8>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1f0      	bne.n	80034f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	69da      	ldr	r2, [r3, #28]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	431a      	orrs	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	019b      	lsls	r3, r3, #6
 8003520:	431a      	orrs	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003526:	085b      	lsrs	r3, r3, #1
 8003528:	3b01      	subs	r3, #1
 800352a:	041b      	lsls	r3, r3, #16
 800352c:	431a      	orrs	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003532:	061b      	lsls	r3, r3, #24
 8003534:	4933      	ldr	r1, [pc, #204]	; (8003604 <HAL_RCC_OscConfig+0x4d8>)
 8003536:	4313      	orrs	r3, r2
 8003538:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800353a:	4b33      	ldr	r3, [pc, #204]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 800353c:	2201      	movs	r2, #1
 800353e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003540:	f7fd fe20 	bl	8001184 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003548:	f7fd fe1c 	bl	8001184 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e04d      	b.n	80035f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355a:	4b2a      	ldr	r3, [pc, #168]	; (8003604 <HAL_RCC_OscConfig+0x4d8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0f0      	beq.n	8003548 <HAL_RCC_OscConfig+0x41c>
 8003566:	e045      	b.n	80035f4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003568:	4b27      	ldr	r3, [pc, #156]	; (8003608 <HAL_RCC_OscConfig+0x4dc>)
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356e:	f7fd fe09 	bl	8001184 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003576:	f7fd fe05 	bl	8001184 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e036      	b.n	80035f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003588:	4b1e      	ldr	r3, [pc, #120]	; (8003604 <HAL_RCC_OscConfig+0x4d8>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1f0      	bne.n	8003576 <HAL_RCC_OscConfig+0x44a>
 8003594:	e02e      	b.n	80035f4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e029      	b.n	80035f6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035a2:	4b18      	ldr	r3, [pc, #96]	; (8003604 <HAL_RCC_OscConfig+0x4d8>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d11c      	bne.n	80035f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d115      	bne.n	80035f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035ca:	4013      	ands	r3, r2
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d10d      	bne.n	80035f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80035de:	429a      	cmp	r2, r3
 80035e0:	d106      	bne.n	80035f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e000      	b.n	80035f6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40007000 	.word	0x40007000
 8003604:	40023800 	.word	0x40023800
 8003608:	42470060 	.word	0x42470060

0800360c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e0cc      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003620:	4b68      	ldr	r3, [pc, #416]	; (80037c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 030f 	and.w	r3, r3, #15
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d90c      	bls.n	8003648 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362e:	4b65      	ldr	r3, [pc, #404]	; (80037c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003636:	4b63      	ldr	r3, [pc, #396]	; (80037c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d001      	beq.n	8003648 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0b8      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d020      	beq.n	8003696 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003660:	4b59      	ldr	r3, [pc, #356]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	4a58      	ldr	r2, [pc, #352]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800366a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003678:	4b53      	ldr	r3, [pc, #332]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	4a52      	ldr	r2, [pc, #328]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003682:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003684:	4b50      	ldr	r3, [pc, #320]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	494d      	ldr	r1, [pc, #308]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	4313      	orrs	r3, r2
 8003694:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d044      	beq.n	800372c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d107      	bne.n	80036ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036aa:	4b47      	ldr	r3, [pc, #284]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d119      	bne.n	80036ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e07f      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d003      	beq.n	80036ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036c6:	2b03      	cmp	r3, #3
 80036c8:	d107      	bne.n	80036da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ca:	4b3f      	ldr	r3, [pc, #252]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d109      	bne.n	80036ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e06f      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036da:	4b3b      	ldr	r3, [pc, #236]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e067      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ea:	4b37      	ldr	r3, [pc, #220]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f023 0203 	bic.w	r2, r3, #3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	4934      	ldr	r1, [pc, #208]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036fc:	f7fd fd42 	bl	8001184 <HAL_GetTick>
 8003700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003702:	e00a      	b.n	800371a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003704:	f7fd fd3e 	bl	8001184 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003712:	4293      	cmp	r3, r2
 8003714:	d901      	bls.n	800371a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e04f      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371a:	4b2b      	ldr	r3, [pc, #172]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 020c 	and.w	r2, r3, #12
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	429a      	cmp	r2, r3
 800372a:	d1eb      	bne.n	8003704 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800372c:	4b25      	ldr	r3, [pc, #148]	; (80037c4 <HAL_RCC_ClockConfig+0x1b8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	429a      	cmp	r2, r3
 8003738:	d20c      	bcs.n	8003754 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373a:	4b22      	ldr	r3, [pc, #136]	; (80037c4 <HAL_RCC_ClockConfig+0x1b8>)
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003742:	4b20      	ldr	r3, [pc, #128]	; (80037c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d001      	beq.n	8003754 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e032      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d008      	beq.n	8003772 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003760:	4b19      	ldr	r3, [pc, #100]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	4916      	ldr	r1, [pc, #88]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	4313      	orrs	r3, r2
 8003770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	2b00      	cmp	r3, #0
 800377c:	d009      	beq.n	8003792 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800377e:	4b12      	ldr	r3, [pc, #72]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	490e      	ldr	r1, [pc, #56]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	4313      	orrs	r3, r2
 8003790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003792:	f000 f821 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 8003796:	4601      	mov	r1, r0
 8003798:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	091b      	lsrs	r3, r3, #4
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	4a0a      	ldr	r2, [pc, #40]	; (80037cc <HAL_RCC_ClockConfig+0x1c0>)
 80037a4:	5cd3      	ldrb	r3, [r2, r3]
 80037a6:	fa21 f303 	lsr.w	r3, r1, r3
 80037aa:	4a09      	ldr	r2, [pc, #36]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 80037ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037ae:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <HAL_RCC_ClockConfig+0x1c8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fd fbea 	bl	8000f8c <HAL_InitTick>

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40023c00 	.word	0x40023c00
 80037c8:	40023800 	.word	0x40023800
 80037cc:	08007160 	.word	0x08007160
 80037d0:	20000000 	.word	0x20000000
 80037d4:	20000004 	.word	0x20000004

080037d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037de:	2300      	movs	r3, #0
 80037e0:	607b      	str	r3, [r7, #4]
 80037e2:	2300      	movs	r3, #0
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	2300      	movs	r3, #0
 80037e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037ee:	4b63      	ldr	r3, [pc, #396]	; (800397c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 030c 	and.w	r3, r3, #12
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d007      	beq.n	800380a <HAL_RCC_GetSysClockFreq+0x32>
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d008      	beq.n	8003810 <HAL_RCC_GetSysClockFreq+0x38>
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f040 80b4 	bne.w	800396c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003804:	4b5e      	ldr	r3, [pc, #376]	; (8003980 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003806:	60bb      	str	r3, [r7, #8]
       break;
 8003808:	e0b3      	b.n	8003972 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800380a:	4b5e      	ldr	r3, [pc, #376]	; (8003984 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800380c:	60bb      	str	r3, [r7, #8]
      break;
 800380e:	e0b0      	b.n	8003972 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003810:	4b5a      	ldr	r3, [pc, #360]	; (800397c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003818:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800381a:	4b58      	ldr	r3, [pc, #352]	; (800397c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d04a      	beq.n	80038bc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003826:	4b55      	ldr	r3, [pc, #340]	; (800397c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	099b      	lsrs	r3, r3, #6
 800382c:	f04f 0400 	mov.w	r4, #0
 8003830:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	ea03 0501 	and.w	r5, r3, r1
 800383c:	ea04 0602 	and.w	r6, r4, r2
 8003840:	4629      	mov	r1, r5
 8003842:	4632      	mov	r2, r6
 8003844:	f04f 0300 	mov.w	r3, #0
 8003848:	f04f 0400 	mov.w	r4, #0
 800384c:	0154      	lsls	r4, r2, #5
 800384e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003852:	014b      	lsls	r3, r1, #5
 8003854:	4619      	mov	r1, r3
 8003856:	4622      	mov	r2, r4
 8003858:	1b49      	subs	r1, r1, r5
 800385a:	eb62 0206 	sbc.w	r2, r2, r6
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	f04f 0400 	mov.w	r4, #0
 8003866:	0194      	lsls	r4, r2, #6
 8003868:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800386c:	018b      	lsls	r3, r1, #6
 800386e:	1a5b      	subs	r3, r3, r1
 8003870:	eb64 0402 	sbc.w	r4, r4, r2
 8003874:	f04f 0100 	mov.w	r1, #0
 8003878:	f04f 0200 	mov.w	r2, #0
 800387c:	00e2      	lsls	r2, r4, #3
 800387e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003882:	00d9      	lsls	r1, r3, #3
 8003884:	460b      	mov	r3, r1
 8003886:	4614      	mov	r4, r2
 8003888:	195b      	adds	r3, r3, r5
 800388a:	eb44 0406 	adc.w	r4, r4, r6
 800388e:	f04f 0100 	mov.w	r1, #0
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	0262      	lsls	r2, r4, #9
 8003898:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800389c:	0259      	lsls	r1, r3, #9
 800389e:	460b      	mov	r3, r1
 80038a0:	4614      	mov	r4, r2
 80038a2:	4618      	mov	r0, r3
 80038a4:	4621      	mov	r1, r4
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f04f 0400 	mov.w	r4, #0
 80038ac:	461a      	mov	r2, r3
 80038ae:	4623      	mov	r3, r4
 80038b0:	f7fc fc96 	bl	80001e0 <__aeabi_uldivmod>
 80038b4:	4603      	mov	r3, r0
 80038b6:	460c      	mov	r4, r1
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	e049      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038bc:	4b2f      	ldr	r3, [pc, #188]	; (800397c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	099b      	lsrs	r3, r3, #6
 80038c2:	f04f 0400 	mov.w	r4, #0
 80038c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	ea03 0501 	and.w	r5, r3, r1
 80038d2:	ea04 0602 	and.w	r6, r4, r2
 80038d6:	4629      	mov	r1, r5
 80038d8:	4632      	mov	r2, r6
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	f04f 0400 	mov.w	r4, #0
 80038e2:	0154      	lsls	r4, r2, #5
 80038e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038e8:	014b      	lsls	r3, r1, #5
 80038ea:	4619      	mov	r1, r3
 80038ec:	4622      	mov	r2, r4
 80038ee:	1b49      	subs	r1, r1, r5
 80038f0:	eb62 0206 	sbc.w	r2, r2, r6
 80038f4:	f04f 0300 	mov.w	r3, #0
 80038f8:	f04f 0400 	mov.w	r4, #0
 80038fc:	0194      	lsls	r4, r2, #6
 80038fe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003902:	018b      	lsls	r3, r1, #6
 8003904:	1a5b      	subs	r3, r3, r1
 8003906:	eb64 0402 	sbc.w	r4, r4, r2
 800390a:	f04f 0100 	mov.w	r1, #0
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	00e2      	lsls	r2, r4, #3
 8003914:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003918:	00d9      	lsls	r1, r3, #3
 800391a:	460b      	mov	r3, r1
 800391c:	4614      	mov	r4, r2
 800391e:	195b      	adds	r3, r3, r5
 8003920:	eb44 0406 	adc.w	r4, r4, r6
 8003924:	f04f 0100 	mov.w	r1, #0
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	02a2      	lsls	r2, r4, #10
 800392e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003932:	0299      	lsls	r1, r3, #10
 8003934:	460b      	mov	r3, r1
 8003936:	4614      	mov	r4, r2
 8003938:	4618      	mov	r0, r3
 800393a:	4621      	mov	r1, r4
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f04f 0400 	mov.w	r4, #0
 8003942:	461a      	mov	r2, r3
 8003944:	4623      	mov	r3, r4
 8003946:	f7fc fc4b 	bl	80001e0 <__aeabi_uldivmod>
 800394a:	4603      	mov	r3, r0
 800394c:	460c      	mov	r4, r1
 800394e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003950:	4b0a      	ldr	r3, [pc, #40]	; (800397c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	0c1b      	lsrs	r3, r3, #16
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	3301      	adds	r3, #1
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	fbb2 f3f3 	udiv	r3, r2, r3
 8003968:	60bb      	str	r3, [r7, #8]
      break;
 800396a:	e002      	b.n	8003972 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800396c:	4b04      	ldr	r3, [pc, #16]	; (8003980 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800396e:	60bb      	str	r3, [r7, #8]
      break;
 8003970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003972:	68bb      	ldr	r3, [r7, #8]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800397c:	40023800 	.word	0x40023800
 8003980:	00f42400 	.word	0x00f42400
 8003984:	007a1200 	.word	0x007a1200

08003988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800398c:	4b03      	ldr	r3, [pc, #12]	; (800399c <HAL_RCC_GetHCLKFreq+0x14>)
 800398e:	681b      	ldr	r3, [r3, #0]
}
 8003990:	4618      	mov	r0, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	20000000 	.word	0x20000000

080039a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039a4:	f7ff fff0 	bl	8003988 <HAL_RCC_GetHCLKFreq>
 80039a8:	4601      	mov	r1, r0
 80039aa:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	0a9b      	lsrs	r3, r3, #10
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	4a03      	ldr	r2, [pc, #12]	; (80039c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039b6:	5cd3      	ldrb	r3, [r2, r3]
 80039b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80039bc:	4618      	mov	r0, r3
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40023800 	.word	0x40023800
 80039c4:	08007170 	.word	0x08007170

080039c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039cc:	f7ff ffdc 	bl	8003988 <HAL_RCC_GetHCLKFreq>
 80039d0:	4601      	mov	r1, r0
 80039d2:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	0b5b      	lsrs	r3, r3, #13
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	4a03      	ldr	r2, [pc, #12]	; (80039ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80039de:	5cd3      	ldrb	r3, [r2, r3]
 80039e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40023800 	.word	0x40023800
 80039ec:	08007170 	.word	0x08007170

080039f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	220f      	movs	r2, #15
 80039fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a00:	4b12      	ldr	r3, [pc, #72]	; (8003a4c <HAL_RCC_GetClockConfig+0x5c>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 0203 	and.w	r2, r3, #3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a0c:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <HAL_RCC_GetClockConfig+0x5c>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a18:	4b0c      	ldr	r3, [pc, #48]	; (8003a4c <HAL_RCC_GetClockConfig+0x5c>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a24:	4b09      	ldr	r3, [pc, #36]	; (8003a4c <HAL_RCC_GetClockConfig+0x5c>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	08db      	lsrs	r3, r3, #3
 8003a2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a32:	4b07      	ldr	r3, [pc, #28]	; (8003a50 <HAL_RCC_GetClockConfig+0x60>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 020f 	and.w	r2, r3, #15
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	601a      	str	r2, [r3, #0]
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	40023c00 	.word	0x40023c00

08003a54 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003a60:	2300      	movs	r3, #0
 8003a62:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d105      	bne.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d038      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a7c:	4b68      	ldr	r3, [pc, #416]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a82:	f7fd fb7f 	bl	8001184 <HAL_GetTick>
 8003a86:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a88:	e008      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a8a:	f7fd fb7b 	bl	8001184 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e0bd      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a9c:	4b61      	ldr	r3, [pc, #388]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1f0      	bne.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	019b      	lsls	r3, r3, #6
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	071b      	lsls	r3, r3, #28
 8003aba:	495a      	ldr	r1, [pc, #360]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ac2:	4b57      	ldr	r3, [pc, #348]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ac8:	f7fd fb5c 	bl	8001184 <HAL_GetTick>
 8003acc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ad0:	f7fd fb58 	bl	8001184 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e09a      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ae2:	4b50      	ldr	r3, [pc, #320]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 8083 	beq.w	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003afc:	2300      	movs	r3, #0
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	4b48      	ldr	r3, [pc, #288]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b04:	4a47      	ldr	r2, [pc, #284]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b0a:	6413      	str	r3, [r2, #64]	; 0x40
 8003b0c:	4b45      	ldr	r3, [pc, #276]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003b18:	4b43      	ldr	r3, [pc, #268]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a42      	ldr	r2, [pc, #264]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b22:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b24:	f7fd fb2e 	bl	8001184 <HAL_GetTick>
 8003b28:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b2c:	f7fd fb2a 	bl	8001184 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e06c      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b3e:	4b3a      	ldr	r3, [pc, #232]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0f0      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b4a:	4b36      	ldr	r3, [pc, #216]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b52:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d02f      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d028      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b68:	4b2e      	ldr	r3, [pc, #184]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b70:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b72:	4b2e      	ldr	r3, [pc, #184]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b74:	2201      	movs	r2, #1
 8003b76:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b78:	4b2c      	ldr	r3, [pc, #176]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003b7e:	4a29      	ldr	r2, [pc, #164]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b84:	4b27      	ldr	r3, [pc, #156]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d114      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003b90:	f7fd faf8 	bl	8001184 <HAL_GetTick>
 8003b94:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b96:	e00a      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b98:	f7fd faf4 	bl	8001184 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e034      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bae:	4b1d      	ldr	r3, [pc, #116]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0ee      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bc6:	d10d      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003bc8:	4b16      	ldr	r3, [pc, #88]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bdc:	4911      	ldr	r1, [pc, #68]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	608b      	str	r3, [r1, #8]
 8003be2:	e005      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003be4:	4b0f      	ldr	r3, [pc, #60]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	4a0e      	ldr	r2, [pc, #56]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003bee:	6093      	str	r3, [r2, #8]
 8003bf0:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bfc:	4909      	ldr	r1, [pc, #36]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	7d1a      	ldrb	r2, [r3, #20]
 8003c12:	4b07      	ldr	r3, [pc, #28]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003c14:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3718      	adds	r7, #24
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	42470068 	.word	0x42470068
 8003c24:	40023800 	.word	0x40023800
 8003c28:	40007000 	.word	0x40007000
 8003c2c:	42470e40 	.word	0x42470e40
 8003c30:	424711e0 	.word	0x424711e0

08003c34 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d13f      	bne.n	8003cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003c52:	4b23      	ldr	r3, [pc, #140]	; (8003ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c5a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d004      	beq.n	8003c6c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d131      	bne.n	8003cca <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003c66:	4b1f      	ldr	r3, [pc, #124]	; (8003ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c68:	617b      	str	r3, [r7, #20]
          break;
 8003c6a:	e031      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003c6c:	4b1c      	ldr	r3, [pc, #112]	; (8003ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c78:	d109      	bne.n	8003c8e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003c7a:	4b19      	ldr	r3, [pc, #100]	; (8003ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c84:	4a18      	ldr	r2, [pc, #96]	; (8003ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8a:	613b      	str	r3, [r7, #16]
 8003c8c:	e008      	b.n	8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003c8e:	4b14      	ldr	r3, [pc, #80]	; (8003ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c98:	4a14      	ldr	r2, [pc, #80]	; (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9e:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003ca0:	4b0f      	ldr	r3, [pc, #60]	; (8003ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ca6:	099b      	lsrs	r3, r3, #6
 8003ca8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	fb02 f303 	mul.w	r3, r2, r3
 8003cb2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003cb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cba:	0f1b      	lsrs	r3, r3, #28
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc6:	617b      	str	r3, [r7, #20]
          break;
 8003cc8:	e002      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	617b      	str	r3, [r7, #20]
          break;
 8003cce:	bf00      	nop
        }
      }
      break;
 8003cd0:	bf00      	nop
    }
  }
  return frequency;
 8003cd2:	697b      	ldr	r3, [r7, #20]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	371c      	adds	r7, #28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	00bb8000 	.word	0x00bb8000
 8003ce8:	007a1200 	.word	0x007a1200
 8003cec:	00f42400 	.word	0x00f42400

08003cf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e056      	b.n	8003db0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d106      	bne.n	8003d22 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7fd f88b 	bl	8000e38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2202      	movs	r2, #2
 8003d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d38:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	431a      	orrs	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	431a      	orrs	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	ea42 0103 	orr.w	r1, r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	0c1b      	lsrs	r3, r3, #16
 8003d80:	f003 0104 	and.w	r1, r3, #4
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	69da      	ldr	r2, [r3, #28]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d9e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e01d      	b.n	8003e06 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d106      	bne.n	8003de4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f815 	bl	8003e0e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3304      	adds	r3, #4
 8003df4:	4619      	mov	r1, r3
 8003df6:	4610      	mov	r0, r2
 8003df8:	f000 f968 	bl	80040cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b085      	sub	sp, #20
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f042 0201 	orr.w	r2, r2, #1
 8003e38:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2b06      	cmp	r3, #6
 8003e4a:	d007      	beq.n	8003e5c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0201 	orr.w	r2, r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b082      	sub	sp, #8
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d122      	bne.n	8003ec6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d11b      	bne.n	8003ec6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f06f 0202 	mvn.w	r2, #2
 8003e96:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	f003 0303 	and.w	r3, r3, #3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f8ee 	bl	800408e <HAL_TIM_IC_CaptureCallback>
 8003eb2:	e005      	b.n	8003ec0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f8e0 	bl	800407a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f8f1 	bl	80040a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d122      	bne.n	8003f1a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d11b      	bne.n	8003f1a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f06f 0204 	mvn.w	r2, #4
 8003eea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d003      	beq.n	8003f08 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f8c4 	bl	800408e <HAL_TIM_IC_CaptureCallback>
 8003f06:	e005      	b.n	8003f14 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f8b6 	bl	800407a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f8c7 	bl	80040a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d122      	bne.n	8003f6e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b08      	cmp	r3, #8
 8003f34:	d11b      	bne.n	8003f6e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f06f 0208 	mvn.w	r2, #8
 8003f3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2204      	movs	r2, #4
 8003f44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	69db      	ldr	r3, [r3, #28]
 8003f4c:	f003 0303 	and.w	r3, r3, #3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f89a 	bl	800408e <HAL_TIM_IC_CaptureCallback>
 8003f5a:	e005      	b.n	8003f68 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f88c 	bl	800407a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f89d 	bl	80040a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	f003 0310 	and.w	r3, r3, #16
 8003f78:	2b10      	cmp	r3, #16
 8003f7a:	d122      	bne.n	8003fc2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f003 0310 	and.w	r3, r3, #16
 8003f86:	2b10      	cmp	r3, #16
 8003f88:	d11b      	bne.n	8003fc2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f06f 0210 	mvn.w	r2, #16
 8003f92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2208      	movs	r2, #8
 8003f98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f870 	bl	800408e <HAL_TIM_IC_CaptureCallback>
 8003fae:	e005      	b.n	8003fbc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f862 	bl	800407a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f873 	bl	80040a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d10e      	bne.n	8003fee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d107      	bne.n	8003fee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f06f 0201 	mvn.w	r2, #1
 8003fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7fc fdc9 	bl	8000b80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff8:	2b80      	cmp	r3, #128	; 0x80
 8003ffa:	d10e      	bne.n	800401a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004006:	2b80      	cmp	r3, #128	; 0x80
 8004008:	d107      	bne.n	800401a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f8e3 	bl	80041e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004024:	2b40      	cmp	r3, #64	; 0x40
 8004026:	d10e      	bne.n	8004046 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004032:	2b40      	cmp	r3, #64	; 0x40
 8004034:	d107      	bne.n	8004046 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800403e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f838 	bl	80040b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	f003 0320 	and.w	r3, r3, #32
 8004050:	2b20      	cmp	r3, #32
 8004052:	d10e      	bne.n	8004072 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f003 0320 	and.w	r3, r3, #32
 800405e:	2b20      	cmp	r3, #32
 8004060:	d107      	bne.n	8004072 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f06f 0220 	mvn.w	r2, #32
 800406a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f8ad 	bl	80041cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004072:	bf00      	nop
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800407a:	b480      	push	{r7}
 800407c:	b083      	sub	sp, #12
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004082:	bf00      	nop
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
	...

080040cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a34      	ldr	r2, [pc, #208]	; (80041b0 <TIM_Base_SetConfig+0xe4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d00f      	beq.n	8004104 <TIM_Base_SetConfig+0x38>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ea:	d00b      	beq.n	8004104 <TIM_Base_SetConfig+0x38>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a31      	ldr	r2, [pc, #196]	; (80041b4 <TIM_Base_SetConfig+0xe8>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d007      	beq.n	8004104 <TIM_Base_SetConfig+0x38>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a30      	ldr	r2, [pc, #192]	; (80041b8 <TIM_Base_SetConfig+0xec>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d003      	beq.n	8004104 <TIM_Base_SetConfig+0x38>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a2f      	ldr	r2, [pc, #188]	; (80041bc <TIM_Base_SetConfig+0xf0>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d108      	bne.n	8004116 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	4313      	orrs	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a25      	ldr	r2, [pc, #148]	; (80041b0 <TIM_Base_SetConfig+0xe4>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d01b      	beq.n	8004156 <TIM_Base_SetConfig+0x8a>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004124:	d017      	beq.n	8004156 <TIM_Base_SetConfig+0x8a>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a22      	ldr	r2, [pc, #136]	; (80041b4 <TIM_Base_SetConfig+0xe8>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d013      	beq.n	8004156 <TIM_Base_SetConfig+0x8a>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a21      	ldr	r2, [pc, #132]	; (80041b8 <TIM_Base_SetConfig+0xec>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d00f      	beq.n	8004156 <TIM_Base_SetConfig+0x8a>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a20      	ldr	r2, [pc, #128]	; (80041bc <TIM_Base_SetConfig+0xf0>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00b      	beq.n	8004156 <TIM_Base_SetConfig+0x8a>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a1f      	ldr	r2, [pc, #124]	; (80041c0 <TIM_Base_SetConfig+0xf4>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d007      	beq.n	8004156 <TIM_Base_SetConfig+0x8a>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a1e      	ldr	r2, [pc, #120]	; (80041c4 <TIM_Base_SetConfig+0xf8>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d003      	beq.n	8004156 <TIM_Base_SetConfig+0x8a>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a1d      	ldr	r2, [pc, #116]	; (80041c8 <TIM_Base_SetConfig+0xfc>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d108      	bne.n	8004168 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800415c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	4313      	orrs	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	4313      	orrs	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a08      	ldr	r2, [pc, #32]	; (80041b0 <TIM_Base_SetConfig+0xe4>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d103      	bne.n	800419c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	691a      	ldr	r2, [r3, #16]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	615a      	str	r2, [r3, #20]
}
 80041a2:	bf00      	nop
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40010000 	.word	0x40010000
 80041b4:	40000400 	.word	0x40000400
 80041b8:	40000800 	.word	0x40000800
 80041bc:	40000c00 	.word	0x40000c00
 80041c0:	40014000 	.word	0x40014000
 80041c4:	40014400 	.word	0x40014400
 80041c8:	40014800 	.word	0x40014800

080041cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041f4:	b084      	sub	sp, #16
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b084      	sub	sp, #16
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
 80041fe:	f107 001c 	add.w	r0, r7, #28
 8004202:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004208:	2b01      	cmp	r3, #1
 800420a:	d122      	bne.n	8004252 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004210:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004220:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004236:	2b01      	cmp	r3, #1
 8004238:	d105      	bne.n	8004246 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 fcb6 	bl	8004bb8 <USB_CoreReset>
 800424c:	4603      	mov	r3, r0
 800424e:	73fb      	strb	r3, [r7, #15]
 8004250:	e01a      	b.n	8004288 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 fcaa 	bl	8004bb8 <USB_CoreReset>
 8004264:	4603      	mov	r3, r0
 8004266:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800426a:	2b00      	cmp	r3, #0
 800426c:	d106      	bne.n	800427c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004272:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	639a      	str	r2, [r3, #56]	; 0x38
 800427a:	e005      	b.n	8004288 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004280:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428a:	2b01      	cmp	r3, #1
 800428c:	d10b      	bne.n	80042a6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f043 0206 	orr.w	r2, r3, #6
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f043 0220 	orr.w	r2, r3, #32
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042b2:	b004      	add	sp, #16
 80042b4:	4770      	bx	lr
	...

080042b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	4613      	mov	r3, r2
 80042c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80042c6:	79fb      	ldrb	r3, [r7, #7]
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d165      	bne.n	8004398 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4a41      	ldr	r2, [pc, #260]	; (80043d4 <USB_SetTurnaroundTime+0x11c>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d906      	bls.n	80042e2 <USB_SetTurnaroundTime+0x2a>
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4a40      	ldr	r2, [pc, #256]	; (80043d8 <USB_SetTurnaroundTime+0x120>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d802      	bhi.n	80042e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80042dc:	230f      	movs	r3, #15
 80042de:	617b      	str	r3, [r7, #20]
 80042e0:	e062      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	4a3c      	ldr	r2, [pc, #240]	; (80043d8 <USB_SetTurnaroundTime+0x120>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d906      	bls.n	80042f8 <USB_SetTurnaroundTime+0x40>
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	4a3b      	ldr	r2, [pc, #236]	; (80043dc <USB_SetTurnaroundTime+0x124>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d802      	bhi.n	80042f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80042f2:	230e      	movs	r3, #14
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	e057      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	4a38      	ldr	r2, [pc, #224]	; (80043dc <USB_SetTurnaroundTime+0x124>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d906      	bls.n	800430e <USB_SetTurnaroundTime+0x56>
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	4a37      	ldr	r2, [pc, #220]	; (80043e0 <USB_SetTurnaroundTime+0x128>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d802      	bhi.n	800430e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004308:	230d      	movs	r3, #13
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	e04c      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	4a33      	ldr	r2, [pc, #204]	; (80043e0 <USB_SetTurnaroundTime+0x128>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d906      	bls.n	8004324 <USB_SetTurnaroundTime+0x6c>
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	4a32      	ldr	r2, [pc, #200]	; (80043e4 <USB_SetTurnaroundTime+0x12c>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d802      	bhi.n	8004324 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800431e:	230c      	movs	r3, #12
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	e041      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4a2f      	ldr	r2, [pc, #188]	; (80043e4 <USB_SetTurnaroundTime+0x12c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d906      	bls.n	800433a <USB_SetTurnaroundTime+0x82>
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	4a2e      	ldr	r2, [pc, #184]	; (80043e8 <USB_SetTurnaroundTime+0x130>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d802      	bhi.n	800433a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004334:	230b      	movs	r3, #11
 8004336:	617b      	str	r3, [r7, #20]
 8004338:	e036      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	4a2a      	ldr	r2, [pc, #168]	; (80043e8 <USB_SetTurnaroundTime+0x130>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d906      	bls.n	8004350 <USB_SetTurnaroundTime+0x98>
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	4a29      	ldr	r2, [pc, #164]	; (80043ec <USB_SetTurnaroundTime+0x134>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d802      	bhi.n	8004350 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800434a:	230a      	movs	r3, #10
 800434c:	617b      	str	r3, [r7, #20]
 800434e:	e02b      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	4a26      	ldr	r2, [pc, #152]	; (80043ec <USB_SetTurnaroundTime+0x134>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d906      	bls.n	8004366 <USB_SetTurnaroundTime+0xae>
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	4a25      	ldr	r2, [pc, #148]	; (80043f0 <USB_SetTurnaroundTime+0x138>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d802      	bhi.n	8004366 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004360:	2309      	movs	r3, #9
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	e020      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	4a21      	ldr	r2, [pc, #132]	; (80043f0 <USB_SetTurnaroundTime+0x138>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d906      	bls.n	800437c <USB_SetTurnaroundTime+0xc4>
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	4a20      	ldr	r2, [pc, #128]	; (80043f4 <USB_SetTurnaroundTime+0x13c>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d802      	bhi.n	800437c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004376:	2308      	movs	r3, #8
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	e015      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4a1d      	ldr	r2, [pc, #116]	; (80043f4 <USB_SetTurnaroundTime+0x13c>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d906      	bls.n	8004392 <USB_SetTurnaroundTime+0xda>
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	4a1c      	ldr	r2, [pc, #112]	; (80043f8 <USB_SetTurnaroundTime+0x140>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d802      	bhi.n	8004392 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800438c:	2307      	movs	r3, #7
 800438e:	617b      	str	r3, [r7, #20]
 8004390:	e00a      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004392:	2306      	movs	r3, #6
 8004394:	617b      	str	r3, [r7, #20]
 8004396:	e007      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004398:	79fb      	ldrb	r3, [r7, #7]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d102      	bne.n	80043a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800439e:	2309      	movs	r3, #9
 80043a0:	617b      	str	r3, [r7, #20]
 80043a2:	e001      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80043a4:	2309      	movs	r3, #9
 80043a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	68da      	ldr	r2, [r3, #12]
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	029b      	lsls	r3, r3, #10
 80043bc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80043c0:	431a      	orrs	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	371c      	adds	r7, #28
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	00d8acbf 	.word	0x00d8acbf
 80043d8:	00e4e1bf 	.word	0x00e4e1bf
 80043dc:	00f423ff 	.word	0x00f423ff
 80043e0:	0106737f 	.word	0x0106737f
 80043e4:	011a499f 	.word	0x011a499f
 80043e8:	01312cff 	.word	0x01312cff
 80043ec:	014ca43f 	.word	0x014ca43f
 80043f0:	016e35ff 	.word	0x016e35ff
 80043f4:	01a6ab1f 	.word	0x01a6ab1f
 80043f8:	01e847ff 	.word	0x01e847ff

080043fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f023 0201 	bic.w	r2, r3, #1
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b082      	sub	sp, #8
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
 8004426:	460b      	mov	r3, r1
 8004428:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004436:	78fb      	ldrb	r3, [r7, #3]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d106      	bne.n	800444a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	60da      	str	r2, [r3, #12]
 8004448:	e00b      	b.n	8004462 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800444a:	78fb      	ldrb	r3, [r7, #3]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d106      	bne.n	800445e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	60da      	str	r2, [r3, #12]
 800445c:	e001      	b.n	8004462 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e003      	b.n	800446a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004462:	2032      	movs	r0, #50	; 0x32
 8004464:	f7fc fe9a 	bl	800119c <HAL_Delay>

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
	...

08004474 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004474:	b084      	sub	sp, #16
 8004476:	b580      	push	{r7, lr}
 8004478:	b086      	sub	sp, #24
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004482:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004486:	2300      	movs	r3, #0
 8004488:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800448e:	2300      	movs	r3, #0
 8004490:	613b      	str	r3, [r7, #16]
 8004492:	e009      	b.n	80044a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	3340      	adds	r3, #64	; 0x40
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	2200      	movs	r2, #0
 80044a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	3301      	adds	r3, #1
 80044a6:	613b      	str	r3, [r7, #16]
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	2b0e      	cmp	r3, #14
 80044ac:	d9f2      	bls.n	8004494 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80044ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d112      	bne.n	80044da <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	639a      	str	r2, [r3, #56]	; 0x38
 80044d8:	e00b      	b.n	80044f2 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044f8:	461a      	mov	r2, r3
 80044fa:	2300      	movs	r3, #0
 80044fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004504:	4619      	mov	r1, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800450c:	461a      	mov	r2, r3
 800450e:	680b      	ldr	r3, [r1, #0]
 8004510:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004514:	2b01      	cmp	r3, #1
 8004516:	d10c      	bne.n	8004532 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451a:	2b00      	cmp	r3, #0
 800451c:	d104      	bne.n	8004528 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800451e:	2100      	movs	r1, #0
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f961 	bl	80047e8 <USB_SetDevSpeed>
 8004526:	e008      	b.n	800453a <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004528:	2101      	movs	r1, #1
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f95c 	bl	80047e8 <USB_SetDevSpeed>
 8004530:	e003      	b.n	800453a <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004532:	2103      	movs	r1, #3
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f957 	bl	80047e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800453a:	2110      	movs	r1, #16
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f90b 	bl	8004758 <USB_FlushTxFifo>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d001      	beq.n	800454c <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f929 	bl	80047a4 <USB_FlushRxFifo>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004562:	461a      	mov	r2, r3
 8004564:	2300      	movs	r3, #0
 8004566:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800456e:	461a      	mov	r2, r3
 8004570:	2300      	movs	r3, #0
 8004572:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800457a:	461a      	mov	r2, r3
 800457c:	2300      	movs	r3, #0
 800457e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004580:	2300      	movs	r3, #0
 8004582:	613b      	str	r3, [r7, #16]
 8004584:	e043      	b.n	800460e <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	015a      	lsls	r2, r3, #5
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4413      	add	r3, r2
 800458e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004598:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800459c:	d118      	bne.n	80045d0 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10a      	bne.n	80045ba <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b0:	461a      	mov	r2, r3
 80045b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045b6:	6013      	str	r3, [r2, #0]
 80045b8:	e013      	b.n	80045e2 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	015a      	lsls	r2, r3, #5
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	4413      	add	r3, r2
 80045c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c6:	461a      	mov	r2, r3
 80045c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045cc:	6013      	str	r3, [r2, #0]
 80045ce:	e008      	b.n	80045e2 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	015a      	lsls	r2, r3, #5
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4413      	add	r3, r2
 80045d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045dc:	461a      	mov	r2, r3
 80045de:	2300      	movs	r3, #0
 80045e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	015a      	lsls	r2, r3, #5
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ee:	461a      	mov	r2, r3
 80045f0:	2300      	movs	r3, #0
 80045f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004600:	461a      	mov	r2, r3
 8004602:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004606:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	3301      	adds	r3, #1
 800460c:	613b      	str	r3, [r7, #16]
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	429a      	cmp	r2, r3
 8004614:	d3b7      	bcc.n	8004586 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004616:	2300      	movs	r3, #0
 8004618:	613b      	str	r3, [r7, #16]
 800461a:	e043      	b.n	80046a4 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800462e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004632:	d118      	bne.n	8004666 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10a      	bne.n	8004650 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4413      	add	r3, r2
 8004642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004646:	461a      	mov	r2, r3
 8004648:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800464c:	6013      	str	r3, [r2, #0]
 800464e:	e013      	b.n	8004678 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465c:	461a      	mov	r2, r3
 800465e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004662:	6013      	str	r3, [r2, #0]
 8004664:	e008      	b.n	8004678 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	015a      	lsls	r2, r3, #5
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	4413      	add	r3, r2
 800466e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004672:	461a      	mov	r2, r3
 8004674:	2300      	movs	r3, #0
 8004676:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004684:	461a      	mov	r2, r3
 8004686:	2300      	movs	r3, #0
 8004688:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	4413      	add	r3, r2
 8004692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004696:	461a      	mov	r2, r3
 8004698:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800469c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	3301      	adds	r3, #1
 80046a2:	613b      	str	r3, [r7, #16]
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d3b7      	bcc.n	800461c <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046be:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80046c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d111      	bne.n	80046ea <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046cc:	461a      	mov	r2, r3
 80046ce:	4b20      	ldr	r3, [pc, #128]	; (8004750 <USB_DevInit+0x2dc>)
 80046d0:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e4:	f043 0303 	orr.w	r3, r3, #3
 80046e8:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80046f6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80046f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d105      	bne.n	800470a <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	f043 0210 	orr.w	r2, r3, #16
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	699a      	ldr	r2, [r3, #24]
 800470e:	4b11      	ldr	r3, [pc, #68]	; (8004754 <USB_DevInit+0x2e0>)
 8004710:	4313      	orrs	r3, r2
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004718:	2b00      	cmp	r3, #0
 800471a:	d005      	beq.n	8004728 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	f043 0208 	orr.w	r2, r3, #8
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800472a:	2b01      	cmp	r3, #1
 800472c:	d107      	bne.n	800473e <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004736:	f043 0304 	orr.w	r3, r3, #4
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800473e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800474a:	b004      	add	sp, #16
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	00800100 	.word	0x00800100
 8004754:	803c3800 	.word	0x803c3800

08004758 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004762:	2300      	movs	r3, #0
 8004764:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	019b      	lsls	r3, r3, #6
 800476a:	f043 0220 	orr.w	r2, r3, #32
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	3301      	adds	r3, #1
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4a09      	ldr	r2, [pc, #36]	; (80047a0 <USB_FlushTxFifo+0x48>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d901      	bls.n	8004784 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e006      	b.n	8004792 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	f003 0320 	and.w	r3, r3, #32
 800478c:	2b20      	cmp	r3, #32
 800478e:	d0f0      	beq.n	8004772 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	00030d40 	.word	0x00030d40

080047a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80047ac:	2300      	movs	r3, #0
 80047ae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2210      	movs	r2, #16
 80047b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	3301      	adds	r3, #1
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4a09      	ldr	r2, [pc, #36]	; (80047e4 <USB_FlushRxFifo+0x40>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d901      	bls.n	80047c8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e006      	b.n	80047d6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	f003 0310 	and.w	r3, r3, #16
 80047d0:	2b10      	cmp	r3, #16
 80047d2:	d0f0      	beq.n	80047b6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	00030d40 	.word	0x00030d40

080047e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	78fb      	ldrb	r3, [r7, #3]
 8004802:	68f9      	ldr	r1, [r7, #12]
 8004804:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004808:	4313      	orrs	r3, r2
 800480a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800481a:	b480      	push	{r7}
 800481c:	b087      	sub	sp, #28
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 0306 	and.w	r3, r3, #6
 8004832:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d102      	bne.n	8004840 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800483a:	2300      	movs	r3, #0
 800483c:	75fb      	strb	r3, [r7, #23]
 800483e:	e00a      	b.n	8004856 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2b02      	cmp	r3, #2
 8004844:	d002      	beq.n	800484c <USB_GetDevSpeed+0x32>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2b06      	cmp	r3, #6
 800484a:	d102      	bne.n	8004852 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800484c:	2302      	movs	r3, #2
 800484e:	75fb      	strb	r3, [r7, #23]
 8004850:	e001      	b.n	8004856 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004852:	230f      	movs	r3, #15
 8004854:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004856:	7dfb      	ldrb	r3, [r7, #23]
}
 8004858:	4618      	mov	r0, r3
 800485a:	371c      	adds	r7, #28
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004864:	b480      	push	{r7}
 8004866:	b089      	sub	sp, #36	; 0x24
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	4611      	mov	r1, r2
 8004870:	461a      	mov	r2, r3
 8004872:	460b      	mov	r3, r1
 8004874:	71fb      	strb	r3, [r7, #7]
 8004876:	4613      	mov	r3, r2
 8004878:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004882:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004886:	2b00      	cmp	r3, #0
 8004888:	d11a      	bne.n	80048c0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800488a:	88bb      	ldrh	r3, [r7, #4]
 800488c:	3303      	adds	r3, #3
 800488e:	089b      	lsrs	r3, r3, #2
 8004890:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004892:	2300      	movs	r3, #0
 8004894:	61bb      	str	r3, [r7, #24]
 8004896:	e00f      	b.n	80048b8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004898:	79fb      	ldrb	r3, [r7, #7]
 800489a:	031a      	lsls	r2, r3, #12
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048a4:	461a      	mov	r2, r3
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	3304      	adds	r3, #4
 80048b0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	3301      	adds	r3, #1
 80048b6:	61bb      	str	r3, [r7, #24]
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d3eb      	bcc.n	8004898 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3724      	adds	r7, #36	; 0x24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b089      	sub	sp, #36	; 0x24
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	60f8      	str	r0, [r7, #12]
 80048d6:	60b9      	str	r1, [r7, #8]
 80048d8:	4613      	mov	r3, r2
 80048da:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80048e4:	88fb      	ldrh	r3, [r7, #6]
 80048e6:	3303      	adds	r3, #3
 80048e8:	089b      	lsrs	r3, r3, #2
 80048ea:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80048ec:	2300      	movs	r3, #0
 80048ee:	61bb      	str	r3, [r7, #24]
 80048f0:	e00b      	b.n	800490a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	601a      	str	r2, [r3, #0]
    pDest++;
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	3304      	adds	r3, #4
 8004902:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	3301      	adds	r3, #1
 8004908:	61bb      	str	r3, [r7, #24]
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	429a      	cmp	r2, r3
 8004910:	d3ef      	bcc.n	80048f2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004912:	69fb      	ldr	r3, [r7, #28]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3724      	adds	r7, #36	; 0x24
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800493a:	f043 0302 	orr.w	r3, r3, #2
 800493e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004940:	2003      	movs	r0, #3
 8004942:	f7fc fc2b 	bl	800119c <HAL_Delay>

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	4013      	ands	r3, r2
 8004966:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004968:	68fb      	ldr	r3, [r7, #12]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004976:	b480      	push	{r7}
 8004978:	b085      	sub	sp, #20
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	4013      	ands	r3, r2
 8004998:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	0c1b      	lsrs	r3, r3, #16
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b085      	sub	sp, #20
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	4013      	ands	r3, r2
 80049cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	b29b      	uxth	r3, r3
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80049de:	b480      	push	{r7}
 80049e0:	b085      	sub	sp, #20
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	460b      	mov	r3, r1
 80049e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80049ee:	78fb      	ldrb	r3, [r7, #3]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	4013      	ands	r3, r2
 8004a0a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a0c:	68bb      	ldr	r3, [r7, #8]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b087      	sub	sp, #28
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
 8004a22:	460b      	mov	r3, r1
 8004a24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a3c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004a3e:	78fb      	ldrb	r3, [r7, #3]
 8004a40:	f003 030f 	and.w	r3, r3, #15
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	fa22 f303 	lsr.w	r3, r2, r3
 8004a4a:	01db      	lsls	r3, r3, #7
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004a54:	78fb      	ldrb	r3, [r7, #3]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4013      	ands	r3, r2
 8004a66:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a68:	68bb      	ldr	r3, [r7, #8]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	371c      	adds	r7, #28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	f003 0301 	and.w	r3, r3, #1
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b085      	sub	sp, #20
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004ab0:	f023 0307 	bic.w	r3, r3, #7
 8004ab4:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f003 0306 	and.w	r3, r3, #6
 8004ac2:	2b04      	cmp	r3, #4
 8004ac4:	d109      	bne.n	8004ada <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ad4:	f043 0303 	orr.w	r3, r3, #3
 8004ad8:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	460b      	mov	r3, r1
 8004b06:	607a      	str	r2, [r7, #4]
 8004b08:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	333c      	adds	r3, #60	; 0x3c
 8004b12:	3304      	adds	r3, #4
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	4a26      	ldr	r2, [pc, #152]	; (8004bb4 <USB_EP0_OutStart+0xb8>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d90a      	bls.n	8004b36 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b30:	d101      	bne.n	8004b36 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	e037      	b.n	8004ba6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	2300      	movs	r3, #0
 8004b40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b64:	f043 0318 	orr.w	r3, r3, #24
 8004b68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b78:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004b7c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004b7e:	7afb      	ldrb	r3, [r7, #11]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d10f      	bne.n	8004ba4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b9e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004ba2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	371c      	adds	r7, #28
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	4f54300a 	.word	0x4f54300a

08004bb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	4a13      	ldr	r2, [pc, #76]	; (8004c1c <USB_CoreReset+0x64>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d901      	bls.n	8004bd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e01b      	b.n	8004c0e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	daf2      	bge.n	8004bc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	f043 0201 	orr.w	r2, r3, #1
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4a09      	ldr	r2, [pc, #36]	; (8004c1c <USB_CoreReset+0x64>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d901      	bls.n	8004c00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e006      	b.n	8004c0e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d0f0      	beq.n	8004bee <USB_CoreReset+0x36>

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	00030d40 	.word	0x00030d40

08004c20 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	4603      	mov	r3, r0
 8004c28:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004c2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c32:	2b84      	cmp	r3, #132	; 0x84
 8004c34:	d005      	beq.n	8004c42 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004c36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	3303      	adds	r3, #3
 8004c40:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004c42:	68fb      	ldr	r3, [r7, #12]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c56:	f3ef 8305 	mrs	r3, IPSR
 8004c5a:	607b      	str	r3, [r7, #4]
  return(result);
 8004c5c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	bf14      	ite	ne
 8004c62:	2301      	movne	r3, #1
 8004c64:	2300      	moveq	r3, #0
 8004c66:	b2db      	uxtb	r3, r3
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004c78:	f001 f8dc 	bl	8005e34 <vTaskStartScheduler>
  
  return osOK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004c82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c84:	b089      	sub	sp, #36	; 0x24
 8004c86:	af04      	add	r7, sp, #16
 8004c88:	6078      	str	r0, [r7, #4]
 8004c8a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d020      	beq.n	8004cd6 <osThreadCreate+0x54>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d01c      	beq.n	8004cd6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685c      	ldr	r4, [r3, #4]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681d      	ldr	r5, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691e      	ldr	r6, [r3, #16]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff ffb6 	bl	8004c20 <makeFreeRtosPriority>
 8004cb4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cbe:	9202      	str	r2, [sp, #8]
 8004cc0:	9301      	str	r3, [sp, #4]
 8004cc2:	9100      	str	r1, [sp, #0]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	4632      	mov	r2, r6
 8004cc8:	4629      	mov	r1, r5
 8004cca:	4620      	mov	r0, r4
 8004ccc:	f000 fef7 	bl	8005abe <xTaskCreateStatic>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	e01c      	b.n	8004d10 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685c      	ldr	r4, [r3, #4]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ce2:	b29e      	uxth	r6, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff ff98 	bl	8004c20 <makeFreeRtosPriority>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	f107 030c 	add.w	r3, r7, #12
 8004cf6:	9301      	str	r3, [sp, #4]
 8004cf8:	9200      	str	r2, [sp, #0]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	4632      	mov	r2, r6
 8004cfe:	4629      	mov	r1, r5
 8004d00:	4620      	mov	r0, r4
 8004d02:	f000 ff35 	bl	8005b70 <xTaskCreate>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d001      	beq.n	8004d10 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	e000      	b.n	8004d12 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004d10:	68fb      	ldr	r3, [r7, #12]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d1a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b084      	sub	sp, #16
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <osDelay+0x16>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	e000      	b.n	8004d32 <osDelay+0x18>
 8004d30:	2301      	movs	r3, #1
 8004d32:	4618      	mov	r0, r3
 8004d34:	f001 f84a 	bl	8005dcc <vTaskDelay>
  
  return osOK;
 8004d38:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004d42:	b590      	push	{r4, r7, lr}
 8004d44:	b085      	sub	sp, #20
 8004d46:	af02      	add	r7, sp, #8
 8004d48:	6078      	str	r0, [r7, #4]
 8004d4a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d012      	beq.n	8004d7a <osMessageCreate+0x38>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00e      	beq.n	8004d7a <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6818      	ldr	r0, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6859      	ldr	r1, [r3, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68dc      	ldr	r4, [r3, #12]
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	4623      	mov	r3, r4
 8004d72:	f000 f9df 	bl	8005134 <xQueueGenericCreateStatic>
 8004d76:	4603      	mov	r3, r0
 8004d78:	e008      	b.n	8004d8c <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	4619      	mov	r1, r3
 8004d86:	f000 fa47 	bl	8005218 <xQueueGenericCreate>
 8004d8a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd90      	pop	{r4, r7, pc}

08004d94 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004da0:	2300      	movs	r3, #0
 8004da2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <osMessagePut+0x1e>
    ticks = 1;
 8004dae:	2301      	movs	r3, #1
 8004db0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004db2:	f7ff ff4d 	bl	8004c50 <inHandlerMode>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d018      	beq.n	8004dee <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004dbc:	f107 0210 	add.w	r2, r7, #16
 8004dc0:	f107 0108 	add.w	r1, r7, #8
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f000 fb7c 	bl	80054c4 <xQueueGenericSendFromISR>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d001      	beq.n	8004dd6 <osMessagePut+0x42>
      return osErrorOS;
 8004dd2:	23ff      	movs	r3, #255	; 0xff
 8004dd4:	e018      	b.n	8004e08 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d014      	beq.n	8004e06 <osMessagePut+0x72>
 8004ddc:	4b0c      	ldr	r3, [pc, #48]	; (8004e10 <osMessagePut+0x7c>)
 8004dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	e00b      	b.n	8004e06 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004dee:	f107 0108 	add.w	r1, r7, #8
 8004df2:	2300      	movs	r3, #0
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f000 fa6a 	bl	80052d0 <xQueueGenericSend>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d001      	beq.n	8004e06 <osMessagePut+0x72>
      return osErrorOS;
 8004e02:	23ff      	movs	r3, #255	; 0xff
 8004e04:	e000      	b.n	8004e08 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3718      	adds	r7, #24
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	e000ed04 	.word	0xe000ed04

08004e14 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004e14:	b590      	push	{r4, r7, lr}
 8004e16:	b08b      	sub	sp, #44	; 0x2c
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004e24:	2300      	movs	r3, #0
 8004e26:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10a      	bne.n	8004e44 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004e2e:	2380      	movs	r3, #128	; 0x80
 8004e30:	617b      	str	r3, [r7, #20]
    return event;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	461c      	mov	r4, r3
 8004e36:	f107 0314 	add.w	r3, r7, #20
 8004e3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004e3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004e42:	e054      	b.n	8004eee <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004e44:	2300      	movs	r3, #0
 8004e46:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e52:	d103      	bne.n	8004e5c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004e54:	f04f 33ff 	mov.w	r3, #4294967295
 8004e58:	627b      	str	r3, [r7, #36]	; 0x24
 8004e5a:	e009      	b.n	8004e70 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d006      	beq.n	8004e70 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <osMessageGet+0x5c>
      ticks = 1;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004e70:	f7ff feee 	bl	8004c50 <inHandlerMode>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d01c      	beq.n	8004eb4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004e7a:	f107 0220 	add.w	r2, r7, #32
 8004e7e:	f107 0314 	add.w	r3, r7, #20
 8004e82:	3304      	adds	r3, #4
 8004e84:	4619      	mov	r1, r3
 8004e86:	68b8      	ldr	r0, [r7, #8]
 8004e88:	f000 fc8c 	bl	80057a4 <xQueueReceiveFromISR>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d102      	bne.n	8004e98 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8004e92:	2310      	movs	r3, #16
 8004e94:	617b      	str	r3, [r7, #20]
 8004e96:	e001      	b.n	8004e9c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d01d      	beq.n	8004ede <osMessageGet+0xca>
 8004ea2:	4b15      	ldr	r3, [pc, #84]	; (8004ef8 <osMessageGet+0xe4>)
 8004ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	e014      	b.n	8004ede <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004eb4:	f107 0314 	add.w	r3, r7, #20
 8004eb8:	3304      	adds	r3, #4
 8004eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	68b8      	ldr	r0, [r7, #8]
 8004ec0:	f000 fb94 	bl	80055ec <xQueueReceive>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d102      	bne.n	8004ed0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004eca:	2310      	movs	r3, #16
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	e006      	b.n	8004ede <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <osMessageGet+0xc6>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	e000      	b.n	8004edc <osMessageGet+0xc8>
 8004eda:	2340      	movs	r3, #64	; 0x40
 8004edc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	461c      	mov	r4, r3
 8004ee2:	f107 0314 	add.w	r3, r7, #20
 8004ee6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004eea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	372c      	adds	r7, #44	; 0x2c
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd90      	pop	{r4, r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	e000ed04 	.word	0xe000ed04

08004efc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f103 0208 	add.w	r2, r3, #8
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f04f 32ff 	mov.w	r2, #4294967295
 8004f14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f103 0208 	add.w	r2, r3, #8
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f103 0208 	add.w	r2, r3, #8
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f4a:	bf00      	nop
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f56:	b480      	push	{r7}
 8004f58:	b085      	sub	sp, #20
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
 8004f5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	1c5a      	adds	r2, r3, #1
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	601a      	str	r2, [r3, #0]
}
 8004f92:	bf00      	nop
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b085      	sub	sp, #20
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb4:	d103      	bne.n	8004fbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	e00c      	b.n	8004fd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	3308      	adds	r3, #8
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	e002      	b.n	8004fcc <vListInsert+0x2e>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d2f6      	bcs.n	8004fc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	601a      	str	r2, [r3, #0]
}
 8005004:	bf00      	nop
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	6892      	ldr	r2, [r2, #8]
 8005026:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6852      	ldr	r2, [r2, #4]
 8005030:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	429a      	cmp	r2, r3
 800503a:	d103      	bne.n	8005044 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	1e5a      	subs	r2, r3, #1
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
}
 8005058:	4618      	mov	r0, r3
 800505a:	3714      	adds	r7, #20
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d109      	bne.n	800508c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	60bb      	str	r3, [r7, #8]
 800508a:	e7fe      	b.n	800508a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800508c:	f001 fcfe 	bl	8006a8c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005098:	68f9      	ldr	r1, [r7, #12]
 800509a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800509c:	fb01 f303 	mul.w	r3, r1, r3
 80050a0:	441a      	add	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050bc:	3b01      	subs	r3, #1
 80050be:	68f9      	ldr	r1, [r7, #12]
 80050c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050c2:	fb01 f303 	mul.w	r3, r1, r3
 80050c6:	441a      	add	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	22ff      	movs	r2, #255	; 0xff
 80050d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	22ff      	movs	r2, #255	; 0xff
 80050d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d114      	bne.n	800510c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d01a      	beq.n	8005120 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	3310      	adds	r3, #16
 80050ee:	4618      	mov	r0, r3
 80050f0:	f001 f8e2 	bl	80062b8 <xTaskRemoveFromEventList>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d012      	beq.n	8005120 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80050fa:	4b0d      	ldr	r3, [pc, #52]	; (8005130 <xQueueGenericReset+0xcc>)
 80050fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	e009      	b.n	8005120 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	3310      	adds	r3, #16
 8005110:	4618      	mov	r0, r3
 8005112:	f7ff fef3 	bl	8004efc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	3324      	adds	r3, #36	; 0x24
 800511a:	4618      	mov	r0, r3
 800511c:	f7ff feee 	bl	8004efc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005120:	f001 fce2 	bl	8006ae8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005124:	2301      	movs	r3, #1
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	e000ed04 	.word	0xe000ed04

08005134 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005134:	b580      	push	{r7, lr}
 8005136:	b08e      	sub	sp, #56	; 0x38
 8005138:	af02      	add	r7, sp, #8
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
 8005140:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d109      	bne.n	800515c <xQueueGenericCreateStatic+0x28>
 8005148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514c:	f383 8811 	msr	BASEPRI, r3
 8005150:	f3bf 8f6f 	isb	sy
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	62bb      	str	r3, [r7, #40]	; 0x28
 800515a:	e7fe      	b.n	800515a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d109      	bne.n	8005176 <xQueueGenericCreateStatic+0x42>
 8005162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005166:	f383 8811 	msr	BASEPRI, r3
 800516a:	f3bf 8f6f 	isb	sy
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	627b      	str	r3, [r7, #36]	; 0x24
 8005174:	e7fe      	b.n	8005174 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d002      	beq.n	8005182 <xQueueGenericCreateStatic+0x4e>
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <xQueueGenericCreateStatic+0x52>
 8005182:	2301      	movs	r3, #1
 8005184:	e000      	b.n	8005188 <xQueueGenericCreateStatic+0x54>
 8005186:	2300      	movs	r3, #0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d109      	bne.n	80051a0 <xQueueGenericCreateStatic+0x6c>
 800518c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005190:	f383 8811 	msr	BASEPRI, r3
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	623b      	str	r3, [r7, #32]
 800519e:	e7fe      	b.n	800519e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d102      	bne.n	80051ac <xQueueGenericCreateStatic+0x78>
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <xQueueGenericCreateStatic+0x7c>
 80051ac:	2301      	movs	r3, #1
 80051ae:	e000      	b.n	80051b2 <xQueueGenericCreateStatic+0x7e>
 80051b0:	2300      	movs	r3, #0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d109      	bne.n	80051ca <xQueueGenericCreateStatic+0x96>
 80051b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ba:	f383 8811 	msr	BASEPRI, r3
 80051be:	f3bf 8f6f 	isb	sy
 80051c2:	f3bf 8f4f 	dsb	sy
 80051c6:	61fb      	str	r3, [r7, #28]
 80051c8:	e7fe      	b.n	80051c8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80051ca:	2348      	movs	r3, #72	; 0x48
 80051cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2b48      	cmp	r3, #72	; 0x48
 80051d2:	d009      	beq.n	80051e8 <xQueueGenericCreateStatic+0xb4>
 80051d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	61bb      	str	r3, [r7, #24]
 80051e6:	e7fe      	b.n	80051e6 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80051ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00d      	beq.n	800520e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80051f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80051fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80051fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	4613      	mov	r3, r2
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	68b9      	ldr	r1, [r7, #8]
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 f842 	bl	8005292 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800520e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005210:	4618      	mov	r0, r3
 8005212:	3730      	adds	r7, #48	; 0x30
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08a      	sub	sp, #40	; 0x28
 800521c:	af02      	add	r7, sp, #8
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	4613      	mov	r3, r2
 8005224:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d109      	bne.n	8005240 <xQueueGenericCreate+0x28>
 800522c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	613b      	str	r3, [r7, #16]
 800523e:	e7fe      	b.n	800523e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d102      	bne.n	800524c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005246:	2300      	movs	r3, #0
 8005248:	61fb      	str	r3, [r7, #28]
 800524a:	e004      	b.n	8005256 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	fb02 f303 	mul.w	r3, r2, r3
 8005254:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	3348      	adds	r3, #72	; 0x48
 800525a:	4618      	mov	r0, r3
 800525c:	f001 fd30 	bl	8006cc0 <pvPortMalloc>
 8005260:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00f      	beq.n	8005288 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	3348      	adds	r3, #72	; 0x48
 800526c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005276:	79fa      	ldrb	r2, [r7, #7]
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	4613      	mov	r3, r2
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	68b9      	ldr	r1, [r7, #8]
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 f805 	bl	8005292 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005288:	69bb      	ldr	r3, [r7, #24]
	}
 800528a:	4618      	mov	r0, r3
 800528c:	3720      	adds	r7, #32
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b084      	sub	sp, #16
 8005296:	af00      	add	r7, sp, #0
 8005298:	60f8      	str	r0, [r7, #12]
 800529a:	60b9      	str	r1, [r7, #8]
 800529c:	607a      	str	r2, [r7, #4]
 800529e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d103      	bne.n	80052ae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	e002      	b.n	80052b4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80052c0:	2101      	movs	r1, #1
 80052c2:	69b8      	ldr	r0, [r7, #24]
 80052c4:	f7ff fece 	bl	8005064 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80052c8:	bf00      	nop
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b08e      	sub	sp, #56	; 0x38
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
 80052dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80052de:	2300      	movs	r3, #0
 80052e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80052e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d109      	bne.n	8005300 <xQueueGenericSend+0x30>
 80052ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f0:	f383 8811 	msr	BASEPRI, r3
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80052fe:	e7fe      	b.n	80052fe <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d103      	bne.n	800530e <xQueueGenericSend+0x3e>
 8005306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <xQueueGenericSend+0x42>
 800530e:	2301      	movs	r3, #1
 8005310:	e000      	b.n	8005314 <xQueueGenericSend+0x44>
 8005312:	2300      	movs	r3, #0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d109      	bne.n	800532c <xQueueGenericSend+0x5c>
 8005318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531c:	f383 8811 	msr	BASEPRI, r3
 8005320:	f3bf 8f6f 	isb	sy
 8005324:	f3bf 8f4f 	dsb	sy
 8005328:	627b      	str	r3, [r7, #36]	; 0x24
 800532a:	e7fe      	b.n	800532a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	2b02      	cmp	r3, #2
 8005330:	d103      	bne.n	800533a <xQueueGenericSend+0x6a>
 8005332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005336:	2b01      	cmp	r3, #1
 8005338:	d101      	bne.n	800533e <xQueueGenericSend+0x6e>
 800533a:	2301      	movs	r3, #1
 800533c:	e000      	b.n	8005340 <xQueueGenericSend+0x70>
 800533e:	2300      	movs	r3, #0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d109      	bne.n	8005358 <xQueueGenericSend+0x88>
 8005344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005348:	f383 8811 	msr	BASEPRI, r3
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	f3bf 8f4f 	dsb	sy
 8005354:	623b      	str	r3, [r7, #32]
 8005356:	e7fe      	b.n	8005356 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005358:	f001 f96a 	bl	8006630 <xTaskGetSchedulerState>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d102      	bne.n	8005368 <xQueueGenericSend+0x98>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <xQueueGenericSend+0x9c>
 8005368:	2301      	movs	r3, #1
 800536a:	e000      	b.n	800536e <xQueueGenericSend+0x9e>
 800536c:	2300      	movs	r3, #0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d109      	bne.n	8005386 <xQueueGenericSend+0xb6>
 8005372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005376:	f383 8811 	msr	BASEPRI, r3
 800537a:	f3bf 8f6f 	isb	sy
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	61fb      	str	r3, [r7, #28]
 8005384:	e7fe      	b.n	8005384 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005386:	f001 fb81 	bl	8006a8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800538a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005392:	429a      	cmp	r2, r3
 8005394:	d302      	bcc.n	800539c <xQueueGenericSend+0xcc>
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b02      	cmp	r3, #2
 800539a:	d129      	bne.n	80053f0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	68b9      	ldr	r1, [r7, #8]
 80053a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053a2:	f000 fa7c 	bl	800589e <prvCopyDataToQueue>
 80053a6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d010      	beq.n	80053d2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b2:	3324      	adds	r3, #36	; 0x24
 80053b4:	4618      	mov	r0, r3
 80053b6:	f000 ff7f 	bl	80062b8 <xTaskRemoveFromEventList>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d013      	beq.n	80053e8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80053c0:	4b3f      	ldr	r3, [pc, #252]	; (80054c0 <xQueueGenericSend+0x1f0>)
 80053c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053c6:	601a      	str	r2, [r3, #0]
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	e00a      	b.n	80053e8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80053d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d007      	beq.n	80053e8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80053d8:	4b39      	ldr	r3, [pc, #228]	; (80054c0 <xQueueGenericSend+0x1f0>)
 80053da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053de:	601a      	str	r2, [r3, #0]
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80053e8:	f001 fb7e 	bl	8006ae8 <vPortExitCritical>
				return pdPASS;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e063      	b.n	80054b8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d103      	bne.n	80053fe <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053f6:	f001 fb77 	bl	8006ae8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80053fa:	2300      	movs	r3, #0
 80053fc:	e05c      	b.n	80054b8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005400:	2b00      	cmp	r3, #0
 8005402:	d106      	bne.n	8005412 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005404:	f107 0314 	add.w	r3, r7, #20
 8005408:	4618      	mov	r0, r3
 800540a:	f000 ffb7 	bl	800637c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800540e:	2301      	movs	r3, #1
 8005410:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005412:	f001 fb69 	bl	8006ae8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005416:	f000 fd6b 	bl	8005ef0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800541a:	f001 fb37 	bl	8006a8c <vPortEnterCritical>
 800541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005420:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005424:	b25b      	sxtb	r3, r3
 8005426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542a:	d103      	bne.n	8005434 <xQueueGenericSend+0x164>
 800542c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542e:	2200      	movs	r2, #0
 8005430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005436:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800543a:	b25b      	sxtb	r3, r3
 800543c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005440:	d103      	bne.n	800544a <xQueueGenericSend+0x17a>
 8005442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800544a:	f001 fb4d 	bl	8006ae8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800544e:	1d3a      	adds	r2, r7, #4
 8005450:	f107 0314 	add.w	r3, r7, #20
 8005454:	4611      	mov	r1, r2
 8005456:	4618      	mov	r0, r3
 8005458:	f000 ffa6 	bl	80063a8 <xTaskCheckForTimeOut>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d124      	bne.n	80054ac <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005462:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005464:	f000 fb13 	bl	8005a8e <prvIsQueueFull>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d018      	beq.n	80054a0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800546e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005470:	3310      	adds	r3, #16
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	4611      	mov	r1, r2
 8005476:	4618      	mov	r0, r3
 8005478:	f000 fefa 	bl	8006270 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800547c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800547e:	f000 fa9e 	bl	80059be <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005482:	f000 fd43 	bl	8005f0c <xTaskResumeAll>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	f47f af7c 	bne.w	8005386 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800548e:	4b0c      	ldr	r3, [pc, #48]	; (80054c0 <xQueueGenericSend+0x1f0>)
 8005490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	e772      	b.n	8005386 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80054a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054a2:	f000 fa8c 	bl	80059be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054a6:	f000 fd31 	bl	8005f0c <xTaskResumeAll>
 80054aa:	e76c      	b.n	8005386 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80054ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054ae:	f000 fa86 	bl	80059be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054b2:	f000 fd2b 	bl	8005f0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80054b6:	2300      	movs	r3, #0
		}
	}
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3738      	adds	r7, #56	; 0x38
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	e000ed04 	.word	0xe000ed04

080054c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b08e      	sub	sp, #56	; 0x38
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
 80054d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80054d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d109      	bne.n	80054f0 <xQueueGenericSendFromISR+0x2c>
 80054dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e0:	f383 8811 	msr	BASEPRI, r3
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	627b      	str	r3, [r7, #36]	; 0x24
 80054ee:	e7fe      	b.n	80054ee <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d103      	bne.n	80054fe <xQueueGenericSendFromISR+0x3a>
 80054f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <xQueueGenericSendFromISR+0x3e>
 80054fe:	2301      	movs	r3, #1
 8005500:	e000      	b.n	8005504 <xQueueGenericSendFromISR+0x40>
 8005502:	2300      	movs	r3, #0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d109      	bne.n	800551c <xQueueGenericSendFromISR+0x58>
 8005508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550c:	f383 8811 	msr	BASEPRI, r3
 8005510:	f3bf 8f6f 	isb	sy
 8005514:	f3bf 8f4f 	dsb	sy
 8005518:	623b      	str	r3, [r7, #32]
 800551a:	e7fe      	b.n	800551a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	2b02      	cmp	r3, #2
 8005520:	d103      	bne.n	800552a <xQueueGenericSendFromISR+0x66>
 8005522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005526:	2b01      	cmp	r3, #1
 8005528:	d101      	bne.n	800552e <xQueueGenericSendFromISR+0x6a>
 800552a:	2301      	movs	r3, #1
 800552c:	e000      	b.n	8005530 <xQueueGenericSendFromISR+0x6c>
 800552e:	2300      	movs	r3, #0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d109      	bne.n	8005548 <xQueueGenericSendFromISR+0x84>
 8005534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005538:	f383 8811 	msr	BASEPRI, r3
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	61fb      	str	r3, [r7, #28]
 8005546:	e7fe      	b.n	8005546 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005548:	f001 fb7c 	bl	8006c44 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800554c:	f3ef 8211 	mrs	r2, BASEPRI
 8005550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	61ba      	str	r2, [r7, #24]
 8005562:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005564:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005566:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005570:	429a      	cmp	r2, r3
 8005572:	d302      	bcc.n	800557a <xQueueGenericSendFromISR+0xb6>
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	2b02      	cmp	r3, #2
 8005578:	d12c      	bne.n	80055d4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800557a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005580:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	68b9      	ldr	r1, [r7, #8]
 8005588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800558a:	f000 f988 	bl	800589e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800558e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005596:	d112      	bne.n	80055be <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559c:	2b00      	cmp	r3, #0
 800559e:	d016      	beq.n	80055ce <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a2:	3324      	adds	r3, #36	; 0x24
 80055a4:	4618      	mov	r0, r3
 80055a6:	f000 fe87 	bl	80062b8 <xTaskRemoveFromEventList>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00e      	beq.n	80055ce <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00b      	beq.n	80055ce <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	e007      	b.n	80055ce <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80055be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80055c2:	3301      	adds	r3, #1
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	b25a      	sxtb	r2, r3
 80055c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80055ce:	2301      	movs	r3, #1
 80055d0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80055d2:	e001      	b.n	80055d8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80055d4:	2300      	movs	r3, #0
 80055d6:	637b      	str	r3, [r7, #52]	; 0x34
 80055d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055da:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80055e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3738      	adds	r7, #56	; 0x38
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b08c      	sub	sp, #48	; 0x30
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80055f8:	2300      	movs	r3, #0
 80055fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005602:	2b00      	cmp	r3, #0
 8005604:	d109      	bne.n	800561a <xQueueReceive+0x2e>
	__asm volatile
 8005606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	623b      	str	r3, [r7, #32]
 8005618:	e7fe      	b.n	8005618 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d103      	bne.n	8005628 <xQueueReceive+0x3c>
 8005620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <xQueueReceive+0x40>
 8005628:	2301      	movs	r3, #1
 800562a:	e000      	b.n	800562e <xQueueReceive+0x42>
 800562c:	2300      	movs	r3, #0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d109      	bne.n	8005646 <xQueueReceive+0x5a>
 8005632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	61fb      	str	r3, [r7, #28]
 8005644:	e7fe      	b.n	8005644 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005646:	f000 fff3 	bl	8006630 <xTaskGetSchedulerState>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d102      	bne.n	8005656 <xQueueReceive+0x6a>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <xQueueReceive+0x6e>
 8005656:	2301      	movs	r3, #1
 8005658:	e000      	b.n	800565c <xQueueReceive+0x70>
 800565a:	2300      	movs	r3, #0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d109      	bne.n	8005674 <xQueueReceive+0x88>
 8005660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	61bb      	str	r3, [r7, #24]
 8005672:	e7fe      	b.n	8005672 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005674:	f001 fa0a 	bl	8006a8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	2b00      	cmp	r3, #0
 8005682:	d01f      	beq.n	80056c4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005684:	68b9      	ldr	r1, [r7, #8]
 8005686:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005688:	f000 f973 	bl	8005972 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	1e5a      	subs	r2, r3, #1
 8005690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005692:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00f      	beq.n	80056bc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800569c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569e:	3310      	adds	r3, #16
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 fe09 	bl	80062b8 <xTaskRemoveFromEventList>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d007      	beq.n	80056bc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80056ac:	4b3c      	ldr	r3, [pc, #240]	; (80057a0 <xQueueReceive+0x1b4>)
 80056ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80056bc:	f001 fa14 	bl	8006ae8 <vPortExitCritical>
				return pdPASS;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e069      	b.n	8005798 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d103      	bne.n	80056d2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056ca:	f001 fa0d 	bl	8006ae8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80056ce:	2300      	movs	r3, #0
 80056d0:	e062      	b.n	8005798 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d106      	bne.n	80056e6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056d8:	f107 0310 	add.w	r3, r7, #16
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 fe4d 	bl	800637c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056e2:	2301      	movs	r3, #1
 80056e4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056e6:	f001 f9ff 	bl	8006ae8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056ea:	f000 fc01 	bl	8005ef0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056ee:	f001 f9cd 	bl	8006a8c <vPortEnterCritical>
 80056f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056f8:	b25b      	sxtb	r3, r3
 80056fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fe:	d103      	bne.n	8005708 <xQueueReceive+0x11c>
 8005700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800570e:	b25b      	sxtb	r3, r3
 8005710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005714:	d103      	bne.n	800571e <xQueueReceive+0x132>
 8005716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005718:	2200      	movs	r2, #0
 800571a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800571e:	f001 f9e3 	bl	8006ae8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005722:	1d3a      	adds	r2, r7, #4
 8005724:	f107 0310 	add.w	r3, r7, #16
 8005728:	4611      	mov	r1, r2
 800572a:	4618      	mov	r0, r3
 800572c:	f000 fe3c 	bl	80063a8 <xTaskCheckForTimeOut>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d123      	bne.n	800577e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005736:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005738:	f000 f993 	bl	8005a62 <prvIsQueueEmpty>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d017      	beq.n	8005772 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005744:	3324      	adds	r3, #36	; 0x24
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	4611      	mov	r1, r2
 800574a:	4618      	mov	r0, r3
 800574c:	f000 fd90 	bl	8006270 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005752:	f000 f934 	bl	80059be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005756:	f000 fbd9 	bl	8005f0c <xTaskResumeAll>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d189      	bne.n	8005674 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005760:	4b0f      	ldr	r3, [pc, #60]	; (80057a0 <xQueueReceive+0x1b4>)
 8005762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005766:	601a      	str	r2, [r3, #0]
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	f3bf 8f6f 	isb	sy
 8005770:	e780      	b.n	8005674 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005772:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005774:	f000 f923 	bl	80059be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005778:	f000 fbc8 	bl	8005f0c <xTaskResumeAll>
 800577c:	e77a      	b.n	8005674 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800577e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005780:	f000 f91d 	bl	80059be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005784:	f000 fbc2 	bl	8005f0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005788:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800578a:	f000 f96a 	bl	8005a62 <prvIsQueueEmpty>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	f43f af6f 	beq.w	8005674 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005796:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005798:	4618      	mov	r0, r3
 800579a:	3730      	adds	r7, #48	; 0x30
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	e000ed04 	.word	0xe000ed04

080057a4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b08e      	sub	sp, #56	; 0x38
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80057b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d109      	bne.n	80057ce <xQueueReceiveFromISR+0x2a>
 80057ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	623b      	str	r3, [r7, #32]
 80057cc:	e7fe      	b.n	80057cc <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d103      	bne.n	80057dc <xQueueReceiveFromISR+0x38>
 80057d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <xQueueReceiveFromISR+0x3c>
 80057dc:	2301      	movs	r3, #1
 80057de:	e000      	b.n	80057e2 <xQueueReceiveFromISR+0x3e>
 80057e0:	2300      	movs	r3, #0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d109      	bne.n	80057fa <xQueueReceiveFromISR+0x56>
 80057e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ea:	f383 8811 	msr	BASEPRI, r3
 80057ee:	f3bf 8f6f 	isb	sy
 80057f2:	f3bf 8f4f 	dsb	sy
 80057f6:	61fb      	str	r3, [r7, #28]
 80057f8:	e7fe      	b.n	80057f8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057fa:	f001 fa23 	bl	8006c44 <vPortValidateInterruptPriority>
	__asm volatile
 80057fe:	f3ef 8211 	mrs	r2, BASEPRI
 8005802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005806:	f383 8811 	msr	BASEPRI, r3
 800580a:	f3bf 8f6f 	isb	sy
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	61ba      	str	r2, [r7, #24]
 8005814:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005816:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005818:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800581a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005822:	2b00      	cmp	r3, #0
 8005824:	d02f      	beq.n	8005886 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005828:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800582c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005830:	68b9      	ldr	r1, [r7, #8]
 8005832:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005834:	f000 f89d 	bl	8005972 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583a:	1e5a      	subs	r2, r3, #1
 800583c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005840:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005848:	d112      	bne.n	8005870 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d016      	beq.n	8005880 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005854:	3310      	adds	r3, #16
 8005856:	4618      	mov	r0, r3
 8005858:	f000 fd2e 	bl	80062b8 <xTaskRemoveFromEventList>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00e      	beq.n	8005880 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00b      	beq.n	8005880 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	e007      	b.n	8005880 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005874:	3301      	adds	r3, #1
 8005876:	b2db      	uxtb	r3, r3
 8005878:	b25a      	sxtb	r2, r3
 800587a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005880:	2301      	movs	r3, #1
 8005882:	637b      	str	r3, [r7, #52]	; 0x34
 8005884:	e001      	b.n	800588a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8005886:	2300      	movs	r3, #0
 8005888:	637b      	str	r3, [r7, #52]	; 0x34
 800588a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005896:	4618      	mov	r0, r3
 8005898:	3738      	adds	r7, #56	; 0x38
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b086      	sub	sp, #24
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	60f8      	str	r0, [r7, #12]
 80058a6:	60b9      	str	r1, [r7, #8]
 80058a8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80058aa:	2300      	movs	r3, #0
 80058ac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10d      	bne.n	80058d8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d14d      	bne.n	8005960 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f000 fecf 	bl	800666c <xTaskPriorityDisinherit>
 80058ce:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	605a      	str	r2, [r3, #4]
 80058d6:	e043      	b.n	8005960 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d119      	bne.n	8005912 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6898      	ldr	r0, [r3, #8]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e6:	461a      	mov	r2, r3
 80058e8:	68b9      	ldr	r1, [r7, #8]
 80058ea:	f001 fbe3 	bl	80070b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	689a      	ldr	r2, [r3, #8]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	441a      	add	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	689a      	ldr	r2, [r3, #8]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	429a      	cmp	r2, r3
 8005906:	d32b      	bcc.n	8005960 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	609a      	str	r2, [r3, #8]
 8005910:	e026      	b.n	8005960 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	68d8      	ldr	r0, [r3, #12]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	461a      	mov	r2, r3
 800591c:	68b9      	ldr	r1, [r7, #8]
 800591e:	f001 fbc9 	bl	80070b4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592a:	425b      	negs	r3, r3
 800592c:	441a      	add	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	429a      	cmp	r2, r3
 800593c:	d207      	bcs.n	800594e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	685a      	ldr	r2, [r3, #4]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	425b      	negs	r3, r3
 8005948:	441a      	add	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b02      	cmp	r3, #2
 8005952:	d105      	bne.n	8005960 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d002      	beq.n	8005960 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	3b01      	subs	r3, #1
 800595e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005968:	697b      	ldr	r3, [r7, #20]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3718      	adds	r7, #24
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b082      	sub	sp, #8
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005980:	2b00      	cmp	r3, #0
 8005982:	d018      	beq.n	80059b6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68da      	ldr	r2, [r3, #12]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598c:	441a      	add	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68da      	ldr	r2, [r3, #12]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	429a      	cmp	r2, r3
 800599c:	d303      	bcc.n	80059a6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68d9      	ldr	r1, [r3, #12]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	461a      	mov	r2, r3
 80059b0:	6838      	ldr	r0, [r7, #0]
 80059b2:	f001 fb7f 	bl	80070b4 <memcpy>
	}
}
 80059b6:	bf00      	nop
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b084      	sub	sp, #16
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80059c6:	f001 f861 	bl	8006a8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059d0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80059d2:	e011      	b.n	80059f8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d012      	beq.n	8005a02 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	3324      	adds	r3, #36	; 0x24
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 fc69 	bl	80062b8 <xTaskRemoveFromEventList>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80059ec:	f000 fd3c 	bl	8006468 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80059f0:	7bfb      	ldrb	r3, [r7, #15]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80059f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	dce9      	bgt.n	80059d4 <prvUnlockQueue+0x16>
 8005a00:	e000      	b.n	8005a04 <prvUnlockQueue+0x46>
					break;
 8005a02:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	22ff      	movs	r2, #255	; 0xff
 8005a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005a0c:	f001 f86c 	bl	8006ae8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a10:	f001 f83c 	bl	8006a8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a1a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a1c:	e011      	b.n	8005a42 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d012      	beq.n	8005a4c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	3310      	adds	r3, #16
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 fc44 	bl	80062b8 <xTaskRemoveFromEventList>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005a36:	f000 fd17 	bl	8006468 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005a3a:	7bbb      	ldrb	r3, [r7, #14]
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	dce9      	bgt.n	8005a1e <prvUnlockQueue+0x60>
 8005a4a:	e000      	b.n	8005a4e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005a4c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	22ff      	movs	r2, #255	; 0xff
 8005a52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005a56:	f001 f847 	bl	8006ae8 <vPortExitCritical>
}
 8005a5a:	bf00      	nop
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b084      	sub	sp, #16
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a6a:	f001 f80f 	bl	8006a8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d102      	bne.n	8005a7c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005a76:	2301      	movs	r3, #1
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	e001      	b.n	8005a80 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a80:	f001 f832 	bl	8006ae8 <vPortExitCritical>

	return xReturn;
 8005a84:	68fb      	ldr	r3, [r7, #12]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b084      	sub	sp, #16
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a96:	f000 fff9 	bl	8006a8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d102      	bne.n	8005aac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	60fb      	str	r3, [r7, #12]
 8005aaa:	e001      	b.n	8005ab0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005aac:	2300      	movs	r3, #0
 8005aae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ab0:	f001 f81a 	bl	8006ae8 <vPortExitCritical>

	return xReturn;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b08e      	sub	sp, #56	; 0x38
 8005ac2:	af04      	add	r7, sp, #16
 8005ac4:	60f8      	str	r0, [r7, #12]
 8005ac6:	60b9      	str	r1, [r7, #8]
 8005ac8:	607a      	str	r2, [r7, #4]
 8005aca:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d109      	bne.n	8005ae6 <xTaskCreateStatic+0x28>
	__asm volatile
 8005ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad6:	f383 8811 	msr	BASEPRI, r3
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	623b      	str	r3, [r7, #32]
 8005ae4:	e7fe      	b.n	8005ae4 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d109      	bne.n	8005b00 <xTaskCreateStatic+0x42>
 8005aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af0:	f383 8811 	msr	BASEPRI, r3
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	f3bf 8f4f 	dsb	sy
 8005afc:	61fb      	str	r3, [r7, #28]
 8005afe:	e7fe      	b.n	8005afe <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b00:	2354      	movs	r3, #84	; 0x54
 8005b02:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	2b54      	cmp	r3, #84	; 0x54
 8005b08:	d009      	beq.n	8005b1e <xTaskCreateStatic+0x60>
 8005b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0e:	f383 8811 	msr	BASEPRI, r3
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	f3bf 8f4f 	dsb	sy
 8005b1a:	61bb      	str	r3, [r7, #24]
 8005b1c:	e7fe      	b.n	8005b1c <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d01e      	beq.n	8005b62 <xTaskCreateStatic+0xa4>
 8005b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d01b      	beq.n	8005b62 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b32:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	2202      	movs	r2, #2
 8005b38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	9303      	str	r3, [sp, #12]
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	9302      	str	r3, [sp, #8]
 8005b44:	f107 0314 	add.w	r3, r7, #20
 8005b48:	9301      	str	r3, [sp, #4]
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	68b9      	ldr	r1, [r7, #8]
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 f850 	bl	8005bfa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b5c:	f000 f8cc 	bl	8005cf8 <prvAddNewTaskToReadyList>
 8005b60:	e001      	b.n	8005b66 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005b62:	2300      	movs	r3, #0
 8005b64:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b66:	697b      	ldr	r3, [r7, #20]
	}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3728      	adds	r7, #40	; 0x28
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b08c      	sub	sp, #48	; 0x30
 8005b74:	af04      	add	r7, sp, #16
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	603b      	str	r3, [r7, #0]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b80:	88fb      	ldrh	r3, [r7, #6]
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4618      	mov	r0, r3
 8005b86:	f001 f89b 	bl	8006cc0 <pvPortMalloc>
 8005b8a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00e      	beq.n	8005bb0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005b92:	2054      	movs	r0, #84	; 0x54
 8005b94:	f001 f894 	bl	8006cc0 <pvPortMalloc>
 8005b98:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d003      	beq.n	8005ba8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	631a      	str	r2, [r3, #48]	; 0x30
 8005ba6:	e005      	b.n	8005bb4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ba8:	6978      	ldr	r0, [r7, #20]
 8005baa:	f001 f94b 	bl	8006e44 <vPortFree>
 8005bae:	e001      	b.n	8005bb4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d017      	beq.n	8005bea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005bc2:	88fa      	ldrh	r2, [r7, #6]
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	9303      	str	r3, [sp, #12]
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	9302      	str	r3, [sp, #8]
 8005bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bce:	9301      	str	r3, [sp, #4]
 8005bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	68b9      	ldr	r1, [r7, #8]
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 f80e 	bl	8005bfa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bde:	69f8      	ldr	r0, [r7, #28]
 8005be0:	f000 f88a 	bl	8005cf8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005be4:	2301      	movs	r3, #1
 8005be6:	61bb      	str	r3, [r7, #24]
 8005be8:	e002      	b.n	8005bf0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005bea:	f04f 33ff 	mov.w	r3, #4294967295
 8005bee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005bf0:	69bb      	ldr	r3, [r7, #24]
	}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3720      	adds	r7, #32
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b088      	sub	sp, #32
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	60f8      	str	r0, [r7, #12]
 8005c02:	60b9      	str	r1, [r7, #8]
 8005c04:	607a      	str	r2, [r7, #4]
 8005c06:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c12:	3b01      	subs	r3, #1
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	f023 0307 	bic.w	r3, r3, #7
 8005c20:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	f003 0307 	and.w	r3, r3, #7
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d009      	beq.n	8005c40 <prvInitialiseNewTask+0x46>
 8005c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c30:	f383 8811 	msr	BASEPRI, r3
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	617b      	str	r3, [r7, #20]
 8005c3e:	e7fe      	b.n	8005c3e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c40:	2300      	movs	r3, #0
 8005c42:	61fb      	str	r3, [r7, #28]
 8005c44:	e012      	b.n	8005c6c <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	7819      	ldrb	r1, [r3, #0]
 8005c4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	4413      	add	r3, r2
 8005c54:	3334      	adds	r3, #52	; 0x34
 8005c56:	460a      	mov	r2, r1
 8005c58:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	4413      	add	r3, r2
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d006      	beq.n	8005c74 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	61fb      	str	r3, [r7, #28]
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	2b0f      	cmp	r3, #15
 8005c70:	d9e9      	bls.n	8005c46 <prvInitialiseNewTask+0x4c>
 8005c72:	e000      	b.n	8005c76 <prvInitialiseNewTask+0x7c>
		{
			break;
 8005c74:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c80:	2b06      	cmp	r3, #6
 8005c82:	d901      	bls.n	8005c88 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c84:	2306      	movs	r3, #6
 8005c86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c92:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c96:	2200      	movs	r2, #0
 8005c98:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7ff f94c 	bl	8004f3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca6:	3318      	adds	r3, #24
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7ff f947 	bl	8004f3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cb2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb6:	f1c3 0207 	rsb	r2, r3, #7
 8005cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cc2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	68f9      	ldr	r1, [r7, #12]
 8005cd6:	69b8      	ldr	r0, [r7, #24]
 8005cd8:	f000 fdb2 	bl	8006840 <pxPortInitialiseStack>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d002      	beq.n	8005cee <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cee:	bf00      	nop
 8005cf0:	3720      	adds	r7, #32
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
	...

08005cf8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d00:	f000 fec4 	bl	8006a8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d04:	4b2a      	ldr	r3, [pc, #168]	; (8005db0 <prvAddNewTaskToReadyList+0xb8>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	4a29      	ldr	r2, [pc, #164]	; (8005db0 <prvAddNewTaskToReadyList+0xb8>)
 8005d0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d0e:	4b29      	ldr	r3, [pc, #164]	; (8005db4 <prvAddNewTaskToReadyList+0xbc>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d109      	bne.n	8005d2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d16:	4a27      	ldr	r2, [pc, #156]	; (8005db4 <prvAddNewTaskToReadyList+0xbc>)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d1c:	4b24      	ldr	r3, [pc, #144]	; (8005db0 <prvAddNewTaskToReadyList+0xb8>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d110      	bne.n	8005d46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d24:	f000 fbc4 	bl	80064b0 <prvInitialiseTaskLists>
 8005d28:	e00d      	b.n	8005d46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d2a:	4b23      	ldr	r3, [pc, #140]	; (8005db8 <prvAddNewTaskToReadyList+0xc0>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d109      	bne.n	8005d46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d32:	4b20      	ldr	r3, [pc, #128]	; (8005db4 <prvAddNewTaskToReadyList+0xbc>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d802      	bhi.n	8005d46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d40:	4a1c      	ldr	r2, [pc, #112]	; (8005db4 <prvAddNewTaskToReadyList+0xbc>)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d46:	4b1d      	ldr	r3, [pc, #116]	; (8005dbc <prvAddNewTaskToReadyList+0xc4>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	4a1b      	ldr	r2, [pc, #108]	; (8005dbc <prvAddNewTaskToReadyList+0xc4>)
 8005d4e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d54:	2201      	movs	r2, #1
 8005d56:	409a      	lsls	r2, r3
 8005d58:	4b19      	ldr	r3, [pc, #100]	; (8005dc0 <prvAddNewTaskToReadyList+0xc8>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	4a18      	ldr	r2, [pc, #96]	; (8005dc0 <prvAddNewTaskToReadyList+0xc8>)
 8005d60:	6013      	str	r3, [r2, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d66:	4613      	mov	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4413      	add	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4a15      	ldr	r2, [pc, #84]	; (8005dc4 <prvAddNewTaskToReadyList+0xcc>)
 8005d70:	441a      	add	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	3304      	adds	r3, #4
 8005d76:	4619      	mov	r1, r3
 8005d78:	4610      	mov	r0, r2
 8005d7a:	f7ff f8ec 	bl	8004f56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d7e:	f000 feb3 	bl	8006ae8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d82:	4b0d      	ldr	r3, [pc, #52]	; (8005db8 <prvAddNewTaskToReadyList+0xc0>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00e      	beq.n	8005da8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d8a:	4b0a      	ldr	r3, [pc, #40]	; (8005db4 <prvAddNewTaskToReadyList+0xbc>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d207      	bcs.n	8005da8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d98:	4b0b      	ldr	r3, [pc, #44]	; (8005dc8 <prvAddNewTaskToReadyList+0xd0>)
 8005d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005da8:	bf00      	nop
 8005daa:	3708      	adds	r7, #8
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	20000380 	.word	0x20000380
 8005db4:	20000280 	.word	0x20000280
 8005db8:	2000038c 	.word	0x2000038c
 8005dbc:	2000039c 	.word	0x2000039c
 8005dc0:	20000388 	.word	0x20000388
 8005dc4:	20000284 	.word	0x20000284
 8005dc8:	e000ed04 	.word	0xe000ed04

08005dcc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d016      	beq.n	8005e0c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005dde:	4b13      	ldr	r3, [pc, #76]	; (8005e2c <vTaskDelay+0x60>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d009      	beq.n	8005dfa <vTaskDelay+0x2e>
 8005de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dea:	f383 8811 	msr	BASEPRI, r3
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	60bb      	str	r3, [r7, #8]
 8005df8:	e7fe      	b.n	8005df8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005dfa:	f000 f879 	bl	8005ef0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005dfe:	2100      	movs	r1, #0
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 fcb7 	bl	8006774 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e06:	f000 f881 	bl	8005f0c <xTaskResumeAll>
 8005e0a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d107      	bne.n	8005e22 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005e12:	4b07      	ldr	r3, [pc, #28]	; (8005e30 <vTaskDelay+0x64>)
 8005e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e18:	601a      	str	r2, [r3, #0]
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e22:	bf00      	nop
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	200003a8 	.word	0x200003a8
 8005e30:	e000ed04 	.word	0xe000ed04

08005e34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b08a      	sub	sp, #40	; 0x28
 8005e38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e42:	463a      	mov	r2, r7
 8005e44:	1d39      	adds	r1, r7, #4
 8005e46:	f107 0308 	add.w	r3, r7, #8
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fa fb48 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e50:	6839      	ldr	r1, [r7, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	9202      	str	r2, [sp, #8]
 8005e58:	9301      	str	r3, [sp, #4]
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	9300      	str	r3, [sp, #0]
 8005e5e:	2300      	movs	r3, #0
 8005e60:	460a      	mov	r2, r1
 8005e62:	491d      	ldr	r1, [pc, #116]	; (8005ed8 <vTaskStartScheduler+0xa4>)
 8005e64:	481d      	ldr	r0, [pc, #116]	; (8005edc <vTaskStartScheduler+0xa8>)
 8005e66:	f7ff fe2a 	bl	8005abe <xTaskCreateStatic>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	4b1c      	ldr	r3, [pc, #112]	; (8005ee0 <vTaskStartScheduler+0xac>)
 8005e6e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e70:	4b1b      	ldr	r3, [pc, #108]	; (8005ee0 <vTaskStartScheduler+0xac>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d002      	beq.n	8005e7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	617b      	str	r3, [r7, #20]
 8005e7c:	e001      	b.n	8005e82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d115      	bne.n	8005eb4 <vTaskStartScheduler+0x80>
 8005e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8c:	f383 8811 	msr	BASEPRI, r3
 8005e90:	f3bf 8f6f 	isb	sy
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005e9a:	4b12      	ldr	r3, [pc, #72]	; (8005ee4 <vTaskStartScheduler+0xb0>)
 8005e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005ea0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ea2:	4b11      	ldr	r3, [pc, #68]	; (8005ee8 <vTaskStartScheduler+0xb4>)
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005ea8:	4b10      	ldr	r3, [pc, #64]	; (8005eec <vTaskStartScheduler+0xb8>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005eae:	f000 fd4f 	bl	8006950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005eb2:	e00d      	b.n	8005ed0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eba:	d109      	bne.n	8005ed0 <vTaskStartScheduler+0x9c>
 8005ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec0:	f383 8811 	msr	BASEPRI, r3
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	60fb      	str	r3, [r7, #12]
 8005ece:	e7fe      	b.n	8005ece <vTaskStartScheduler+0x9a>
}
 8005ed0:	bf00      	nop
 8005ed2:	3718      	adds	r7, #24
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	08007158 	.word	0x08007158
 8005edc:	08006481 	.word	0x08006481
 8005ee0:	200003a4 	.word	0x200003a4
 8005ee4:	200003a0 	.word	0x200003a0
 8005ee8:	2000038c 	.word	0x2000038c
 8005eec:	20000384 	.word	0x20000384

08005ef0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005ef4:	4b04      	ldr	r3, [pc, #16]	; (8005f08 <vTaskSuspendAll+0x18>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	4a03      	ldr	r2, [pc, #12]	; (8005f08 <vTaskSuspendAll+0x18>)
 8005efc:	6013      	str	r3, [r2, #0]
}
 8005efe:	bf00      	nop
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr
 8005f08:	200003a8 	.word	0x200003a8

08005f0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f12:	2300      	movs	r3, #0
 8005f14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f16:	2300      	movs	r3, #0
 8005f18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f1a:	4b41      	ldr	r3, [pc, #260]	; (8006020 <xTaskResumeAll+0x114>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d109      	bne.n	8005f36 <xTaskResumeAll+0x2a>
 8005f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f26:	f383 8811 	msr	BASEPRI, r3
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	603b      	str	r3, [r7, #0]
 8005f34:	e7fe      	b.n	8005f34 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f36:	f000 fda9 	bl	8006a8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f3a:	4b39      	ldr	r3, [pc, #228]	; (8006020 <xTaskResumeAll+0x114>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	4a37      	ldr	r2, [pc, #220]	; (8006020 <xTaskResumeAll+0x114>)
 8005f42:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f44:	4b36      	ldr	r3, [pc, #216]	; (8006020 <xTaskResumeAll+0x114>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d161      	bne.n	8006010 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f4c:	4b35      	ldr	r3, [pc, #212]	; (8006024 <xTaskResumeAll+0x118>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d05d      	beq.n	8006010 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f54:	e02e      	b.n	8005fb4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005f56:	4b34      	ldr	r3, [pc, #208]	; (8006028 <xTaskResumeAll+0x11c>)
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	3318      	adds	r3, #24
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7ff f854 	bl	8005010 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	3304      	adds	r3, #4
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7ff f84f 	bl	8005010 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f76:	2201      	movs	r2, #1
 8005f78:	409a      	lsls	r2, r3
 8005f7a:	4b2c      	ldr	r3, [pc, #176]	; (800602c <xTaskResumeAll+0x120>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	4a2a      	ldr	r2, [pc, #168]	; (800602c <xTaskResumeAll+0x120>)
 8005f82:	6013      	str	r3, [r2, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f88:	4613      	mov	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4a27      	ldr	r2, [pc, #156]	; (8006030 <xTaskResumeAll+0x124>)
 8005f92:	441a      	add	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	3304      	adds	r3, #4
 8005f98:	4619      	mov	r1, r3
 8005f9a:	4610      	mov	r0, r2
 8005f9c:	f7fe ffdb 	bl	8004f56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa4:	4b23      	ldr	r3, [pc, #140]	; (8006034 <xTaskResumeAll+0x128>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d302      	bcc.n	8005fb4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005fae:	4b22      	ldr	r3, [pc, #136]	; (8006038 <xTaskResumeAll+0x12c>)
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fb4:	4b1c      	ldr	r3, [pc, #112]	; (8006028 <xTaskResumeAll+0x11c>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1cc      	bne.n	8005f56 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005fc2:	f000 fb0f 	bl	80065e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005fc6:	4b1d      	ldr	r3, [pc, #116]	; (800603c <xTaskResumeAll+0x130>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d010      	beq.n	8005ff4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005fd2:	f000 f837 	bl	8006044 <xTaskIncrementTick>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d002      	beq.n	8005fe2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005fdc:	4b16      	ldr	r3, [pc, #88]	; (8006038 <xTaskResumeAll+0x12c>)
 8005fde:	2201      	movs	r2, #1
 8005fe0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1f1      	bne.n	8005fd2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005fee:	4b13      	ldr	r3, [pc, #76]	; (800603c <xTaskResumeAll+0x130>)
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005ff4:	4b10      	ldr	r3, [pc, #64]	; (8006038 <xTaskResumeAll+0x12c>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d009      	beq.n	8006010 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006000:	4b0f      	ldr	r3, [pc, #60]	; (8006040 <xTaskResumeAll+0x134>)
 8006002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006010:	f000 fd6a 	bl	8006ae8 <vPortExitCritical>

	return xAlreadyYielded;
 8006014:	68bb      	ldr	r3, [r7, #8]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	200003a8 	.word	0x200003a8
 8006024:	20000380 	.word	0x20000380
 8006028:	20000340 	.word	0x20000340
 800602c:	20000388 	.word	0x20000388
 8006030:	20000284 	.word	0x20000284
 8006034:	20000280 	.word	0x20000280
 8006038:	20000394 	.word	0x20000394
 800603c:	20000390 	.word	0x20000390
 8006040:	e000ed04 	.word	0xe000ed04

08006044 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800604a:	2300      	movs	r3, #0
 800604c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800604e:	4b50      	ldr	r3, [pc, #320]	; (8006190 <xTaskIncrementTick+0x14c>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	f040 808c 	bne.w	8006170 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006058:	4b4e      	ldr	r3, [pc, #312]	; (8006194 <xTaskIncrementTick+0x150>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3301      	adds	r3, #1
 800605e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006060:	4a4c      	ldr	r2, [pc, #304]	; (8006194 <xTaskIncrementTick+0x150>)
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d11f      	bne.n	80060ac <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800606c:	4b4a      	ldr	r3, [pc, #296]	; (8006198 <xTaskIncrementTick+0x154>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d009      	beq.n	800608a <xTaskIncrementTick+0x46>
 8006076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607a:	f383 8811 	msr	BASEPRI, r3
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f3bf 8f4f 	dsb	sy
 8006086:	603b      	str	r3, [r7, #0]
 8006088:	e7fe      	b.n	8006088 <xTaskIncrementTick+0x44>
 800608a:	4b43      	ldr	r3, [pc, #268]	; (8006198 <xTaskIncrementTick+0x154>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	60fb      	str	r3, [r7, #12]
 8006090:	4b42      	ldr	r3, [pc, #264]	; (800619c <xTaskIncrementTick+0x158>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a40      	ldr	r2, [pc, #256]	; (8006198 <xTaskIncrementTick+0x154>)
 8006096:	6013      	str	r3, [r2, #0]
 8006098:	4a40      	ldr	r2, [pc, #256]	; (800619c <xTaskIncrementTick+0x158>)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6013      	str	r3, [r2, #0]
 800609e:	4b40      	ldr	r3, [pc, #256]	; (80061a0 <xTaskIncrementTick+0x15c>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3301      	adds	r3, #1
 80060a4:	4a3e      	ldr	r2, [pc, #248]	; (80061a0 <xTaskIncrementTick+0x15c>)
 80060a6:	6013      	str	r3, [r2, #0]
 80060a8:	f000 fa9c 	bl	80065e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80060ac:	4b3d      	ldr	r3, [pc, #244]	; (80061a4 <xTaskIncrementTick+0x160>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d34d      	bcc.n	8006152 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060b6:	4b38      	ldr	r3, [pc, #224]	; (8006198 <xTaskIncrementTick+0x154>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <xTaskIncrementTick+0x80>
 80060c0:	2301      	movs	r3, #1
 80060c2:	e000      	b.n	80060c6 <xTaskIncrementTick+0x82>
 80060c4:	2300      	movs	r3, #0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d004      	beq.n	80060d4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060ca:	4b36      	ldr	r3, [pc, #216]	; (80061a4 <xTaskIncrementTick+0x160>)
 80060cc:	f04f 32ff 	mov.w	r2, #4294967295
 80060d0:	601a      	str	r2, [r3, #0]
					break;
 80060d2:	e03e      	b.n	8006152 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80060d4:	4b30      	ldr	r3, [pc, #192]	; (8006198 <xTaskIncrementTick+0x154>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d203      	bcs.n	80060f4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80060ec:	4a2d      	ldr	r2, [pc, #180]	; (80061a4 <xTaskIncrementTick+0x160>)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6013      	str	r3, [r2, #0]
						break;
 80060f2:	e02e      	b.n	8006152 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	3304      	adds	r3, #4
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7fe ff89 	bl	8005010 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006102:	2b00      	cmp	r3, #0
 8006104:	d004      	beq.n	8006110 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	3318      	adds	r3, #24
 800610a:	4618      	mov	r0, r3
 800610c:	f7fe ff80 	bl	8005010 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006114:	2201      	movs	r2, #1
 8006116:	409a      	lsls	r2, r3
 8006118:	4b23      	ldr	r3, [pc, #140]	; (80061a8 <xTaskIncrementTick+0x164>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4313      	orrs	r3, r2
 800611e:	4a22      	ldr	r2, [pc, #136]	; (80061a8 <xTaskIncrementTick+0x164>)
 8006120:	6013      	str	r3, [r2, #0]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006126:	4613      	mov	r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4413      	add	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4a1f      	ldr	r2, [pc, #124]	; (80061ac <xTaskIncrementTick+0x168>)
 8006130:	441a      	add	r2, r3
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	3304      	adds	r3, #4
 8006136:	4619      	mov	r1, r3
 8006138:	4610      	mov	r0, r2
 800613a:	f7fe ff0c 	bl	8004f56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006142:	4b1b      	ldr	r3, [pc, #108]	; (80061b0 <xTaskIncrementTick+0x16c>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006148:	429a      	cmp	r2, r3
 800614a:	d3b4      	bcc.n	80060b6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800614c:	2301      	movs	r3, #1
 800614e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006150:	e7b1      	b.n	80060b6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006152:	4b17      	ldr	r3, [pc, #92]	; (80061b0 <xTaskIncrementTick+0x16c>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006158:	4914      	ldr	r1, [pc, #80]	; (80061ac <xTaskIncrementTick+0x168>)
 800615a:	4613      	mov	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	440b      	add	r3, r1
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d907      	bls.n	800617a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800616a:	2301      	movs	r3, #1
 800616c:	617b      	str	r3, [r7, #20]
 800616e:	e004      	b.n	800617a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006170:	4b10      	ldr	r3, [pc, #64]	; (80061b4 <xTaskIncrementTick+0x170>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3301      	adds	r3, #1
 8006176:	4a0f      	ldr	r2, [pc, #60]	; (80061b4 <xTaskIncrementTick+0x170>)
 8006178:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800617a:	4b0f      	ldr	r3, [pc, #60]	; (80061b8 <xTaskIncrementTick+0x174>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006182:	2301      	movs	r3, #1
 8006184:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006186:	697b      	ldr	r3, [r7, #20]
}
 8006188:	4618      	mov	r0, r3
 800618a:	3718      	adds	r7, #24
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	200003a8 	.word	0x200003a8
 8006194:	20000384 	.word	0x20000384
 8006198:	20000338 	.word	0x20000338
 800619c:	2000033c 	.word	0x2000033c
 80061a0:	20000398 	.word	0x20000398
 80061a4:	200003a0 	.word	0x200003a0
 80061a8:	20000388 	.word	0x20000388
 80061ac:	20000284 	.word	0x20000284
 80061b0:	20000280 	.word	0x20000280
 80061b4:	20000390 	.word	0x20000390
 80061b8:	20000394 	.word	0x20000394

080061bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80061bc:	b480      	push	{r7}
 80061be:	b087      	sub	sp, #28
 80061c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80061c2:	4b26      	ldr	r3, [pc, #152]	; (800625c <vTaskSwitchContext+0xa0>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d003      	beq.n	80061d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80061ca:	4b25      	ldr	r3, [pc, #148]	; (8006260 <vTaskSwitchContext+0xa4>)
 80061cc:	2201      	movs	r2, #1
 80061ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80061d0:	e03e      	b.n	8006250 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80061d2:	4b23      	ldr	r3, [pc, #140]	; (8006260 <vTaskSwitchContext+0xa4>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80061d8:	4b22      	ldr	r3, [pc, #136]	; (8006264 <vTaskSwitchContext+0xa8>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	fab3 f383 	clz	r3, r3
 80061e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80061e6:	7afb      	ldrb	r3, [r7, #11]
 80061e8:	f1c3 031f 	rsb	r3, r3, #31
 80061ec:	617b      	str	r3, [r7, #20]
 80061ee:	491e      	ldr	r1, [pc, #120]	; (8006268 <vTaskSwitchContext+0xac>)
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	4613      	mov	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4413      	add	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	440b      	add	r3, r1
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d109      	bne.n	8006216 <vTaskSwitchContext+0x5a>
	__asm volatile
 8006202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006206:	f383 8811 	msr	BASEPRI, r3
 800620a:	f3bf 8f6f 	isb	sy
 800620e:	f3bf 8f4f 	dsb	sy
 8006212:	607b      	str	r3, [r7, #4]
 8006214:	e7fe      	b.n	8006214 <vTaskSwitchContext+0x58>
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4613      	mov	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4a11      	ldr	r2, [pc, #68]	; (8006268 <vTaskSwitchContext+0xac>)
 8006222:	4413      	add	r3, r2
 8006224:	613b      	str	r3, [r7, #16]
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	605a      	str	r2, [r3, #4]
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	3308      	adds	r3, #8
 8006238:	429a      	cmp	r2, r3
 800623a:	d104      	bne.n	8006246 <vTaskSwitchContext+0x8a>
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	685a      	ldr	r2, [r3, #4]
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	605a      	str	r2, [r3, #4]
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	4a07      	ldr	r2, [pc, #28]	; (800626c <vTaskSwitchContext+0xb0>)
 800624e:	6013      	str	r3, [r2, #0]
}
 8006250:	bf00      	nop
 8006252:	371c      	adds	r7, #28
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	200003a8 	.word	0x200003a8
 8006260:	20000394 	.word	0x20000394
 8006264:	20000388 	.word	0x20000388
 8006268:	20000284 	.word	0x20000284
 800626c:	20000280 	.word	0x20000280

08006270 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d109      	bne.n	8006294 <vTaskPlaceOnEventList+0x24>
 8006280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006284:	f383 8811 	msr	BASEPRI, r3
 8006288:	f3bf 8f6f 	isb	sy
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	60fb      	str	r3, [r7, #12]
 8006292:	e7fe      	b.n	8006292 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006294:	4b07      	ldr	r3, [pc, #28]	; (80062b4 <vTaskPlaceOnEventList+0x44>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	3318      	adds	r3, #24
 800629a:	4619      	mov	r1, r3
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f7fe fe7e 	bl	8004f9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80062a2:	2101      	movs	r1, #1
 80062a4:	6838      	ldr	r0, [r7, #0]
 80062a6:	f000 fa65 	bl	8006774 <prvAddCurrentTaskToDelayedList>
}
 80062aa:	bf00      	nop
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	20000280 	.word	0x20000280

080062b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d109      	bne.n	80062e2 <xTaskRemoveFromEventList+0x2a>
 80062ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	e7fe      	b.n	80062e0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	3318      	adds	r3, #24
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fe fe92 	bl	8005010 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062ec:	4b1d      	ldr	r3, [pc, #116]	; (8006364 <xTaskRemoveFromEventList+0xac>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d11c      	bne.n	800632e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	3304      	adds	r3, #4
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7fe fe89 	bl	8005010 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006302:	2201      	movs	r2, #1
 8006304:	409a      	lsls	r2, r3
 8006306:	4b18      	ldr	r3, [pc, #96]	; (8006368 <xTaskRemoveFromEventList+0xb0>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4313      	orrs	r3, r2
 800630c:	4a16      	ldr	r2, [pc, #88]	; (8006368 <xTaskRemoveFromEventList+0xb0>)
 800630e:	6013      	str	r3, [r2, #0]
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006314:	4613      	mov	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4413      	add	r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	4a13      	ldr	r2, [pc, #76]	; (800636c <xTaskRemoveFromEventList+0xb4>)
 800631e:	441a      	add	r2, r3
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	3304      	adds	r3, #4
 8006324:	4619      	mov	r1, r3
 8006326:	4610      	mov	r0, r2
 8006328:	f7fe fe15 	bl	8004f56 <vListInsertEnd>
 800632c:	e005      	b.n	800633a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	3318      	adds	r3, #24
 8006332:	4619      	mov	r1, r3
 8006334:	480e      	ldr	r0, [pc, #56]	; (8006370 <xTaskRemoveFromEventList+0xb8>)
 8006336:	f7fe fe0e 	bl	8004f56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800633e:	4b0d      	ldr	r3, [pc, #52]	; (8006374 <xTaskRemoveFromEventList+0xbc>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006344:	429a      	cmp	r2, r3
 8006346:	d905      	bls.n	8006354 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006348:	2301      	movs	r3, #1
 800634a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800634c:	4b0a      	ldr	r3, [pc, #40]	; (8006378 <xTaskRemoveFromEventList+0xc0>)
 800634e:	2201      	movs	r2, #1
 8006350:	601a      	str	r2, [r3, #0]
 8006352:	e001      	b.n	8006358 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8006354:	2300      	movs	r3, #0
 8006356:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006358:	697b      	ldr	r3, [r7, #20]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3718      	adds	r7, #24
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	200003a8 	.word	0x200003a8
 8006368:	20000388 	.word	0x20000388
 800636c:	20000284 	.word	0x20000284
 8006370:	20000340 	.word	0x20000340
 8006374:	20000280 	.word	0x20000280
 8006378:	20000394 	.word	0x20000394

0800637c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006384:	4b06      	ldr	r3, [pc, #24]	; (80063a0 <vTaskInternalSetTimeOutState+0x24>)
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800638c:	4b05      	ldr	r3, [pc, #20]	; (80063a4 <vTaskInternalSetTimeOutState+0x28>)
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	605a      	str	r2, [r3, #4]
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr
 80063a0:	20000398 	.word	0x20000398
 80063a4:	20000384 	.word	0x20000384

080063a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b088      	sub	sp, #32
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d109      	bne.n	80063cc <xTaskCheckForTimeOut+0x24>
 80063b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063bc:	f383 8811 	msr	BASEPRI, r3
 80063c0:	f3bf 8f6f 	isb	sy
 80063c4:	f3bf 8f4f 	dsb	sy
 80063c8:	613b      	str	r3, [r7, #16]
 80063ca:	e7fe      	b.n	80063ca <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d109      	bne.n	80063e6 <xTaskCheckForTimeOut+0x3e>
 80063d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d6:	f383 8811 	msr	BASEPRI, r3
 80063da:	f3bf 8f6f 	isb	sy
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	60fb      	str	r3, [r7, #12]
 80063e4:	e7fe      	b.n	80063e4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80063e6:	f000 fb51 	bl	8006a8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80063ea:	4b1d      	ldr	r3, [pc, #116]	; (8006460 <xTaskCheckForTimeOut+0xb8>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006402:	d102      	bne.n	800640a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006404:	2300      	movs	r3, #0
 8006406:	61fb      	str	r3, [r7, #28]
 8006408:	e023      	b.n	8006452 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	4b15      	ldr	r3, [pc, #84]	; (8006464 <xTaskCheckForTimeOut+0xbc>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	429a      	cmp	r2, r3
 8006414:	d007      	beq.n	8006426 <xTaskCheckForTimeOut+0x7e>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	429a      	cmp	r2, r3
 800641e:	d302      	bcc.n	8006426 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006420:	2301      	movs	r3, #1
 8006422:	61fb      	str	r3, [r7, #28]
 8006424:	e015      	b.n	8006452 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	429a      	cmp	r2, r3
 800642e:	d20b      	bcs.n	8006448 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	1ad2      	subs	r2, r2, r3
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f7ff ff9d 	bl	800637c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006442:	2300      	movs	r3, #0
 8006444:	61fb      	str	r3, [r7, #28]
 8006446:	e004      	b.n	8006452 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2200      	movs	r2, #0
 800644c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800644e:	2301      	movs	r3, #1
 8006450:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006452:	f000 fb49 	bl	8006ae8 <vPortExitCritical>

	return xReturn;
 8006456:	69fb      	ldr	r3, [r7, #28]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3720      	adds	r7, #32
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	20000384 	.word	0x20000384
 8006464:	20000398 	.word	0x20000398

08006468 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006468:	b480      	push	{r7}
 800646a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800646c:	4b03      	ldr	r3, [pc, #12]	; (800647c <vTaskMissedYield+0x14>)
 800646e:	2201      	movs	r2, #1
 8006470:	601a      	str	r2, [r3, #0]
}
 8006472:	bf00      	nop
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	20000394 	.word	0x20000394

08006480 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006488:	f000 f852 	bl	8006530 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800648c:	4b06      	ldr	r3, [pc, #24]	; (80064a8 <prvIdleTask+0x28>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d9f9      	bls.n	8006488 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006494:	4b05      	ldr	r3, [pc, #20]	; (80064ac <prvIdleTask+0x2c>)
 8006496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800649a:	601a      	str	r2, [r3, #0]
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80064a4:	e7f0      	b.n	8006488 <prvIdleTask+0x8>
 80064a6:	bf00      	nop
 80064a8:	20000284 	.word	0x20000284
 80064ac:	e000ed04 	.word	0xe000ed04

080064b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064b6:	2300      	movs	r3, #0
 80064b8:	607b      	str	r3, [r7, #4]
 80064ba:	e00c      	b.n	80064d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	4613      	mov	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4a12      	ldr	r2, [pc, #72]	; (8006510 <prvInitialiseTaskLists+0x60>)
 80064c8:	4413      	add	r3, r2
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fe fd16 	bl	8004efc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	3301      	adds	r3, #1
 80064d4:	607b      	str	r3, [r7, #4]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2b06      	cmp	r3, #6
 80064da:	d9ef      	bls.n	80064bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80064dc:	480d      	ldr	r0, [pc, #52]	; (8006514 <prvInitialiseTaskLists+0x64>)
 80064de:	f7fe fd0d 	bl	8004efc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80064e2:	480d      	ldr	r0, [pc, #52]	; (8006518 <prvInitialiseTaskLists+0x68>)
 80064e4:	f7fe fd0a 	bl	8004efc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80064e8:	480c      	ldr	r0, [pc, #48]	; (800651c <prvInitialiseTaskLists+0x6c>)
 80064ea:	f7fe fd07 	bl	8004efc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80064ee:	480c      	ldr	r0, [pc, #48]	; (8006520 <prvInitialiseTaskLists+0x70>)
 80064f0:	f7fe fd04 	bl	8004efc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80064f4:	480b      	ldr	r0, [pc, #44]	; (8006524 <prvInitialiseTaskLists+0x74>)
 80064f6:	f7fe fd01 	bl	8004efc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80064fa:	4b0b      	ldr	r3, [pc, #44]	; (8006528 <prvInitialiseTaskLists+0x78>)
 80064fc:	4a05      	ldr	r2, [pc, #20]	; (8006514 <prvInitialiseTaskLists+0x64>)
 80064fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006500:	4b0a      	ldr	r3, [pc, #40]	; (800652c <prvInitialiseTaskLists+0x7c>)
 8006502:	4a05      	ldr	r2, [pc, #20]	; (8006518 <prvInitialiseTaskLists+0x68>)
 8006504:	601a      	str	r2, [r3, #0]
}
 8006506:	bf00      	nop
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	20000284 	.word	0x20000284
 8006514:	20000310 	.word	0x20000310
 8006518:	20000324 	.word	0x20000324
 800651c:	20000340 	.word	0x20000340
 8006520:	20000354 	.word	0x20000354
 8006524:	2000036c 	.word	0x2000036c
 8006528:	20000338 	.word	0x20000338
 800652c:	2000033c 	.word	0x2000033c

08006530 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006536:	e019      	b.n	800656c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006538:	f000 faa8 	bl	8006a8c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800653c:	4b0f      	ldr	r3, [pc, #60]	; (800657c <prvCheckTasksWaitingTermination+0x4c>)
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	3304      	adds	r3, #4
 8006548:	4618      	mov	r0, r3
 800654a:	f7fe fd61 	bl	8005010 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800654e:	4b0c      	ldr	r3, [pc, #48]	; (8006580 <prvCheckTasksWaitingTermination+0x50>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	3b01      	subs	r3, #1
 8006554:	4a0a      	ldr	r2, [pc, #40]	; (8006580 <prvCheckTasksWaitingTermination+0x50>)
 8006556:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006558:	4b0a      	ldr	r3, [pc, #40]	; (8006584 <prvCheckTasksWaitingTermination+0x54>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	3b01      	subs	r3, #1
 800655e:	4a09      	ldr	r2, [pc, #36]	; (8006584 <prvCheckTasksWaitingTermination+0x54>)
 8006560:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006562:	f000 fac1 	bl	8006ae8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f80e 	bl	8006588 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800656c:	4b05      	ldr	r3, [pc, #20]	; (8006584 <prvCheckTasksWaitingTermination+0x54>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1e1      	bne.n	8006538 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006574:	bf00      	nop
 8006576:	3708      	adds	r7, #8
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	20000354 	.word	0x20000354
 8006580:	20000380 	.word	0x20000380
 8006584:	20000368 	.word	0x20000368

08006588 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006596:	2b00      	cmp	r3, #0
 8006598:	d108      	bne.n	80065ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 fc50 	bl	8006e44 <vPortFree>
				vPortFree( pxTCB );
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fc4d 	bl	8006e44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80065aa:	e017      	b.n	80065dc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d103      	bne.n	80065be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fc44 	bl	8006e44 <vPortFree>
	}
 80065bc:	e00e      	b.n	80065dc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d009      	beq.n	80065dc <prvDeleteTCB+0x54>
 80065c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	60fb      	str	r3, [r7, #12]
 80065da:	e7fe      	b.n	80065da <prvDeleteTCB+0x52>
	}
 80065dc:	bf00      	nop
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065ea:	4b0f      	ldr	r3, [pc, #60]	; (8006628 <prvResetNextTaskUnblockTime+0x44>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d101      	bne.n	80065f8 <prvResetNextTaskUnblockTime+0x14>
 80065f4:	2301      	movs	r3, #1
 80065f6:	e000      	b.n	80065fa <prvResetNextTaskUnblockTime+0x16>
 80065f8:	2300      	movs	r3, #0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d004      	beq.n	8006608 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80065fe:	4b0b      	ldr	r3, [pc, #44]	; (800662c <prvResetNextTaskUnblockTime+0x48>)
 8006600:	f04f 32ff 	mov.w	r2, #4294967295
 8006604:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006606:	e008      	b.n	800661a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006608:	4b07      	ldr	r3, [pc, #28]	; (8006628 <prvResetNextTaskUnblockTime+0x44>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	4a05      	ldr	r2, [pc, #20]	; (800662c <prvResetNextTaskUnblockTime+0x48>)
 8006618:	6013      	str	r3, [r2, #0]
}
 800661a:	bf00      	nop
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	20000338 	.word	0x20000338
 800662c:	200003a0 	.word	0x200003a0

08006630 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006636:	4b0b      	ldr	r3, [pc, #44]	; (8006664 <xTaskGetSchedulerState+0x34>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d102      	bne.n	8006644 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800663e:	2301      	movs	r3, #1
 8006640:	607b      	str	r3, [r7, #4]
 8006642:	e008      	b.n	8006656 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006644:	4b08      	ldr	r3, [pc, #32]	; (8006668 <xTaskGetSchedulerState+0x38>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d102      	bne.n	8006652 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800664c:	2302      	movs	r3, #2
 800664e:	607b      	str	r3, [r7, #4]
 8006650:	e001      	b.n	8006656 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006652:	2300      	movs	r3, #0
 8006654:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006656:	687b      	ldr	r3, [r7, #4]
	}
 8006658:	4618      	mov	r0, r3
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	2000038c 	.word	0x2000038c
 8006668:	200003a8 	.word	0x200003a8

0800666c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006678:	2300      	movs	r3, #0
 800667a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d06c      	beq.n	800675c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006682:	4b39      	ldr	r3, [pc, #228]	; (8006768 <xTaskPriorityDisinherit+0xfc>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	429a      	cmp	r2, r3
 800668a:	d009      	beq.n	80066a0 <xTaskPriorityDisinherit+0x34>
 800668c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006690:	f383 8811 	msr	BASEPRI, r3
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	60fb      	str	r3, [r7, #12]
 800669e:	e7fe      	b.n	800669e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d109      	bne.n	80066bc <xTaskPriorityDisinherit+0x50>
 80066a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ac:	f383 8811 	msr	BASEPRI, r3
 80066b0:	f3bf 8f6f 	isb	sy
 80066b4:	f3bf 8f4f 	dsb	sy
 80066b8:	60bb      	str	r3, [r7, #8]
 80066ba:	e7fe      	b.n	80066ba <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066c0:	1e5a      	subs	r2, r3, #1
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d044      	beq.n	800675c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d140      	bne.n	800675c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	3304      	adds	r3, #4
 80066de:	4618      	mov	r0, r3
 80066e0:	f7fe fc96 	bl	8005010 <uxListRemove>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d115      	bne.n	8006716 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ee:	491f      	ldr	r1, [pc, #124]	; (800676c <xTaskPriorityDisinherit+0x100>)
 80066f0:	4613      	mov	r3, r2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4413      	add	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	440b      	add	r3, r1
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10a      	bne.n	8006716 <xTaskPriorityDisinherit+0xaa>
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006704:	2201      	movs	r2, #1
 8006706:	fa02 f303 	lsl.w	r3, r2, r3
 800670a:	43da      	mvns	r2, r3
 800670c:	4b18      	ldr	r3, [pc, #96]	; (8006770 <xTaskPriorityDisinherit+0x104>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4013      	ands	r3, r2
 8006712:	4a17      	ldr	r2, [pc, #92]	; (8006770 <xTaskPriorityDisinherit+0x104>)
 8006714:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006722:	f1c3 0207 	rsb	r2, r3, #7
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672e:	2201      	movs	r2, #1
 8006730:	409a      	lsls	r2, r3
 8006732:	4b0f      	ldr	r3, [pc, #60]	; (8006770 <xTaskPriorityDisinherit+0x104>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4313      	orrs	r3, r2
 8006738:	4a0d      	ldr	r2, [pc, #52]	; (8006770 <xTaskPriorityDisinherit+0x104>)
 800673a:	6013      	str	r3, [r2, #0]
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006740:	4613      	mov	r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4413      	add	r3, r2
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	4a08      	ldr	r2, [pc, #32]	; (800676c <xTaskPriorityDisinherit+0x100>)
 800674a:	441a      	add	r2, r3
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	3304      	adds	r3, #4
 8006750:	4619      	mov	r1, r3
 8006752:	4610      	mov	r0, r2
 8006754:	f7fe fbff 	bl	8004f56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006758:	2301      	movs	r3, #1
 800675a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800675c:	697b      	ldr	r3, [r7, #20]
	}
 800675e:	4618      	mov	r0, r3
 8006760:	3718      	adds	r7, #24
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	20000280 	.word	0x20000280
 800676c:	20000284 	.word	0x20000284
 8006770:	20000388 	.word	0x20000388

08006774 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800677e:	4b29      	ldr	r3, [pc, #164]	; (8006824 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006784:	4b28      	ldr	r3, [pc, #160]	; (8006828 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	3304      	adds	r3, #4
 800678a:	4618      	mov	r0, r3
 800678c:	f7fe fc40 	bl	8005010 <uxListRemove>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d10b      	bne.n	80067ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006796:	4b24      	ldr	r3, [pc, #144]	; (8006828 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679c:	2201      	movs	r2, #1
 800679e:	fa02 f303 	lsl.w	r3, r2, r3
 80067a2:	43da      	mvns	r2, r3
 80067a4:	4b21      	ldr	r3, [pc, #132]	; (800682c <prvAddCurrentTaskToDelayedList+0xb8>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4013      	ands	r3, r2
 80067aa:	4a20      	ldr	r2, [pc, #128]	; (800682c <prvAddCurrentTaskToDelayedList+0xb8>)
 80067ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b4:	d10a      	bne.n	80067cc <prvAddCurrentTaskToDelayedList+0x58>
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d007      	beq.n	80067cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067bc:	4b1a      	ldr	r3, [pc, #104]	; (8006828 <prvAddCurrentTaskToDelayedList+0xb4>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	3304      	adds	r3, #4
 80067c2:	4619      	mov	r1, r3
 80067c4:	481a      	ldr	r0, [pc, #104]	; (8006830 <prvAddCurrentTaskToDelayedList+0xbc>)
 80067c6:	f7fe fbc6 	bl	8004f56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80067ca:	e026      	b.n	800681a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4413      	add	r3, r2
 80067d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80067d4:	4b14      	ldr	r3, [pc, #80]	; (8006828 <prvAddCurrentTaskToDelayedList+0xb4>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d209      	bcs.n	80067f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067e4:	4b13      	ldr	r3, [pc, #76]	; (8006834 <prvAddCurrentTaskToDelayedList+0xc0>)
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	4b0f      	ldr	r3, [pc, #60]	; (8006828 <prvAddCurrentTaskToDelayedList+0xb4>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	3304      	adds	r3, #4
 80067ee:	4619      	mov	r1, r3
 80067f0:	4610      	mov	r0, r2
 80067f2:	f7fe fbd4 	bl	8004f9e <vListInsert>
}
 80067f6:	e010      	b.n	800681a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067f8:	4b0f      	ldr	r3, [pc, #60]	; (8006838 <prvAddCurrentTaskToDelayedList+0xc4>)
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	4b0a      	ldr	r3, [pc, #40]	; (8006828 <prvAddCurrentTaskToDelayedList+0xb4>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	3304      	adds	r3, #4
 8006802:	4619      	mov	r1, r3
 8006804:	4610      	mov	r0, r2
 8006806:	f7fe fbca 	bl	8004f9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800680a:	4b0c      	ldr	r3, [pc, #48]	; (800683c <prvAddCurrentTaskToDelayedList+0xc8>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	429a      	cmp	r2, r3
 8006812:	d202      	bcs.n	800681a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006814:	4a09      	ldr	r2, [pc, #36]	; (800683c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	6013      	str	r3, [r2, #0]
}
 800681a:	bf00      	nop
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	20000384 	.word	0x20000384
 8006828:	20000280 	.word	0x20000280
 800682c:	20000388 	.word	0x20000388
 8006830:	2000036c 	.word	0x2000036c
 8006834:	2000033c 	.word	0x2000033c
 8006838:	20000338 	.word	0x20000338
 800683c:	200003a0 	.word	0x200003a0

08006840 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	3b04      	subs	r3, #4
 8006850:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006858:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	3b04      	subs	r3, #4
 800685e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	f023 0201 	bic.w	r2, r3, #1
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3b04      	subs	r3, #4
 800686e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006870:	4a0c      	ldr	r2, [pc, #48]	; (80068a4 <pxPortInitialiseStack+0x64>)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	3b14      	subs	r3, #20
 800687a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	3b04      	subs	r3, #4
 8006886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f06f 0202 	mvn.w	r2, #2
 800688e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	3b20      	subs	r3, #32
 8006894:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006896:	68fb      	ldr	r3, [r7, #12]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3714      	adds	r7, #20
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr
 80068a4:	080068a9 	.word	0x080068a9

080068a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80068ae:	2300      	movs	r3, #0
 80068b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80068b2:	4b11      	ldr	r3, [pc, #68]	; (80068f8 <prvTaskExitError+0x50>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ba:	d009      	beq.n	80068d0 <prvTaskExitError+0x28>
 80068bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c0:	f383 8811 	msr	BASEPRI, r3
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	60fb      	str	r3, [r7, #12]
 80068ce:	e7fe      	b.n	80068ce <prvTaskExitError+0x26>
 80068d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d4:	f383 8811 	msr	BASEPRI, r3
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80068e2:	bf00      	nop
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d0fc      	beq.n	80068e4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80068ea:	bf00      	nop
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	2000000c 	.word	0x2000000c
 80068fc:	00000000 	.word	0x00000000

08006900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006900:	4b07      	ldr	r3, [pc, #28]	; (8006920 <pxCurrentTCBConst2>)
 8006902:	6819      	ldr	r1, [r3, #0]
 8006904:	6808      	ldr	r0, [r1, #0]
 8006906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800690a:	f380 8809 	msr	PSP, r0
 800690e:	f3bf 8f6f 	isb	sy
 8006912:	f04f 0000 	mov.w	r0, #0
 8006916:	f380 8811 	msr	BASEPRI, r0
 800691a:	4770      	bx	lr
 800691c:	f3af 8000 	nop.w

08006920 <pxCurrentTCBConst2>:
 8006920:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006924:	bf00      	nop
 8006926:	bf00      	nop

08006928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006928:	4808      	ldr	r0, [pc, #32]	; (800694c <prvPortStartFirstTask+0x24>)
 800692a:	6800      	ldr	r0, [r0, #0]
 800692c:	6800      	ldr	r0, [r0, #0]
 800692e:	f380 8808 	msr	MSP, r0
 8006932:	f04f 0000 	mov.w	r0, #0
 8006936:	f380 8814 	msr	CONTROL, r0
 800693a:	b662      	cpsie	i
 800693c:	b661      	cpsie	f
 800693e:	f3bf 8f4f 	dsb	sy
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	df00      	svc	0
 8006948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800694a:	bf00      	nop
 800694c:	e000ed08 	.word	0xe000ed08

08006950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006956:	4b44      	ldr	r3, [pc, #272]	; (8006a68 <xPortStartScheduler+0x118>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a44      	ldr	r2, [pc, #272]	; (8006a6c <xPortStartScheduler+0x11c>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d109      	bne.n	8006974 <xPortStartScheduler+0x24>
 8006960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006964:	f383 8811 	msr	BASEPRI, r3
 8006968:	f3bf 8f6f 	isb	sy
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	613b      	str	r3, [r7, #16]
 8006972:	e7fe      	b.n	8006972 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006974:	4b3c      	ldr	r3, [pc, #240]	; (8006a68 <xPortStartScheduler+0x118>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a3d      	ldr	r2, [pc, #244]	; (8006a70 <xPortStartScheduler+0x120>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d109      	bne.n	8006992 <xPortStartScheduler+0x42>
 800697e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006982:	f383 8811 	msr	BASEPRI, r3
 8006986:	f3bf 8f6f 	isb	sy
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	60fb      	str	r3, [r7, #12]
 8006990:	e7fe      	b.n	8006990 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006992:	4b38      	ldr	r3, [pc, #224]	; (8006a74 <xPortStartScheduler+0x124>)
 8006994:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	b2db      	uxtb	r3, r3
 800699c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	22ff      	movs	r2, #255	; 0xff
 80069a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80069ac:	78fb      	ldrb	r3, [r7, #3]
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	4b30      	ldr	r3, [pc, #192]	; (8006a78 <xPortStartScheduler+0x128>)
 80069b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80069ba:	4b30      	ldr	r3, [pc, #192]	; (8006a7c <xPortStartScheduler+0x12c>)
 80069bc:	2207      	movs	r2, #7
 80069be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069c0:	e009      	b.n	80069d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80069c2:	4b2e      	ldr	r3, [pc, #184]	; (8006a7c <xPortStartScheduler+0x12c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	4a2c      	ldr	r2, [pc, #176]	; (8006a7c <xPortStartScheduler+0x12c>)
 80069ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80069cc:	78fb      	ldrb	r3, [r7, #3]
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	005b      	lsls	r3, r3, #1
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069d6:	78fb      	ldrb	r3, [r7, #3]
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069de:	2b80      	cmp	r3, #128	; 0x80
 80069e0:	d0ef      	beq.n	80069c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80069e2:	4b26      	ldr	r3, [pc, #152]	; (8006a7c <xPortStartScheduler+0x12c>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f1c3 0307 	rsb	r3, r3, #7
 80069ea:	2b04      	cmp	r3, #4
 80069ec:	d009      	beq.n	8006a02 <xPortStartScheduler+0xb2>
 80069ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	60bb      	str	r3, [r7, #8]
 8006a00:	e7fe      	b.n	8006a00 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a02:	4b1e      	ldr	r3, [pc, #120]	; (8006a7c <xPortStartScheduler+0x12c>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	021b      	lsls	r3, r3, #8
 8006a08:	4a1c      	ldr	r2, [pc, #112]	; (8006a7c <xPortStartScheduler+0x12c>)
 8006a0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a0c:	4b1b      	ldr	r3, [pc, #108]	; (8006a7c <xPortStartScheduler+0x12c>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a14:	4a19      	ldr	r2, [pc, #100]	; (8006a7c <xPortStartScheduler+0x12c>)
 8006a16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a20:	4b17      	ldr	r3, [pc, #92]	; (8006a80 <xPortStartScheduler+0x130>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a16      	ldr	r2, [pc, #88]	; (8006a80 <xPortStartScheduler+0x130>)
 8006a26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a2c:	4b14      	ldr	r3, [pc, #80]	; (8006a80 <xPortStartScheduler+0x130>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a13      	ldr	r2, [pc, #76]	; (8006a80 <xPortStartScheduler+0x130>)
 8006a32:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006a36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a38:	f000 f8d6 	bl	8006be8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a3c:	4b11      	ldr	r3, [pc, #68]	; (8006a84 <xPortStartScheduler+0x134>)
 8006a3e:	2200      	movs	r2, #0
 8006a40:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006a42:	f000 f8f5 	bl	8006c30 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a46:	4b10      	ldr	r3, [pc, #64]	; (8006a88 <xPortStartScheduler+0x138>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a0f      	ldr	r2, [pc, #60]	; (8006a88 <xPortStartScheduler+0x138>)
 8006a4c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006a50:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a52:	f7ff ff69 	bl	8006928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a56:	f7ff fbb1 	bl	80061bc <vTaskSwitchContext>
	prvTaskExitError();
 8006a5a:	f7ff ff25 	bl	80068a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3718      	adds	r7, #24
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	e000ed00 	.word	0xe000ed00
 8006a6c:	410fc271 	.word	0x410fc271
 8006a70:	410fc270 	.word	0x410fc270
 8006a74:	e000e400 	.word	0xe000e400
 8006a78:	200003ac 	.word	0x200003ac
 8006a7c:	200003b0 	.word	0x200003b0
 8006a80:	e000ed20 	.word	0xe000ed20
 8006a84:	2000000c 	.word	0x2000000c
 8006a88:	e000ef34 	.word	0xe000ef34

08006a8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a96:	f383 8811 	msr	BASEPRI, r3
 8006a9a:	f3bf 8f6f 	isb	sy
 8006a9e:	f3bf 8f4f 	dsb	sy
 8006aa2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006aa4:	4b0e      	ldr	r3, [pc, #56]	; (8006ae0 <vPortEnterCritical+0x54>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	4a0d      	ldr	r2, [pc, #52]	; (8006ae0 <vPortEnterCritical+0x54>)
 8006aac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006aae:	4b0c      	ldr	r3, [pc, #48]	; (8006ae0 <vPortEnterCritical+0x54>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d10e      	bne.n	8006ad4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ab6:	4b0b      	ldr	r3, [pc, #44]	; (8006ae4 <vPortEnterCritical+0x58>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d009      	beq.n	8006ad4 <vPortEnterCritical+0x48>
 8006ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac4:	f383 8811 	msr	BASEPRI, r3
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	603b      	str	r3, [r7, #0]
 8006ad2:	e7fe      	b.n	8006ad2 <vPortEnterCritical+0x46>
	}
}
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	2000000c 	.word	0x2000000c
 8006ae4:	e000ed04 	.word	0xe000ed04

08006ae8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006aee:	4b11      	ldr	r3, [pc, #68]	; (8006b34 <vPortExitCritical+0x4c>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d109      	bne.n	8006b0a <vPortExitCritical+0x22>
 8006af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	607b      	str	r3, [r7, #4]
 8006b08:	e7fe      	b.n	8006b08 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006b0a:	4b0a      	ldr	r3, [pc, #40]	; (8006b34 <vPortExitCritical+0x4c>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	4a08      	ldr	r2, [pc, #32]	; (8006b34 <vPortExitCritical+0x4c>)
 8006b12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b14:	4b07      	ldr	r3, [pc, #28]	; (8006b34 <vPortExitCritical+0x4c>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d104      	bne.n	8006b26 <vPortExitCritical+0x3e>
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b26:	bf00      	nop
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	2000000c 	.word	0x2000000c
	...

08006b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b40:	f3ef 8009 	mrs	r0, PSP
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	4b15      	ldr	r3, [pc, #84]	; (8006ba0 <pxCurrentTCBConst>)
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	f01e 0f10 	tst.w	lr, #16
 8006b50:	bf08      	it	eq
 8006b52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b5a:	6010      	str	r0, [r2, #0]
 8006b5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b64:	f380 8811 	msr	BASEPRI, r0
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f7ff fb24 	bl	80061bc <vTaskSwitchContext>
 8006b74:	f04f 0000 	mov.w	r0, #0
 8006b78:	f380 8811 	msr	BASEPRI, r0
 8006b7c:	bc09      	pop	{r0, r3}
 8006b7e:	6819      	ldr	r1, [r3, #0]
 8006b80:	6808      	ldr	r0, [r1, #0]
 8006b82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b86:	f01e 0f10 	tst.w	lr, #16
 8006b8a:	bf08      	it	eq
 8006b8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b90:	f380 8809 	msr	PSP, r0
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	f3af 8000 	nop.w

08006ba0 <pxCurrentTCBConst>:
 8006ba0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ba4:	bf00      	nop
 8006ba6:	bf00      	nop

08006ba8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
	__asm volatile
 8006bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006bc0:	f7ff fa40 	bl	8006044 <xTaskIncrementTick>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d003      	beq.n	8006bd2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006bca:	4b06      	ldr	r3, [pc, #24]	; (8006be4 <SysTick_Handler+0x3c>)
 8006bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006bdc:	bf00      	nop
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	e000ed04 	.word	0xe000ed04

08006be8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006be8:	b480      	push	{r7}
 8006bea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006bec:	4b0b      	ldr	r3, [pc, #44]	; (8006c1c <vPortSetupTimerInterrupt+0x34>)
 8006bee:	2200      	movs	r2, #0
 8006bf0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006bf2:	4b0b      	ldr	r3, [pc, #44]	; (8006c20 <vPortSetupTimerInterrupt+0x38>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006bf8:	4b0a      	ldr	r3, [pc, #40]	; (8006c24 <vPortSetupTimerInterrupt+0x3c>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a0a      	ldr	r2, [pc, #40]	; (8006c28 <vPortSetupTimerInterrupt+0x40>)
 8006bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8006c02:	099b      	lsrs	r3, r3, #6
 8006c04:	4a09      	ldr	r2, [pc, #36]	; (8006c2c <vPortSetupTimerInterrupt+0x44>)
 8006c06:	3b01      	subs	r3, #1
 8006c08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c0a:	4b04      	ldr	r3, [pc, #16]	; (8006c1c <vPortSetupTimerInterrupt+0x34>)
 8006c0c:	2207      	movs	r2, #7
 8006c0e:	601a      	str	r2, [r3, #0]
}
 8006c10:	bf00      	nop
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	e000e010 	.word	0xe000e010
 8006c20:	e000e018 	.word	0xe000e018
 8006c24:	20000000 	.word	0x20000000
 8006c28:	10624dd3 	.word	0x10624dd3
 8006c2c:	e000e014 	.word	0xe000e014

08006c30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006c30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006c40 <vPortEnableVFP+0x10>
 8006c34:	6801      	ldr	r1, [r0, #0]
 8006c36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006c3a:	6001      	str	r1, [r0, #0]
 8006c3c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006c3e:	bf00      	nop
 8006c40:	e000ed88 	.word	0xe000ed88

08006c44 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c4a:	f3ef 8305 	mrs	r3, IPSR
 8006c4e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2b0f      	cmp	r3, #15
 8006c54:	d913      	bls.n	8006c7e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c56:	4a16      	ldr	r2, [pc, #88]	; (8006cb0 <vPortValidateInterruptPriority+0x6c>)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c60:	4b14      	ldr	r3, [pc, #80]	; (8006cb4 <vPortValidateInterruptPriority+0x70>)
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	7afa      	ldrb	r2, [r7, #11]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d209      	bcs.n	8006c7e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6e:	f383 8811 	msr	BASEPRI, r3
 8006c72:	f3bf 8f6f 	isb	sy
 8006c76:	f3bf 8f4f 	dsb	sy
 8006c7a:	607b      	str	r3, [r7, #4]
 8006c7c:	e7fe      	b.n	8006c7c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c7e:	4b0e      	ldr	r3, [pc, #56]	; (8006cb8 <vPortValidateInterruptPriority+0x74>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c86:	4b0d      	ldr	r3, [pc, #52]	; (8006cbc <vPortValidateInterruptPriority+0x78>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d909      	bls.n	8006ca2 <vPortValidateInterruptPriority+0x5e>
 8006c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c92:	f383 8811 	msr	BASEPRI, r3
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	603b      	str	r3, [r7, #0]
 8006ca0:	e7fe      	b.n	8006ca0 <vPortValidateInterruptPriority+0x5c>
	}
 8006ca2:	bf00      	nop
 8006ca4:	3714      	adds	r7, #20
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	e000e3f0 	.word	0xe000e3f0
 8006cb4:	200003ac 	.word	0x200003ac
 8006cb8:	e000ed0c 	.word	0xe000ed0c
 8006cbc:	200003b0 	.word	0x200003b0

08006cc0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b08a      	sub	sp, #40	; 0x28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ccc:	f7ff f910 	bl	8005ef0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006cd0:	4b57      	ldr	r3, [pc, #348]	; (8006e30 <pvPortMalloc+0x170>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d101      	bne.n	8006cdc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006cd8:	f000 f90c 	bl	8006ef4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006cdc:	4b55      	ldr	r3, [pc, #340]	; (8006e34 <pvPortMalloc+0x174>)
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f040 808c 	bne.w	8006e02 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d01c      	beq.n	8006d2a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006cf0:	2208      	movs	r2, #8
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f003 0307 	and.w	r3, r3, #7
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d013      	beq.n	8006d2a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f023 0307 	bic.w	r3, r3, #7
 8006d08:	3308      	adds	r3, #8
 8006d0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f003 0307 	and.w	r3, r3, #7
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d009      	beq.n	8006d2a <pvPortMalloc+0x6a>
 8006d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1a:	f383 8811 	msr	BASEPRI, r3
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	617b      	str	r3, [r7, #20]
 8006d28:	e7fe      	b.n	8006d28 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d068      	beq.n	8006e02 <pvPortMalloc+0x142>
 8006d30:	4b41      	ldr	r3, [pc, #260]	; (8006e38 <pvPortMalloc+0x178>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d863      	bhi.n	8006e02 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d3a:	4b40      	ldr	r3, [pc, #256]	; (8006e3c <pvPortMalloc+0x17c>)
 8006d3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d3e:	4b3f      	ldr	r3, [pc, #252]	; (8006e3c <pvPortMalloc+0x17c>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d44:	e004      	b.n	8006d50 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d903      	bls.n	8006d62 <pvPortMalloc+0xa2>
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1f1      	bne.n	8006d46 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d62:	4b33      	ldr	r3, [pc, #204]	; (8006e30 <pvPortMalloc+0x170>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d04a      	beq.n	8006e02 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2208      	movs	r2, #8
 8006d72:	4413      	add	r3, r2
 8006d74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	6a3b      	ldr	r3, [r7, #32]
 8006d7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	1ad2      	subs	r2, r2, r3
 8006d86:	2308      	movs	r3, #8
 8006d88:	005b      	lsls	r3, r3, #1
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d91e      	bls.n	8006dcc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4413      	add	r3, r2
 8006d94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	f003 0307 	and.w	r3, r3, #7
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d009      	beq.n	8006db4 <pvPortMalloc+0xf4>
 8006da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da4:	f383 8811 	msr	BASEPRI, r3
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	613b      	str	r3, [r7, #16]
 8006db2:	e7fe      	b.n	8006db2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db6:	685a      	ldr	r2, [r3, #4]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	1ad2      	subs	r2, r2, r3
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006dc6:	69b8      	ldr	r0, [r7, #24]
 8006dc8:	f000 f8f6 	bl	8006fb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006dcc:	4b1a      	ldr	r3, [pc, #104]	; (8006e38 <pvPortMalloc+0x178>)
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	4a18      	ldr	r2, [pc, #96]	; (8006e38 <pvPortMalloc+0x178>)
 8006dd8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006dda:	4b17      	ldr	r3, [pc, #92]	; (8006e38 <pvPortMalloc+0x178>)
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	4b18      	ldr	r3, [pc, #96]	; (8006e40 <pvPortMalloc+0x180>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d203      	bcs.n	8006dee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006de6:	4b14      	ldr	r3, [pc, #80]	; (8006e38 <pvPortMalloc+0x178>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a15      	ldr	r2, [pc, #84]	; (8006e40 <pvPortMalloc+0x180>)
 8006dec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df0:	685a      	ldr	r2, [r3, #4]
 8006df2:	4b10      	ldr	r3, [pc, #64]	; (8006e34 <pvPortMalloc+0x174>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	431a      	orrs	r2, r3
 8006df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfe:	2200      	movs	r2, #0
 8006e00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e02:	f7ff f883 	bl	8005f0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	f003 0307 	and.w	r3, r3, #7
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d009      	beq.n	8006e24 <pvPortMalloc+0x164>
 8006e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e14:	f383 8811 	msr	BASEPRI, r3
 8006e18:	f3bf 8f6f 	isb	sy
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	60fb      	str	r3, [r7, #12]
 8006e22:	e7fe      	b.n	8006e22 <pvPortMalloc+0x162>
	return pvReturn;
 8006e24:	69fb      	ldr	r3, [r7, #28]
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3728      	adds	r7, #40	; 0x28
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	20003fbc 	.word	0x20003fbc
 8006e34:	20003fc8 	.word	0x20003fc8
 8006e38:	20003fc0 	.word	0x20003fc0
 8006e3c:	20003fb4 	.word	0x20003fb4
 8006e40:	20003fc4 	.word	0x20003fc4

08006e44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d046      	beq.n	8006ee4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e56:	2308      	movs	r3, #8
 8006e58:	425b      	negs	r3, r3
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	685a      	ldr	r2, [r3, #4]
 8006e68:	4b20      	ldr	r3, [pc, #128]	; (8006eec <vPortFree+0xa8>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d109      	bne.n	8006e86 <vPortFree+0x42>
 8006e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e76:	f383 8811 	msr	BASEPRI, r3
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	60fb      	str	r3, [r7, #12]
 8006e84:	e7fe      	b.n	8006e84 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d009      	beq.n	8006ea2 <vPortFree+0x5e>
 8006e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	60bb      	str	r3, [r7, #8]
 8006ea0:	e7fe      	b.n	8006ea0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	4b11      	ldr	r3, [pc, #68]	; (8006eec <vPortFree+0xa8>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4013      	ands	r3, r2
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d019      	beq.n	8006ee4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d115      	bne.n	8006ee4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	4b0b      	ldr	r3, [pc, #44]	; (8006eec <vPortFree+0xa8>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	43db      	mvns	r3, r3
 8006ec2:	401a      	ands	r2, r3
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ec8:	f7ff f812 	bl	8005ef0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	685a      	ldr	r2, [r3, #4]
 8006ed0:	4b07      	ldr	r3, [pc, #28]	; (8006ef0 <vPortFree+0xac>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	4a06      	ldr	r2, [pc, #24]	; (8006ef0 <vPortFree+0xac>)
 8006ed8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006eda:	6938      	ldr	r0, [r7, #16]
 8006edc:	f000 f86c 	bl	8006fb8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006ee0:	f7ff f814 	bl	8005f0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006ee4:	bf00      	nop
 8006ee6:	3718      	adds	r7, #24
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	20003fc8 	.word	0x20003fc8
 8006ef0:	20003fc0 	.word	0x20003fc0

08006ef4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006efa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006efe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f00:	4b27      	ldr	r3, [pc, #156]	; (8006fa0 <prvHeapInit+0xac>)
 8006f02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f003 0307 	and.w	r3, r3, #7
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00c      	beq.n	8006f28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	3307      	adds	r3, #7
 8006f12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f023 0307 	bic.w	r3, r3, #7
 8006f1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	4a1f      	ldr	r2, [pc, #124]	; (8006fa0 <prvHeapInit+0xac>)
 8006f24:	4413      	add	r3, r2
 8006f26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f2c:	4a1d      	ldr	r2, [pc, #116]	; (8006fa4 <prvHeapInit+0xb0>)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f32:	4b1c      	ldr	r3, [pc, #112]	; (8006fa4 <prvHeapInit+0xb0>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f40:	2208      	movs	r2, #8
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	1a9b      	subs	r3, r3, r2
 8006f46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f023 0307 	bic.w	r3, r3, #7
 8006f4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	4a15      	ldr	r2, [pc, #84]	; (8006fa8 <prvHeapInit+0xb4>)
 8006f54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f56:	4b14      	ldr	r3, [pc, #80]	; (8006fa8 <prvHeapInit+0xb4>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f5e:	4b12      	ldr	r3, [pc, #72]	; (8006fa8 <prvHeapInit+0xb4>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2200      	movs	r2, #0
 8006f64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	1ad2      	subs	r2, r2, r3
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f74:	4b0c      	ldr	r3, [pc, #48]	; (8006fa8 <prvHeapInit+0xb4>)
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	4a0a      	ldr	r2, [pc, #40]	; (8006fac <prvHeapInit+0xb8>)
 8006f82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	4a09      	ldr	r2, [pc, #36]	; (8006fb0 <prvHeapInit+0xbc>)
 8006f8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f8c:	4b09      	ldr	r3, [pc, #36]	; (8006fb4 <prvHeapInit+0xc0>)
 8006f8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f92:	601a      	str	r2, [r3, #0]
}
 8006f94:	bf00      	nop
 8006f96:	3714      	adds	r7, #20
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	200003b4 	.word	0x200003b4
 8006fa4:	20003fb4 	.word	0x20003fb4
 8006fa8:	20003fbc 	.word	0x20003fbc
 8006fac:	20003fc4 	.word	0x20003fc4
 8006fb0:	20003fc0 	.word	0x20003fc0
 8006fb4:	20003fc8 	.word	0x20003fc8

08006fb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006fc0:	4b28      	ldr	r3, [pc, #160]	; (8007064 <prvInsertBlockIntoFreeList+0xac>)
 8006fc2:	60fb      	str	r3, [r7, #12]
 8006fc4:	e002      	b.n	8006fcc <prvInsertBlockIntoFreeList+0x14>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	60fb      	str	r3, [r7, #12]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d8f7      	bhi.n	8006fc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d108      	bne.n	8006ffa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	685a      	ldr	r2, [r3, #4]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	441a      	add	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	441a      	add	r2, r3
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	429a      	cmp	r2, r3
 800700c:	d118      	bne.n	8007040 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	4b15      	ldr	r3, [pc, #84]	; (8007068 <prvInsertBlockIntoFreeList+0xb0>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	429a      	cmp	r2, r3
 8007018:	d00d      	beq.n	8007036 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	441a      	add	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	601a      	str	r2, [r3, #0]
 8007034:	e008      	b.n	8007048 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007036:	4b0c      	ldr	r3, [pc, #48]	; (8007068 <prvInsertBlockIntoFreeList+0xb0>)
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	601a      	str	r2, [r3, #0]
 800703e:	e003      	b.n	8007048 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	429a      	cmp	r2, r3
 800704e:	d002      	beq.n	8007056 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007056:	bf00      	nop
 8007058:	3714      	adds	r7, #20
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	20003fb4 	.word	0x20003fb4
 8007068:	20003fbc 	.word	0x20003fbc

0800706c <__libc_init_array>:
 800706c:	b570      	push	{r4, r5, r6, lr}
 800706e:	4e0d      	ldr	r6, [pc, #52]	; (80070a4 <__libc_init_array+0x38>)
 8007070:	4c0d      	ldr	r4, [pc, #52]	; (80070a8 <__libc_init_array+0x3c>)
 8007072:	1ba4      	subs	r4, r4, r6
 8007074:	10a4      	asrs	r4, r4, #2
 8007076:	2500      	movs	r5, #0
 8007078:	42a5      	cmp	r5, r4
 800707a:	d109      	bne.n	8007090 <__libc_init_array+0x24>
 800707c:	4e0b      	ldr	r6, [pc, #44]	; (80070ac <__libc_init_array+0x40>)
 800707e:	4c0c      	ldr	r4, [pc, #48]	; (80070b0 <__libc_init_array+0x44>)
 8007080:	f000 f82c 	bl	80070dc <_init>
 8007084:	1ba4      	subs	r4, r4, r6
 8007086:	10a4      	asrs	r4, r4, #2
 8007088:	2500      	movs	r5, #0
 800708a:	42a5      	cmp	r5, r4
 800708c:	d105      	bne.n	800709a <__libc_init_array+0x2e>
 800708e:	bd70      	pop	{r4, r5, r6, pc}
 8007090:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007094:	4798      	blx	r3
 8007096:	3501      	adds	r5, #1
 8007098:	e7ee      	b.n	8007078 <__libc_init_array+0xc>
 800709a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800709e:	4798      	blx	r3
 80070a0:	3501      	adds	r5, #1
 80070a2:	e7f2      	b.n	800708a <__libc_init_array+0x1e>
 80070a4:	08007180 	.word	0x08007180
 80070a8:	08007180 	.word	0x08007180
 80070ac:	08007180 	.word	0x08007180
 80070b0:	08007184 	.word	0x08007184

080070b4 <memcpy>:
 80070b4:	b510      	push	{r4, lr}
 80070b6:	1e43      	subs	r3, r0, #1
 80070b8:	440a      	add	r2, r1
 80070ba:	4291      	cmp	r1, r2
 80070bc:	d100      	bne.n	80070c0 <memcpy+0xc>
 80070be:	bd10      	pop	{r4, pc}
 80070c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070c8:	e7f7      	b.n	80070ba <memcpy+0x6>

080070ca <memset>:
 80070ca:	4402      	add	r2, r0
 80070cc:	4603      	mov	r3, r0
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d100      	bne.n	80070d4 <memset+0xa>
 80070d2:	4770      	bx	lr
 80070d4:	f803 1b01 	strb.w	r1, [r3], #1
 80070d8:	e7f9      	b.n	80070ce <memset+0x4>
	...

080070dc <_init>:
 80070dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070de:	bf00      	nop
 80070e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070e2:	bc08      	pop	{r3}
 80070e4:	469e      	mov	lr, r3
 80070e6:	4770      	bx	lr

080070e8 <_fini>:
 80070e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ea:	bf00      	nop
 80070ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ee:	bc08      	pop	{r3}
 80070f0:	469e      	mov	lr, r3
 80070f2:	4770      	bx	lr
