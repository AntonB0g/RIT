
Exercise_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004ed0  08004ed0  00014ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f48  08004f48  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004f48  08004f48  00014f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f50  08004f50  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f50  08004f50  00014f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f54  08004f54  00014f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004f58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004144  20000010  08004f68  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004154  08004f68  00024154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001588d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002eb4  00000000  00000000  000358cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001470  00000000  00000000  00038788  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001328  00000000  00000000  00039bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017fe3  00000000  00000000  0003af20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fc2a  00000000  00000000  00052f03  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009799e  00000000  00000000  00062b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fa4cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005704  00000000  00000000  000fa548  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004eb8 	.word	0x08004eb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08004eb8 	.word	0x08004eb8

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <__aeabi_uldivmod>:
 80009bc:	b953      	cbnz	r3, 80009d4 <__aeabi_uldivmod+0x18>
 80009be:	b94a      	cbnz	r2, 80009d4 <__aeabi_uldivmod+0x18>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bf08      	it	eq
 80009c4:	2800      	cmpeq	r0, #0
 80009c6:	bf1c      	itt	ne
 80009c8:	f04f 31ff 	movne.w	r1, #4294967295
 80009cc:	f04f 30ff 	movne.w	r0, #4294967295
 80009d0:	f000 b972 	b.w	8000cb8 <__aeabi_idiv0>
 80009d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009dc:	f000 f806 	bl	80009ec <__udivmoddi4>
 80009e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e8:	b004      	add	sp, #16
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	9e08      	ldr	r6, [sp, #32]
 80009f2:	4604      	mov	r4, r0
 80009f4:	4688      	mov	r8, r1
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d14b      	bne.n	8000a92 <__udivmoddi4+0xa6>
 80009fa:	428a      	cmp	r2, r1
 80009fc:	4615      	mov	r5, r2
 80009fe:	d967      	bls.n	8000ad0 <__udivmoddi4+0xe4>
 8000a00:	fab2 f282 	clz	r2, r2
 8000a04:	b14a      	cbz	r2, 8000a1a <__udivmoddi4+0x2e>
 8000a06:	f1c2 0720 	rsb	r7, r2, #32
 8000a0a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a0e:	fa20 f707 	lsr.w	r7, r0, r7
 8000a12:	4095      	lsls	r5, r2
 8000a14:	ea47 0803 	orr.w	r8, r7, r3
 8000a18:	4094      	lsls	r4, r2
 8000a1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a1e:	0c23      	lsrs	r3, r4, #16
 8000a20:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a24:	fa1f fc85 	uxth.w	ip, r5
 8000a28:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a2c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a30:	fb07 f10c 	mul.w	r1, r7, ip
 8000a34:	4299      	cmp	r1, r3
 8000a36:	d909      	bls.n	8000a4c <__udivmoddi4+0x60>
 8000a38:	18eb      	adds	r3, r5, r3
 8000a3a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a3e:	f080 811b 	bcs.w	8000c78 <__udivmoddi4+0x28c>
 8000a42:	4299      	cmp	r1, r3
 8000a44:	f240 8118 	bls.w	8000c78 <__udivmoddi4+0x28c>
 8000a48:	3f02      	subs	r7, #2
 8000a4a:	442b      	add	r3, r5
 8000a4c:	1a5b      	subs	r3, r3, r1
 8000a4e:	b2a4      	uxth	r4, r4
 8000a50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a5c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a60:	45a4      	cmp	ip, r4
 8000a62:	d909      	bls.n	8000a78 <__udivmoddi4+0x8c>
 8000a64:	192c      	adds	r4, r5, r4
 8000a66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a6a:	f080 8107 	bcs.w	8000c7c <__udivmoddi4+0x290>
 8000a6e:	45a4      	cmp	ip, r4
 8000a70:	f240 8104 	bls.w	8000c7c <__udivmoddi4+0x290>
 8000a74:	3802      	subs	r0, #2
 8000a76:	442c      	add	r4, r5
 8000a78:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a7c:	eba4 040c 	sub.w	r4, r4, ip
 8000a80:	2700      	movs	r7, #0
 8000a82:	b11e      	cbz	r6, 8000a8c <__udivmoddi4+0xa0>
 8000a84:	40d4      	lsrs	r4, r2
 8000a86:	2300      	movs	r3, #0
 8000a88:	e9c6 4300 	strd	r4, r3, [r6]
 8000a8c:	4639      	mov	r1, r7
 8000a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a92:	428b      	cmp	r3, r1
 8000a94:	d909      	bls.n	8000aaa <__udivmoddi4+0xbe>
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	f000 80eb 	beq.w	8000c72 <__udivmoddi4+0x286>
 8000a9c:	2700      	movs	r7, #0
 8000a9e:	e9c6 0100 	strd	r0, r1, [r6]
 8000aa2:	4638      	mov	r0, r7
 8000aa4:	4639      	mov	r1, r7
 8000aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aaa:	fab3 f783 	clz	r7, r3
 8000aae:	2f00      	cmp	r7, #0
 8000ab0:	d147      	bne.n	8000b42 <__udivmoddi4+0x156>
 8000ab2:	428b      	cmp	r3, r1
 8000ab4:	d302      	bcc.n	8000abc <__udivmoddi4+0xd0>
 8000ab6:	4282      	cmp	r2, r0
 8000ab8:	f200 80fa 	bhi.w	8000cb0 <__udivmoddi4+0x2c4>
 8000abc:	1a84      	subs	r4, r0, r2
 8000abe:	eb61 0303 	sbc.w	r3, r1, r3
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	4698      	mov	r8, r3
 8000ac6:	2e00      	cmp	r6, #0
 8000ac8:	d0e0      	beq.n	8000a8c <__udivmoddi4+0xa0>
 8000aca:	e9c6 4800 	strd	r4, r8, [r6]
 8000ace:	e7dd      	b.n	8000a8c <__udivmoddi4+0xa0>
 8000ad0:	b902      	cbnz	r2, 8000ad4 <__udivmoddi4+0xe8>
 8000ad2:	deff      	udf	#255	; 0xff
 8000ad4:	fab2 f282 	clz	r2, r2
 8000ad8:	2a00      	cmp	r2, #0
 8000ada:	f040 808f 	bne.w	8000bfc <__udivmoddi4+0x210>
 8000ade:	1b49      	subs	r1, r1, r5
 8000ae0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ae4:	fa1f f885 	uxth.w	r8, r5
 8000ae8:	2701      	movs	r7, #1
 8000aea:	fbb1 fcfe 	udiv	ip, r1, lr
 8000aee:	0c23      	lsrs	r3, r4, #16
 8000af0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000af4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af8:	fb08 f10c 	mul.w	r1, r8, ip
 8000afc:	4299      	cmp	r1, r3
 8000afe:	d907      	bls.n	8000b10 <__udivmoddi4+0x124>
 8000b00:	18eb      	adds	r3, r5, r3
 8000b02:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x122>
 8000b08:	4299      	cmp	r1, r3
 8000b0a:	f200 80cd 	bhi.w	8000ca8 <__udivmoddi4+0x2bc>
 8000b0e:	4684      	mov	ip, r0
 8000b10:	1a59      	subs	r1, r3, r1
 8000b12:	b2a3      	uxth	r3, r4
 8000b14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b18:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b1c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b20:	fb08 f800 	mul.w	r8, r8, r0
 8000b24:	45a0      	cmp	r8, r4
 8000b26:	d907      	bls.n	8000b38 <__udivmoddi4+0x14c>
 8000b28:	192c      	adds	r4, r5, r4
 8000b2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b2e:	d202      	bcs.n	8000b36 <__udivmoddi4+0x14a>
 8000b30:	45a0      	cmp	r8, r4
 8000b32:	f200 80b6 	bhi.w	8000ca2 <__udivmoddi4+0x2b6>
 8000b36:	4618      	mov	r0, r3
 8000b38:	eba4 0408 	sub.w	r4, r4, r8
 8000b3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b40:	e79f      	b.n	8000a82 <__udivmoddi4+0x96>
 8000b42:	f1c7 0c20 	rsb	ip, r7, #32
 8000b46:	40bb      	lsls	r3, r7
 8000b48:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b4c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b50:	fa01 f407 	lsl.w	r4, r1, r7
 8000b54:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b58:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b5c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b60:	4325      	orrs	r5, r4
 8000b62:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b66:	0c2c      	lsrs	r4, r5, #16
 8000b68:	fb08 3319 	mls	r3, r8, r9, r3
 8000b6c:	fa1f fa8e 	uxth.w	sl, lr
 8000b70:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b74:	fb09 f40a 	mul.w	r4, r9, sl
 8000b78:	429c      	cmp	r4, r3
 8000b7a:	fa02 f207 	lsl.w	r2, r2, r7
 8000b7e:	fa00 f107 	lsl.w	r1, r0, r7
 8000b82:	d90b      	bls.n	8000b9c <__udivmoddi4+0x1b0>
 8000b84:	eb1e 0303 	adds.w	r3, lr, r3
 8000b88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b8c:	f080 8087 	bcs.w	8000c9e <__udivmoddi4+0x2b2>
 8000b90:	429c      	cmp	r4, r3
 8000b92:	f240 8084 	bls.w	8000c9e <__udivmoddi4+0x2b2>
 8000b96:	f1a9 0902 	sub.w	r9, r9, #2
 8000b9a:	4473      	add	r3, lr
 8000b9c:	1b1b      	subs	r3, r3, r4
 8000b9e:	b2ad      	uxth	r5, r5
 8000ba0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000bac:	fb00 fa0a 	mul.w	sl, r0, sl
 8000bb0:	45a2      	cmp	sl, r4
 8000bb2:	d908      	bls.n	8000bc6 <__udivmoddi4+0x1da>
 8000bb4:	eb1e 0404 	adds.w	r4, lr, r4
 8000bb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bbc:	d26b      	bcs.n	8000c96 <__udivmoddi4+0x2aa>
 8000bbe:	45a2      	cmp	sl, r4
 8000bc0:	d969      	bls.n	8000c96 <__udivmoddi4+0x2aa>
 8000bc2:	3802      	subs	r0, #2
 8000bc4:	4474      	add	r4, lr
 8000bc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bca:	fba0 8902 	umull	r8, r9, r0, r2
 8000bce:	eba4 040a 	sub.w	r4, r4, sl
 8000bd2:	454c      	cmp	r4, r9
 8000bd4:	46c2      	mov	sl, r8
 8000bd6:	464b      	mov	r3, r9
 8000bd8:	d354      	bcc.n	8000c84 <__udivmoddi4+0x298>
 8000bda:	d051      	beq.n	8000c80 <__udivmoddi4+0x294>
 8000bdc:	2e00      	cmp	r6, #0
 8000bde:	d069      	beq.n	8000cb4 <__udivmoddi4+0x2c8>
 8000be0:	ebb1 050a 	subs.w	r5, r1, sl
 8000be4:	eb64 0403 	sbc.w	r4, r4, r3
 8000be8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000bec:	40fd      	lsrs	r5, r7
 8000bee:	40fc      	lsrs	r4, r7
 8000bf0:	ea4c 0505 	orr.w	r5, ip, r5
 8000bf4:	e9c6 5400 	strd	r5, r4, [r6]
 8000bf8:	2700      	movs	r7, #0
 8000bfa:	e747      	b.n	8000a8c <__udivmoddi4+0xa0>
 8000bfc:	f1c2 0320 	rsb	r3, r2, #32
 8000c00:	fa20 f703 	lsr.w	r7, r0, r3
 8000c04:	4095      	lsls	r5, r2
 8000c06:	fa01 f002 	lsl.w	r0, r1, r2
 8000c0a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c12:	4338      	orrs	r0, r7
 8000c14:	0c01      	lsrs	r1, r0, #16
 8000c16:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c1a:	fa1f f885 	uxth.w	r8, r5
 8000c1e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c26:	fb07 f308 	mul.w	r3, r7, r8
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c30:	d907      	bls.n	8000c42 <__udivmoddi4+0x256>
 8000c32:	1869      	adds	r1, r5, r1
 8000c34:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c38:	d22f      	bcs.n	8000c9a <__udivmoddi4+0x2ae>
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d92d      	bls.n	8000c9a <__udivmoddi4+0x2ae>
 8000c3e:	3f02      	subs	r7, #2
 8000c40:	4429      	add	r1, r5
 8000c42:	1acb      	subs	r3, r1, r3
 8000c44:	b281      	uxth	r1, r0
 8000c46:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c4a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c52:	fb00 f308 	mul.w	r3, r0, r8
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d907      	bls.n	8000c6a <__udivmoddi4+0x27e>
 8000c5a:	1869      	adds	r1, r5, r1
 8000c5c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c60:	d217      	bcs.n	8000c92 <__udivmoddi4+0x2a6>
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d915      	bls.n	8000c92 <__udivmoddi4+0x2a6>
 8000c66:	3802      	subs	r0, #2
 8000c68:	4429      	add	r1, r5
 8000c6a:	1ac9      	subs	r1, r1, r3
 8000c6c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c70:	e73b      	b.n	8000aea <__udivmoddi4+0xfe>
 8000c72:	4637      	mov	r7, r6
 8000c74:	4630      	mov	r0, r6
 8000c76:	e709      	b.n	8000a8c <__udivmoddi4+0xa0>
 8000c78:	4607      	mov	r7, r0
 8000c7a:	e6e7      	b.n	8000a4c <__udivmoddi4+0x60>
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	e6fb      	b.n	8000a78 <__udivmoddi4+0x8c>
 8000c80:	4541      	cmp	r1, r8
 8000c82:	d2ab      	bcs.n	8000bdc <__udivmoddi4+0x1f0>
 8000c84:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c88:	eb69 020e 	sbc.w	r2, r9, lr
 8000c8c:	3801      	subs	r0, #1
 8000c8e:	4613      	mov	r3, r2
 8000c90:	e7a4      	b.n	8000bdc <__udivmoddi4+0x1f0>
 8000c92:	4660      	mov	r0, ip
 8000c94:	e7e9      	b.n	8000c6a <__udivmoddi4+0x27e>
 8000c96:	4618      	mov	r0, r3
 8000c98:	e795      	b.n	8000bc6 <__udivmoddi4+0x1da>
 8000c9a:	4667      	mov	r7, ip
 8000c9c:	e7d1      	b.n	8000c42 <__udivmoddi4+0x256>
 8000c9e:	4681      	mov	r9, r0
 8000ca0:	e77c      	b.n	8000b9c <__udivmoddi4+0x1b0>
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	442c      	add	r4, r5
 8000ca6:	e747      	b.n	8000b38 <__udivmoddi4+0x14c>
 8000ca8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cac:	442b      	add	r3, r5
 8000cae:	e72f      	b.n	8000b10 <__udivmoddi4+0x124>
 8000cb0:	4638      	mov	r0, r7
 8000cb2:	e708      	b.n	8000ac6 <__udivmoddi4+0xda>
 8000cb4:	4637      	mov	r7, r6
 8000cb6:	e6e9      	b.n	8000a8c <__udivmoddi4+0xa0>

08000cb8 <__aeabi_idiv0>:
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4a07      	ldr	r2, [pc, #28]	; (8000ce8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ccc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	4a06      	ldr	r2, [pc, #24]	; (8000cec <vApplicationGetIdleTaskMemory+0x30>)
 8000cd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2280      	movs	r2, #128	; 0x80
 8000cd8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000cda:	bf00      	nop
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	2000002c 	.word	0x2000002c
 8000cec:	20000080 	.word	0x20000080

08000cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf0:	b5b0      	push	{r4, r5, r7, lr}
 8000cf2:	b08e      	sub	sp, #56	; 0x38
 8000cf4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf6:	f000 fd35 	bl	8001764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfa:	f000 f839 	bl	8000d70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfe:	f000 f97d 	bl	8000ffc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d02:	f000 f8b9 	bl	8000e78 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000d06:	f000 f8e5 	bl	8000ed4 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000d0a:	f000 f911 	bl	8000f30 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000d0e:	f000 f93f 	bl	8000f90 <MX_SPI1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of FlashGreenLedTa */
  osThreadDef(FlashGreenLedTa, StartFlashGreenLedTask, osPriorityNormal, 0, 128);
 8000d12:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <main+0x70>)
 8000d14:	f107 041c 	add.w	r4, r7, #28
 8000d18:	461d      	mov	r5, r3
 8000d1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FlashGreenLedTaHandle = osThreadCreate(osThread(FlashGreenLedTa), NULL);
 8000d26:	f107 031c 	add.w	r3, r7, #28
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f002 fe4e 	bl	80039ce <osThreadCreate>
 8000d32:	4602      	mov	r2, r0
 8000d34:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <main+0x74>)
 8000d36:	601a      	str	r2, [r3, #0]

  /* definition and creation of FlashRedLedTask */
  osThreadDef(FlashRedLedTask, StartFlashRedLedTask, osPriorityNormal, 0, 128);
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <main+0x78>)
 8000d3a:	463c      	mov	r4, r7
 8000d3c:	461d      	mov	r5, r3
 8000d3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FlashRedLedTaskHandle = osThreadCreate(osThread(FlashRedLedTask), NULL);
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f002 fe3d 	bl	80039ce <osThreadCreate>
 8000d54:	4602      	mov	r2, r0
 8000d56:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <main+0x7c>)
 8000d58:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d5a:	f002 fe31 	bl	80039c0 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <main+0x6e>
 8000d60:	08004ee0 	.word	0x08004ee0
 8000d64:	20004020 	.word	0x20004020
 8000d68:	08004f0c 	.word	0x08004f0c
 8000d6c:	2000410c 	.word	0x2000410c

08000d70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b09a      	sub	sp, #104	; 0x68
 8000d74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d7a:	2230      	movs	r2, #48	; 0x30
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f004 f892 	bl	8004ea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
 8000da4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	4b31      	ldr	r3, [pc, #196]	; (8000e70 <SystemClock_Config+0x100>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	4a30      	ldr	r2, [pc, #192]	; (8000e70 <SystemClock_Config+0x100>)
 8000db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db4:	6413      	str	r3, [r2, #64]	; 0x40
 8000db6:	4b2e      	ldr	r3, [pc, #184]	; (8000e70 <SystemClock_Config+0x100>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	4b2b      	ldr	r3, [pc, #172]	; (8000e74 <SystemClock_Config+0x104>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a2a      	ldr	r2, [pc, #168]	; (8000e74 <SystemClock_Config+0x104>)
 8000dcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dd0:	6013      	str	r3, [r2, #0]
 8000dd2:	4b28      	ldr	r3, [pc, #160]	; (8000e74 <SystemClock_Config+0x104>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dde:	2301      	movs	r3, #1
 8000de0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000de2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000de6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de8:	2302      	movs	r3, #2
 8000dea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000df0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000df2:	2304      	movs	r3, #4
 8000df4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000df6:	23c0      	movs	r3, #192	; 0xc0
 8000df8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000dfe:	2308      	movs	r3, #8
 8000e00:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e02:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 fd5e 	bl	80028c8 <HAL_RCC_OscConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e12:	f000 fa59 	bl	80012c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e16:	230f      	movs	r3, #15
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e22:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e26:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e30:	2103      	movs	r1, #3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 ffb8 	bl	8002da8 <HAL_RCC_ClockConfig>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000e3e:	f000 fa43 	bl	80012c8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e42:	2301      	movs	r3, #1
 8000e44:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000e46:	23c8      	movs	r3, #200	; 0xc8
 8000e48:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000e4a:	2305      	movs	r3, #5
 8000e4c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e52:	f107 030c 	add.w	r3, r7, #12
 8000e56:	4618      	mov	r0, r3
 8000e58:	f002 f9ca 	bl	80031f0 <HAL_RCCEx_PeriphCLKConfig>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000e62:	f000 fa31 	bl	80012c8 <Error_Handler>
  }
}
 8000e66:	bf00      	nop
 8000e68:	3768      	adds	r7, #104	; 0x68
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40007000 	.word	0x40007000

08000e78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000e7e:	4a13      	ldr	r2, [pc, #76]	; (8000ecc <MX_I2C1_Init+0x54>)
 8000e80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000e84:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <MX_I2C1_Init+0x58>)
 8000e86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000e96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ea8:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eb4:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000eb6:	f000 ff2f 	bl	8001d18 <HAL_I2C_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ec0:	f000 fa02 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20003fcc 	.word	0x20003fcc
 8000ecc:	40005400 	.word	0x40005400
 8000ed0:	000186a0 	.word	0x000186a0

08000ed4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <MX_I2S2_Init+0x50>)
 8000eda:	4a13      	ldr	r2, [pc, #76]	; (8000f28 <MX_I2S2_Init+0x54>)
 8000edc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <MX_I2S2_Init+0x50>)
 8000ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ee4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <MX_I2S2_Init+0x50>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000eec:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <MX_I2S2_Init+0x50>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <MX_I2S2_Init+0x50>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <MX_I2S2_Init+0x50>)
 8000efa:	4a0c      	ldr	r2, [pc, #48]	; (8000f2c <MX_I2S2_Init+0x58>)
 8000efc:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <MX_I2S2_Init+0x50>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <MX_I2S2_Init+0x50>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <MX_I2S2_Init+0x50>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000f10:	4804      	ldr	r0, [pc, #16]	; (8000f24 <MX_I2S2_Init+0x50>)
 8000f12:	f001 f839 	bl	8001f88 <HAL_I2S_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000f1c:	f000 f9d4 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	2000407c 	.word	0x2000407c
 8000f28:	40003800 	.word	0x40003800
 8000f2c:	00017700 	.word	0x00017700

08000f30 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000f34:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <MX_I2S3_Init+0x54>)
 8000f36:	4a14      	ldr	r2, [pc, #80]	; (8000f88 <MX_I2S3_Init+0x58>)
 8000f38:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000f3a:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <MX_I2S3_Init+0x54>)
 8000f3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f40:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <MX_I2S3_Init+0x54>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <MX_I2S3_Init+0x54>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000f4e:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <MX_I2S3_Init+0x54>)
 8000f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f54:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000f56:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <MX_I2S3_Init+0x54>)
 8000f58:	4a0c      	ldr	r2, [pc, #48]	; (8000f8c <MX_I2S3_Init+0x5c>)
 8000f5a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000f5c:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <MX_I2S3_Init+0x54>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <MX_I2S3_Init+0x54>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <MX_I2S3_Init+0x54>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000f6e:	4805      	ldr	r0, [pc, #20]	; (8000f84 <MX_I2S3_Init+0x54>)
 8000f70:	f001 f80a 	bl	8001f88 <HAL_I2S_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000f7a:	f000 f9a5 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200040c4 	.word	0x200040c4
 8000f88:	40003c00 	.word	0x40003c00
 8000f8c:	00017700 	.word	0x00017700

08000f90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f94:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <MX_SPI1_Init+0x64>)
 8000f96:	4a18      	ldr	r2, [pc, #96]	; (8000ff8 <MX_SPI1_Init+0x68>)
 8000f98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f9a:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <MX_SPI1_Init+0x64>)
 8000f9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fa0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fa2:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <MX_SPI1_Init+0x64>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <MX_SPI1_Init+0x64>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_SPI1_Init+0x64>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_SPI1_Init+0x64>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <MX_SPI1_Init+0x64>)
 8000fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_SPI1_Init+0x64>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <MX_SPI1_Init+0x64>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_SPI1_Init+0x64>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fd4:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <MX_SPI1_Init+0x64>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <MX_SPI1_Init+0x64>)
 8000fdc:	220a      	movs	r2, #10
 8000fde:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fe0:	4804      	ldr	r0, [pc, #16]	; (8000ff4 <MX_SPI1_Init+0x64>)
 8000fe2:	f002 fa53 	bl	800348c <HAL_SPI_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fec:	f000 f96c 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20004024 	.word	0x20004024
 8000ff8:	40013000 	.word	0x40013000

08000ffc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08c      	sub	sp, #48	; 0x30
 8001000:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	61bb      	str	r3, [r7, #24]
 8001016:	4b6f      	ldr	r3, [pc, #444]	; (80011d4 <MX_GPIO_Init+0x1d8>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a6e      	ldr	r2, [pc, #440]	; (80011d4 <MX_GPIO_Init+0x1d8>)
 800101c:	f043 0310 	orr.w	r3, r3, #16
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b6c      	ldr	r3, [pc, #432]	; (80011d4 <MX_GPIO_Init+0x1d8>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0310 	and.w	r3, r3, #16
 800102a:	61bb      	str	r3, [r7, #24]
 800102c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	4b68      	ldr	r3, [pc, #416]	; (80011d4 <MX_GPIO_Init+0x1d8>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a67      	ldr	r2, [pc, #412]	; (80011d4 <MX_GPIO_Init+0x1d8>)
 8001038:	f043 0304 	orr.w	r3, r3, #4
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b65      	ldr	r3, [pc, #404]	; (80011d4 <MX_GPIO_Init+0x1d8>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0304 	and.w	r3, r3, #4
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	4b61      	ldr	r3, [pc, #388]	; (80011d4 <MX_GPIO_Init+0x1d8>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a60      	ldr	r2, [pc, #384]	; (80011d4 <MX_GPIO_Init+0x1d8>)
 8001054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b5e      	ldr	r3, [pc, #376]	; (80011d4 <MX_GPIO_Init+0x1d8>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b5a      	ldr	r3, [pc, #360]	; (80011d4 <MX_GPIO_Init+0x1d8>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a59      	ldr	r2, [pc, #356]	; (80011d4 <MX_GPIO_Init+0x1d8>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b57      	ldr	r3, [pc, #348]	; (80011d4 <MX_GPIO_Init+0x1d8>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	4b53      	ldr	r3, [pc, #332]	; (80011d4 <MX_GPIO_Init+0x1d8>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a52      	ldr	r2, [pc, #328]	; (80011d4 <MX_GPIO_Init+0x1d8>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b50      	ldr	r3, [pc, #320]	; (80011d4 <MX_GPIO_Init+0x1d8>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	4b4c      	ldr	r3, [pc, #304]	; (80011d4 <MX_GPIO_Init+0x1d8>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a4b      	ldr	r2, [pc, #300]	; (80011d4 <MX_GPIO_Init+0x1d8>)
 80010a8:	f043 0308 	orr.w	r3, r3, #8
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b49      	ldr	r3, [pc, #292]	; (80011d4 <MX_GPIO_Init+0x1d8>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0308 	and.w	r3, r3, #8
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2108      	movs	r1, #8
 80010be:	4846      	ldr	r0, [pc, #280]	; (80011d8 <MX_GPIO_Init+0x1dc>)
 80010c0:	f000 fdf6 	bl	8001cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80010c4:	2201      	movs	r2, #1
 80010c6:	2101      	movs	r1, #1
 80010c8:	4844      	ldr	r0, [pc, #272]	; (80011dc <MX_GPIO_Init+0x1e0>)
 80010ca:	f000 fdf1 	bl	8001cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GreenLed_Pin|LD3_Pin|RedLed_Pin|LD6_Pin 
 80010ce:	2200      	movs	r2, #0
 80010d0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80010d4:	4842      	ldr	r0, [pc, #264]	; (80011e0 <MX_GPIO_Init+0x1e4>)
 80010d6:	f000 fdeb 	bl	8001cb0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80010da:	2304      	movs	r3, #4
 80010dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010de:	2300      	movs	r3, #0
 80010e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	4619      	mov	r1, r3
 80010ec:	483a      	ldr	r0, [pc, #232]	; (80011d8 <MX_GPIO_Init+0x1dc>)
 80010ee:	f000 fc5d 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80010f2:	2308      	movs	r3, #8
 80010f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 031c 	add.w	r3, r7, #28
 8001106:	4619      	mov	r1, r3
 8001108:	4833      	ldr	r0, [pc, #204]	; (80011d8 <MX_GPIO_Init+0x1dc>)
 800110a:	f000 fc4f 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800110e:	2332      	movs	r3, #50	; 0x32
 8001110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001112:	4b34      	ldr	r3, [pc, #208]	; (80011e4 <MX_GPIO_Init+0x1e8>)
 8001114:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	4619      	mov	r1, r3
 8001120:	482d      	ldr	r0, [pc, #180]	; (80011d8 <MX_GPIO_Init+0x1dc>)
 8001122:	f000 fc43 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001126:	2301      	movs	r3, #1
 8001128:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112a:	2301      	movs	r3, #1
 800112c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 031c 	add.w	r3, r7, #28
 800113a:	4619      	mov	r1, r3
 800113c:	4827      	ldr	r0, [pc, #156]	; (80011dc <MX_GPIO_Init+0x1e0>)
 800113e:	f000 fc35 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001142:	2301      	movs	r3, #1
 8001144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001146:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <MX_GPIO_Init+0x1e8>)
 8001148:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	4619      	mov	r1, r3
 8001154:	4824      	ldr	r0, [pc, #144]	; (80011e8 <MX_GPIO_Init+0x1ec>)
 8001156:	f000 fc29 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : GreenLed_Pin LD3_Pin RedLed_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = GreenLed_Pin|LD3_Pin|RedLed_Pin|LD6_Pin 
 800115a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800115e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001160:	2301      	movs	r3, #1
 8001162:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2300      	movs	r3, #0
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	4619      	mov	r1, r3
 8001172:	481b      	ldr	r0, [pc, #108]	; (80011e0 <MX_GPIO_Init+0x1e4>)
 8001174:	f000 fc1a 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001178:	f44f 7300 	mov.w	r3, #512	; 0x200
 800117c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	4619      	mov	r1, r3
 800118c:	4816      	ldr	r0, [pc, #88]	; (80011e8 <MX_GPIO_Init+0x1ec>)
 800118e:	f000 fc0d 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001192:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011a4:	230a      	movs	r3, #10
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	4619      	mov	r1, r3
 80011ae:	480e      	ldr	r0, [pc, #56]	; (80011e8 <MX_GPIO_Init+0x1ec>)
 80011b0:	f000 fbfc 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80011b4:	2320      	movs	r3, #32
 80011b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	4619      	mov	r1, r3
 80011c6:	4806      	ldr	r0, [pc, #24]	; (80011e0 <MX_GPIO_Init+0x1e4>)
 80011c8:	f000 fbf0 	bl	80019ac <HAL_GPIO_Init>

}
 80011cc:	bf00      	nop
 80011ce:	3730      	adds	r7, #48	; 0x30
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40020800 	.word	0x40020800
 80011e0:	40020c00 	.word	0x40020c00
 80011e4:	10120000 	.word	0x10120000
 80011e8:	40020000 	.word	0x40020000

080011ec <StartFlashGreenLedTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartFlashGreenLedTask */
void StartFlashGreenLedTask(void const * argument)
{
 80011ec:	b590      	push	{r4, r7, lr}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  TickType_t TaskTimeStamp;
  TickType_t DelayTimeMsec = 1000;
 80011f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f8:	60fb      	str	r3, [r7, #12]
  TaskTimeStamp = xTaskGetTickCount();
 80011fa:	f002 fff1 	bl	80041e0 <xTaskGetTickCount>
 80011fe:	4603      	mov	r3, r0
 8001200:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, green);
 8001202:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001206:	4813      	ldr	r0, [pc, #76]	; (8001254 <StartFlashGreenLedTask+0x68>)
 8001208:	f000 fd6b 	bl	8001ce2 <HAL_GPIO_TogglePin>
	  vTaskDelayUntil(&TaskTimeStamp, 2*DelayTimeMsec);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	005a      	lsls	r2, r3, #1
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	4611      	mov	r1, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f002 fe60 	bl	8003edc <vTaskDelayUntil>
	  HAL_GPIO_TogglePin(GPIOD, green);
 800121c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001220:	480c      	ldr	r0, [pc, #48]	; (8001254 <StartFlashGreenLedTask+0x68>)
 8001222:	f000 fd5e 	bl	8001ce2 <HAL_GPIO_TogglePin>
	  vTaskDelayUntil(&TaskTimeStamp, 1.5*DelayTimeMsec);
 8001226:	68f8      	ldr	r0, [r7, #12]
 8001228:	f7ff f91c 	bl	8000464 <__aeabi_ui2d>
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <StartFlashGreenLedTask+0x6c>)
 8001232:	f7ff f991 	bl	8000558 <__aeabi_dmul>
 8001236:	4603      	mov	r3, r0
 8001238:	460c      	mov	r4, r1
 800123a:	4618      	mov	r0, r3
 800123c:	4621      	mov	r1, r4
 800123e:	f7ff fb9d 	bl	800097c <__aeabi_d2uiz>
 8001242:	4602      	mov	r2, r0
 8001244:	f107 0308 	add.w	r3, r7, #8
 8001248:	4611      	mov	r1, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f002 fe46 	bl	8003edc <vTaskDelayUntil>
	  HAL_GPIO_TogglePin(GPIOD, green);
 8001250:	e7d7      	b.n	8001202 <StartFlashGreenLedTask+0x16>
 8001252:	bf00      	nop
 8001254:	40020c00 	.word	0x40020c00
 8001258:	3ff80000 	.word	0x3ff80000

0800125c <StartFlashRedLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFlashRedLedTask */
void StartFlashRedLedTask(void const * argument)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFlashRedLedTask */
	TickType_t TaskTimeStamp;
	TickType_t DelayTimeMsec = 1000;
 8001264:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001268:	60fb      	str	r3, [r7, #12]
	TaskTimeStamp = xTaskGetTickCount();
 800126a:	f002 ffb9 	bl	80041e0 <xTaskGetTickCount>
 800126e:	4603      	mov	r3, r0
 8001270:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, red);
 8001272:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001276:	480a      	ldr	r0, [pc, #40]	; (80012a0 <StartFlashRedLedTask+0x44>)
 8001278:	f000 fd33 	bl	8001ce2 <HAL_GPIO_TogglePin>
	  vTaskDelayUntil(&TaskTimeStamp, DelayTimeMsec);
 800127c:	f107 0308 	add.w	r3, r7, #8
 8001280:	68f9      	ldr	r1, [r7, #12]
 8001282:	4618      	mov	r0, r3
 8001284:	f002 fe2a 	bl	8003edc <vTaskDelayUntil>
	  HAL_GPIO_TogglePin(GPIOD, red);
 8001288:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <StartFlashRedLedTask+0x44>)
 800128e:	f000 fd28 	bl	8001ce2 <HAL_GPIO_TogglePin>
	  vTaskDelayUntil(&TaskTimeStamp, DelayTimeMsec);
 8001292:	f107 0308 	add.w	r3, r7, #8
 8001296:	68f9      	ldr	r1, [r7, #12]
 8001298:	4618      	mov	r0, r3
 800129a:	f002 fe1f 	bl	8003edc <vTaskDelayUntil>
	  HAL_GPIO_TogglePin(GPIOD, red);
 800129e:	e7e8      	b.n	8001272 <StartFlashRedLedTask+0x16>
 80012a0:	40020c00 	.word	0x40020c00

080012a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d101      	bne.n	80012ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012b6:	f000 fa77 	bl	80017a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40010000 	.word	0x40010000

080012c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_MspInit+0x54>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	4a11      	ldr	r2, [pc, #68]	; (800132c <HAL_MspInit+0x54>)
 80012e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ec:	6453      	str	r3, [r2, #68]	; 0x44
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_MspInit+0x54>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	603b      	str	r3, [r7, #0]
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <HAL_MspInit+0x54>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	4a0a      	ldr	r2, [pc, #40]	; (800132c <HAL_MspInit+0x54>)
 8001304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001308:	6413      	str	r3, [r2, #64]	; 0x40
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <HAL_MspInit+0x54>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	210f      	movs	r1, #15
 800131a:	f06f 0001 	mvn.w	r0, #1
 800131e:	f000 fb1b 	bl	8001958 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800

08001330 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	; 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a19      	ldr	r2, [pc, #100]	; (80013b4 <HAL_I2C_MspInit+0x84>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d12c      	bne.n	80013ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <HAL_I2C_MspInit+0x88>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a17      	ldr	r2, [pc, #92]	; (80013b8 <HAL_I2C_MspInit+0x88>)
 800135c:	f043 0302 	orr.w	r3, r3, #2
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <HAL_I2C_MspInit+0x88>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800136e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001374:	2312      	movs	r3, #18
 8001376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001378:	2301      	movs	r3, #1
 800137a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001380:	2304      	movs	r3, #4
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4619      	mov	r1, r3
 800138a:	480c      	ldr	r0, [pc, #48]	; (80013bc <HAL_I2C_MspInit+0x8c>)
 800138c:	f000 fb0e 	bl	80019ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <HAL_I2C_MspInit+0x88>)
 8001396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001398:	4a07      	ldr	r2, [pc, #28]	; (80013b8 <HAL_I2C_MspInit+0x88>)
 800139a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800139e:	6413      	str	r3, [r2, #64]	; 0x40
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <HAL_I2C_MspInit+0x88>)
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013ac:	bf00      	nop
 80013ae:	3728      	adds	r7, #40	; 0x28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40005400 	.word	0x40005400
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020400 	.word	0x40020400

080013c0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08e      	sub	sp, #56	; 0x38
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a59      	ldr	r2, [pc, #356]	; (8001544 <HAL_I2S_MspInit+0x184>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d15b      	bne.n	800149a <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	623b      	str	r3, [r7, #32]
 80013e6:	4b58      	ldr	r3, [pc, #352]	; (8001548 <HAL_I2S_MspInit+0x188>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	4a57      	ldr	r2, [pc, #348]	; (8001548 <HAL_I2S_MspInit+0x188>)
 80013ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f0:	6413      	str	r3, [r2, #64]	; 0x40
 80013f2:	4b55      	ldr	r3, [pc, #340]	; (8001548 <HAL_I2S_MspInit+0x188>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fa:	623b      	str	r3, [r7, #32]
 80013fc:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	4b51      	ldr	r3, [pc, #324]	; (8001548 <HAL_I2S_MspInit+0x188>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a50      	ldr	r2, [pc, #320]	; (8001548 <HAL_I2S_MspInit+0x188>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b4e      	ldr	r3, [pc, #312]	; (8001548 <HAL_I2S_MspInit+0x188>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	61bb      	str	r3, [r7, #24]
 800141e:	4b4a      	ldr	r3, [pc, #296]	; (8001548 <HAL_I2S_MspInit+0x188>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a49      	ldr	r2, [pc, #292]	; (8001548 <HAL_I2S_MspInit+0x188>)
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b47      	ldr	r3, [pc, #284]	; (8001548 <HAL_I2S_MspInit+0x188>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	61bb      	str	r3, [r7, #24]
 8001434:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001436:	2304      	movs	r3, #4
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001446:	2306      	movs	r3, #6
 8001448:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144e:	4619      	mov	r1, r3
 8001450:	483e      	ldr	r0, [pc, #248]	; (800154c <HAL_I2S_MspInit+0x18c>)
 8001452:	f000 faab 	bl	80019ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001456:	2308      	movs	r3, #8
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001466:	2305      	movs	r3, #5
 8001468:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146e:	4619      	mov	r1, r3
 8001470:	4836      	ldr	r0, [pc, #216]	; (800154c <HAL_I2S_MspInit+0x18c>)
 8001472:	f000 fa9b 	bl	80019ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001476:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147c:	2302      	movs	r3, #2
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001484:	2300      	movs	r3, #0
 8001486:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001488:	2305      	movs	r3, #5
 800148a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001490:	4619      	mov	r1, r3
 8001492:	482f      	ldr	r0, [pc, #188]	; (8001550 <HAL_I2S_MspInit+0x190>)
 8001494:	f000 fa8a 	bl	80019ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001498:	e04f      	b.n	800153a <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a2d      	ldr	r2, [pc, #180]	; (8001554 <HAL_I2S_MspInit+0x194>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d14a      	bne.n	800153a <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	4b27      	ldr	r3, [pc, #156]	; (8001548 <HAL_I2S_MspInit+0x188>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	4a26      	ldr	r2, [pc, #152]	; (8001548 <HAL_I2S_MspInit+0x188>)
 80014ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014b2:	6413      	str	r3, [r2, #64]	; 0x40
 80014b4:	4b24      	ldr	r3, [pc, #144]	; (8001548 <HAL_I2S_MspInit+0x188>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c0:	2300      	movs	r3, #0
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	4b20      	ldr	r3, [pc, #128]	; (8001548 <HAL_I2S_MspInit+0x188>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	4a1f      	ldr	r2, [pc, #124]	; (8001548 <HAL_I2S_MspInit+0x188>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	6313      	str	r3, [r2, #48]	; 0x30
 80014d0:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <HAL_I2S_MspInit+0x188>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	4b19      	ldr	r3, [pc, #100]	; (8001548 <HAL_I2S_MspInit+0x188>)
 80014e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e4:	4a18      	ldr	r2, [pc, #96]	; (8001548 <HAL_I2S_MspInit+0x188>)
 80014e6:	f043 0304 	orr.w	r3, r3, #4
 80014ea:	6313      	str	r3, [r2, #48]	; 0x30
 80014ec:	4b16      	ldr	r3, [pc, #88]	; (8001548 <HAL_I2S_MspInit+0x188>)
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80014f8:	2310      	movs	r3, #16
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001508:	2306      	movs	r3, #6
 800150a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800150c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001510:	4619      	mov	r1, r3
 8001512:	4811      	ldr	r0, [pc, #68]	; (8001558 <HAL_I2S_MspInit+0x198>)
 8001514:	f000 fa4a 	bl	80019ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001518:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800152a:	2306      	movs	r3, #6
 800152c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800152e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001532:	4619      	mov	r1, r3
 8001534:	4805      	ldr	r0, [pc, #20]	; (800154c <HAL_I2S_MspInit+0x18c>)
 8001536:	f000 fa39 	bl	80019ac <HAL_GPIO_Init>
}
 800153a:	bf00      	nop
 800153c:	3738      	adds	r7, #56	; 0x38
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40003800 	.word	0x40003800
 8001548:	40023800 	.word	0x40023800
 800154c:	40020800 	.word	0x40020800
 8001550:	40020400 	.word	0x40020400
 8001554:	40003c00 	.word	0x40003c00
 8001558:	40020000 	.word	0x40020000

0800155c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a19      	ldr	r2, [pc, #100]	; (80015e0 <HAL_SPI_MspInit+0x84>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d12b      	bne.n	80015d6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <HAL_SPI_MspInit+0x88>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	4a17      	ldr	r2, [pc, #92]	; (80015e4 <HAL_SPI_MspInit+0x88>)
 8001588:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800158c:	6453      	str	r3, [r2, #68]	; 0x44
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_SPI_MspInit+0x88>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <HAL_SPI_MspInit+0x88>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a10      	ldr	r2, [pc, #64]	; (80015e4 <HAL_SPI_MspInit+0x88>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <HAL_SPI_MspInit+0x88>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80015b6:	23e0      	movs	r3, #224	; 0xe0
 80015b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	2302      	movs	r3, #2
 80015bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c2:	2303      	movs	r3, #3
 80015c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015c6:	2305      	movs	r3, #5
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	4619      	mov	r1, r3
 80015d0:	4805      	ldr	r0, [pc, #20]	; (80015e8 <HAL_SPI_MspInit+0x8c>)
 80015d2:	f000 f9eb 	bl	80019ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015d6:	bf00      	nop
 80015d8:	3728      	adds	r7, #40	; 0x28
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40013000 	.word	0x40013000
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40020000 	.word	0x40020000

080015ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08c      	sub	sp, #48	; 0x30
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80015fc:	2200      	movs	r2, #0
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	2019      	movs	r0, #25
 8001602:	f000 f9a9 	bl	8001958 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8001606:	2019      	movs	r0, #25
 8001608:	f000 f9c2 	bl	8001990 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	4b1e      	ldr	r3, [pc, #120]	; (800168c <HAL_InitTick+0xa0>)
 8001612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001614:	4a1d      	ldr	r2, [pc, #116]	; (800168c <HAL_InitTick+0xa0>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	6453      	str	r3, [r2, #68]	; 0x44
 800161c:	4b1b      	ldr	r3, [pc, #108]	; (800168c <HAL_InitTick+0xa0>)
 800161e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001628:	f107 0210 	add.w	r2, r7, #16
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4611      	mov	r1, r2
 8001632:	4618      	mov	r0, r3
 8001634:	f001 fdaa 	bl	800318c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001638:	f001 fd94 	bl	8003164 <HAL_RCC_GetPCLK2Freq>
 800163c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800163e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001640:	4a13      	ldr	r2, [pc, #76]	; (8001690 <HAL_InitTick+0xa4>)
 8001642:	fba2 2303 	umull	r2, r3, r2, r3
 8001646:	0c9b      	lsrs	r3, r3, #18
 8001648:	3b01      	subs	r3, #1
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <HAL_InitTick+0xa8>)
 800164e:	4a12      	ldr	r2, [pc, #72]	; (8001698 <HAL_InitTick+0xac>)
 8001650:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <HAL_InitTick+0xa8>)
 8001654:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001658:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800165a:	4a0e      	ldr	r2, [pc, #56]	; (8001694 <HAL_InitTick+0xa8>)
 800165c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800165e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <HAL_InitTick+0xa8>)
 8001662:	2200      	movs	r2, #0
 8001664:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <HAL_InitTick+0xa8>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800166c:	4809      	ldr	r0, [pc, #36]	; (8001694 <HAL_InitTick+0xa8>)
 800166e:	f001 ff71 	bl	8003554 <HAL_TIM_Base_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d104      	bne.n	8001682 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001678:	4806      	ldr	r0, [pc, #24]	; (8001694 <HAL_InitTick+0xa8>)
 800167a:	f001 ffa0 	bl	80035be <HAL_TIM_Base_Start_IT>
 800167e:	4603      	mov	r3, r0
 8001680:	e000      	b.n	8001684 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
}
 8001684:	4618      	mov	r0, r3
 8001686:	3730      	adds	r7, #48	; 0x30
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40023800 	.word	0x40023800
 8001690:	431bde83 	.word	0x431bde83
 8001694:	20004110 	.word	0x20004110
 8001698:	40010000 	.word	0x40010000

0800169c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ae:	e7fe      	b.n	80016ae <HardFault_Handler+0x4>

080016b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <MemManage_Handler+0x4>

080016b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ba:	e7fe      	b.n	80016ba <BusFault_Handler+0x4>

080016bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <UsageFault_Handler+0x4>

080016c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016d4:	4802      	ldr	r0, [pc, #8]	; (80016e0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80016d6:	f001 ff96 	bl	8003606 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20004110 	.word	0x20004110

080016e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <SystemInit+0x28>)
 80016ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ee:	4a07      	ldr	r2, [pc, #28]	; (800170c <SystemInit+0x28>)
 80016f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <SystemInit+0x28>)
 80016fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016fe:	609a      	str	r2, [r3, #8]
#endif
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001748 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001714:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001716:	e003      	b.n	8001720 <LoopCopyDataInit>

08001718 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800171a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800171c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800171e:	3104      	adds	r1, #4

08001720 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001720:	480b      	ldr	r0, [pc, #44]	; (8001750 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001724:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001726:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001728:	d3f6      	bcc.n	8001718 <CopyDataInit>
  ldr  r2, =_sbss
 800172a:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800172c:	e002      	b.n	8001734 <LoopFillZerobss>

0800172e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800172e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001730:	f842 3b04 	str.w	r3, [r2], #4

08001734 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001736:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001738:	d3f9      	bcc.n	800172e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800173a:	f7ff ffd3 	bl	80016e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800173e:	f003 fb8f 	bl	8004e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001742:	f7ff fad5 	bl	8000cf0 <main>
  bx  lr    
 8001746:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001748:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800174c:	08004f58 	.word	0x08004f58
  ldr  r0, =_sdata
 8001750:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001754:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001758:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 800175c:	20004154 	.word	0x20004154

08001760 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001760:	e7fe      	b.n	8001760 <ADC_IRQHandler>
	...

08001764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001768:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <HAL_Init+0x40>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <HAL_Init+0x40>)
 800176e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001772:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_Init+0x40>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0a      	ldr	r2, [pc, #40]	; (80017a4 <HAL_Init+0x40>)
 800177a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800177e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <HAL_Init+0x40>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a07      	ldr	r2, [pc, #28]	; (80017a4 <HAL_Init+0x40>)
 8001786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800178a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800178c:	2003      	movs	r0, #3
 800178e:	f000 f8d8 	bl	8001942 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001792:	2000      	movs	r0, #0
 8001794:	f7ff ff2a 	bl	80015ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001798:	f7ff fd9e 	bl	80012d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40023c00 	.word	0x40023c00

080017a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_IncTick+0x20>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_IncTick+0x24>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	4a04      	ldr	r2, [pc, #16]	; (80017cc <HAL_IncTick+0x24>)
 80017ba:	6013      	str	r3, [r2, #0]
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20000008 	.word	0x20000008
 80017cc:	20004150 	.word	0x20004150

080017d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return uwTick;
 80017d4:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <HAL_GetTick+0x14>)
 80017d6:	681b      	ldr	r3, [r3, #0]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20004150 	.word	0x20004150

080017e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001804:	4013      	ands	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001810:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181a:	4a04      	ldr	r2, [pc, #16]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	60d3      	str	r3, [r2, #12]
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <__NVIC_GetPriorityGrouping+0x18>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	f003 0307 	and.w	r3, r3, #7
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	2b00      	cmp	r3, #0
 800185c:	db0b      	blt.n	8001876 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	f003 021f 	and.w	r2, r3, #31
 8001864:	4907      	ldr	r1, [pc, #28]	; (8001884 <__NVIC_EnableIRQ+0x38>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	095b      	lsrs	r3, r3, #5
 800186c:	2001      	movs	r0, #1
 800186e:	fa00 f202 	lsl.w	r2, r0, r2
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000e100 	.word	0xe000e100

08001888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	6039      	str	r1, [r7, #0]
 8001892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001898:	2b00      	cmp	r3, #0
 800189a:	db0a      	blt.n	80018b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	490c      	ldr	r1, [pc, #48]	; (80018d4 <__NVIC_SetPriority+0x4c>)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	0112      	lsls	r2, r2, #4
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	440b      	add	r3, r1
 80018ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b0:	e00a      	b.n	80018c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4908      	ldr	r1, [pc, #32]	; (80018d8 <__NVIC_SetPriority+0x50>)
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	3b04      	subs	r3, #4
 80018c0:	0112      	lsls	r2, r2, #4
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	440b      	add	r3, r1
 80018c6:	761a      	strb	r2, [r3, #24]
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000e100 	.word	0xe000e100
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018dc:	b480      	push	{r7}
 80018de:	b089      	sub	sp, #36	; 0x24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f1c3 0307 	rsb	r3, r3, #7
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	bf28      	it	cs
 80018fa:	2304      	movcs	r3, #4
 80018fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3304      	adds	r3, #4
 8001902:	2b06      	cmp	r3, #6
 8001904:	d902      	bls.n	800190c <NVIC_EncodePriority+0x30>
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3b03      	subs	r3, #3
 800190a:	e000      	b.n	800190e <NVIC_EncodePriority+0x32>
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	f04f 32ff 	mov.w	r2, #4294967295
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43da      	mvns	r2, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	401a      	ands	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001924:	f04f 31ff 	mov.w	r1, #4294967295
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fa01 f303 	lsl.w	r3, r1, r3
 800192e:	43d9      	mvns	r1, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	4313      	orrs	r3, r2
         );
}
 8001936:	4618      	mov	r0, r3
 8001938:	3724      	adds	r7, #36	; 0x24
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff ff4c 	bl	80017e8 <__NVIC_SetPriorityGrouping>
}
 8001950:	bf00      	nop
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800196a:	f7ff ff61 	bl	8001830 <__NVIC_GetPriorityGrouping>
 800196e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	68b9      	ldr	r1, [r7, #8]
 8001974:	6978      	ldr	r0, [r7, #20]
 8001976:	f7ff ffb1 	bl	80018dc <NVIC_EncodePriority>
 800197a:	4602      	mov	r2, r0
 800197c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001980:	4611      	mov	r1, r2
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff ff80 	bl	8001888 <__NVIC_SetPriority>
}
 8001988:	bf00      	nop
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff ff54 	bl	800184c <__NVIC_EnableIRQ>
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019be:	2300      	movs	r3, #0
 80019c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
 80019c6:	e159      	b.n	8001c7c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019c8:	2201      	movs	r2, #1
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	f040 8148 	bne.w	8001c76 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d00b      	beq.n	8001a06 <HAL_GPIO_Init+0x5a>
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d007      	beq.n	8001a06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019fa:	2b11      	cmp	r3, #17
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b12      	cmp	r3, #18
 8001a04:	d130      	bne.n	8001a68 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	2203      	movs	r2, #3
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	f003 0201 	and.w	r2, r3, #1
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2203      	movs	r2, #3
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_Init+0xfc>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b12      	cmp	r3, #18
 8001aa6:	d123      	bne.n	8001af0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	08da      	lsrs	r2, r3, #3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3208      	adds	r2, #8
 8001ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	220f      	movs	r2, #15
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	08da      	lsrs	r2, r3, #3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3208      	adds	r2, #8
 8001aea:	69b9      	ldr	r1, [r7, #24]
 8001aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	2203      	movs	r2, #3
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 0203 	and.w	r2, r3, #3
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80a2 	beq.w	8001c76 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	4b56      	ldr	r3, [pc, #344]	; (8001c90 <HAL_GPIO_Init+0x2e4>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	4a55      	ldr	r2, [pc, #340]	; (8001c90 <HAL_GPIO_Init+0x2e4>)
 8001b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b40:	6453      	str	r3, [r2, #68]	; 0x44
 8001b42:	4b53      	ldr	r3, [pc, #332]	; (8001c90 <HAL_GPIO_Init+0x2e4>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b4e:	4a51      	ldr	r2, [pc, #324]	; (8001c94 <HAL_GPIO_Init+0x2e8>)
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	089b      	lsrs	r3, r3, #2
 8001b54:	3302      	adds	r3, #2
 8001b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	220f      	movs	r2, #15
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a48      	ldr	r2, [pc, #288]	; (8001c98 <HAL_GPIO_Init+0x2ec>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d019      	beq.n	8001bae <HAL_GPIO_Init+0x202>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a47      	ldr	r2, [pc, #284]	; (8001c9c <HAL_GPIO_Init+0x2f0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d013      	beq.n	8001baa <HAL_GPIO_Init+0x1fe>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a46      	ldr	r2, [pc, #280]	; (8001ca0 <HAL_GPIO_Init+0x2f4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d00d      	beq.n	8001ba6 <HAL_GPIO_Init+0x1fa>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a45      	ldr	r2, [pc, #276]	; (8001ca4 <HAL_GPIO_Init+0x2f8>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d007      	beq.n	8001ba2 <HAL_GPIO_Init+0x1f6>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a44      	ldr	r2, [pc, #272]	; (8001ca8 <HAL_GPIO_Init+0x2fc>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d101      	bne.n	8001b9e <HAL_GPIO_Init+0x1f2>
 8001b9a:	2304      	movs	r3, #4
 8001b9c:	e008      	b.n	8001bb0 <HAL_GPIO_Init+0x204>
 8001b9e:	2307      	movs	r3, #7
 8001ba0:	e006      	b.n	8001bb0 <HAL_GPIO_Init+0x204>
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e004      	b.n	8001bb0 <HAL_GPIO_Init+0x204>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e002      	b.n	8001bb0 <HAL_GPIO_Init+0x204>
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <HAL_GPIO_Init+0x204>
 8001bae:	2300      	movs	r3, #0
 8001bb0:	69fa      	ldr	r2, [r7, #28]
 8001bb2:	f002 0203 	and.w	r2, r2, #3
 8001bb6:	0092      	lsls	r2, r2, #2
 8001bb8:	4093      	lsls	r3, r2
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bc0:	4934      	ldr	r1, [pc, #208]	; (8001c94 <HAL_GPIO_Init+0x2e8>)
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	089b      	lsrs	r3, r3, #2
 8001bc6:	3302      	adds	r3, #2
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bce:	4b37      	ldr	r3, [pc, #220]	; (8001cac <HAL_GPIO_Init+0x300>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bf2:	4a2e      	ldr	r2, [pc, #184]	; (8001cac <HAL_GPIO_Init+0x300>)
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bf8:	4b2c      	ldr	r3, [pc, #176]	; (8001cac <HAL_GPIO_Init+0x300>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c1c:	4a23      	ldr	r2, [pc, #140]	; (8001cac <HAL_GPIO_Init+0x300>)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c22:	4b22      	ldr	r3, [pc, #136]	; (8001cac <HAL_GPIO_Init+0x300>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c46:	4a19      	ldr	r2, [pc, #100]	; (8001cac <HAL_GPIO_Init+0x300>)
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c4c:	4b17      	ldr	r3, [pc, #92]	; (8001cac <HAL_GPIO_Init+0x300>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c70:	4a0e      	ldr	r2, [pc, #56]	; (8001cac <HAL_GPIO_Init+0x300>)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	61fb      	str	r3, [r7, #28]
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	2b0f      	cmp	r3, #15
 8001c80:	f67f aea2 	bls.w	80019c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c84:	bf00      	nop
 8001c86:	3724      	adds	r7, #36	; 0x24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40013800 	.word	0x40013800
 8001c98:	40020000 	.word	0x40020000
 8001c9c:	40020400 	.word	0x40020400
 8001ca0:	40020800 	.word	0x40020800
 8001ca4:	40020c00 	.word	0x40020c00
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40013c00 	.word	0x40013c00

08001cb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	807b      	strh	r3, [r7, #2]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cc0:	787b      	ldrb	r3, [r7, #1]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cc6:	887a      	ldrh	r2, [r7, #2]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ccc:	e003      	b.n	8001cd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cce:	887b      	ldrh	r3, [r7, #2]
 8001cd0:	041a      	lsls	r2, r3, #16
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	619a      	str	r2, [r3, #24]
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	460b      	mov	r3, r1
 8001cec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	695a      	ldr	r2, [r3, #20]
 8001cf2:	887b      	ldrh	r3, [r7, #2]
 8001cf4:	401a      	ands	r2, r3
 8001cf6:	887b      	ldrh	r3, [r7, #2]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d104      	bne.n	8001d06 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001cfc:	887b      	ldrh	r3, [r7, #2]
 8001cfe:	041a      	lsls	r2, r3, #16
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001d04:	e002      	b.n	8001d0c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001d06:	887a      	ldrh	r2, [r7, #2]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	619a      	str	r2, [r3, #24]
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e11f      	b.n	8001f6a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d106      	bne.n	8001d44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff faf6 	bl	8001330 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2224      	movs	r2, #36	; 0x24
 8001d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0201 	bic.w	r2, r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d7c:	f001 f9de 	bl	800313c <HAL_RCC_GetPCLK1Freq>
 8001d80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	4a7b      	ldr	r2, [pc, #492]	; (8001f74 <HAL_I2C_Init+0x25c>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d807      	bhi.n	8001d9c <HAL_I2C_Init+0x84>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4a7a      	ldr	r2, [pc, #488]	; (8001f78 <HAL_I2C_Init+0x260>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	bf94      	ite	ls
 8001d94:	2301      	movls	r3, #1
 8001d96:	2300      	movhi	r3, #0
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	e006      	b.n	8001daa <HAL_I2C_Init+0x92>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4a77      	ldr	r2, [pc, #476]	; (8001f7c <HAL_I2C_Init+0x264>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	bf94      	ite	ls
 8001da4:	2301      	movls	r3, #1
 8001da6:	2300      	movhi	r3, #0
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e0db      	b.n	8001f6a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4a72      	ldr	r2, [pc, #456]	; (8001f80 <HAL_I2C_Init+0x268>)
 8001db6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dba:	0c9b      	lsrs	r3, r3, #18
 8001dbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	4a64      	ldr	r2, [pc, #400]	; (8001f74 <HAL_I2C_Init+0x25c>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d802      	bhi.n	8001dec <HAL_I2C_Init+0xd4>
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	3301      	adds	r3, #1
 8001dea:	e009      	b.n	8001e00 <HAL_I2C_Init+0xe8>
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001df2:	fb02 f303 	mul.w	r3, r2, r3
 8001df6:	4a63      	ldr	r2, [pc, #396]	; (8001f84 <HAL_I2C_Init+0x26c>)
 8001df8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfc:	099b      	lsrs	r3, r3, #6
 8001dfe:	3301      	adds	r3, #1
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	6812      	ldr	r2, [r2, #0]
 8001e04:	430b      	orrs	r3, r1
 8001e06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	4956      	ldr	r1, [pc, #344]	; (8001f74 <HAL_I2C_Init+0x25c>)
 8001e1c:	428b      	cmp	r3, r1
 8001e1e:	d80d      	bhi.n	8001e3c <HAL_I2C_Init+0x124>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	1e59      	subs	r1, r3, #1
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e2e:	3301      	adds	r3, #1
 8001e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e34:	2b04      	cmp	r3, #4
 8001e36:	bf38      	it	cc
 8001e38:	2304      	movcc	r3, #4
 8001e3a:	e04f      	b.n	8001edc <HAL_I2C_Init+0x1c4>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d111      	bne.n	8001e68 <HAL_I2C_Init+0x150>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	1e58      	subs	r0, r3, #1
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6859      	ldr	r1, [r3, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	440b      	add	r3, r1
 8001e52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e56:	3301      	adds	r3, #1
 8001e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	bf0c      	ite	eq
 8001e60:	2301      	moveq	r3, #1
 8001e62:	2300      	movne	r3, #0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	e012      	b.n	8001e8e <HAL_I2C_Init+0x176>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	1e58      	subs	r0, r3, #1
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6859      	ldr	r1, [r3, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	0099      	lsls	r1, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e7e:	3301      	adds	r3, #1
 8001e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	bf0c      	ite	eq
 8001e88:	2301      	moveq	r3, #1
 8001e8a:	2300      	movne	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <HAL_I2C_Init+0x17e>
 8001e92:	2301      	movs	r3, #1
 8001e94:	e022      	b.n	8001edc <HAL_I2C_Init+0x1c4>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10e      	bne.n	8001ebc <HAL_I2C_Init+0x1a4>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	1e58      	subs	r0, r3, #1
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6859      	ldr	r1, [r3, #4]
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	440b      	add	r3, r1
 8001eac:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eba:	e00f      	b.n	8001edc <HAL_I2C_Init+0x1c4>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	1e58      	subs	r0, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6859      	ldr	r1, [r3, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	0099      	lsls	r1, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	6809      	ldr	r1, [r1, #0]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69da      	ldr	r2, [r3, #28]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6911      	ldr	r1, [r2, #16]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	68d2      	ldr	r2, [r2, #12]
 8001f16:	4311      	orrs	r1, r2
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	430b      	orrs	r3, r1
 8001f1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695a      	ldr	r2, [r3, #20]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0201 	orr.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2220      	movs	r2, #32
 8001f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	000186a0 	.word	0x000186a0
 8001f78:	001e847f 	.word	0x001e847f
 8001f7c:	003d08ff 	.word	0x003d08ff
 8001f80:	431bde83 	.word	0x431bde83
 8001f84:	10624dd3 	.word	0x10624dd3

08001f88 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e128      	b.n	80021ec <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d109      	bne.n	8001fba <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a90      	ldr	r2, [pc, #576]	; (80021f4 <HAL_I2S_Init+0x26c>)
 8001fb2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff fa03 	bl	80013c0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001fd0:	f023 030f 	bic.w	r3, r3, #15
 8001fd4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d060      	beq.n	80020a8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d102      	bne.n	8001ff4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001fee:	2310      	movs	r3, #16
 8001ff0:	617b      	str	r3, [r7, #20]
 8001ff2:	e001      	b.n	8001ff8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001ff4:	2320      	movs	r3, #32
 8001ff6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	d802      	bhi.n	8002006 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002006:	2001      	movs	r0, #1
 8002008:	f001 f9e2 	bl	80033d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800200c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002016:	d125      	bne.n	8002064 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d010      	beq.n	8002042 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	fbb2 f2f3 	udiv	r2, r2, r3
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	461a      	mov	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	fbb2 f3f3 	udiv	r3, r2, r3
 800203c:	3305      	adds	r3, #5
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	e01f      	b.n	8002082 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	fbb2 f2f3 	udiv	r2, r2, r3
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	461a      	mov	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	fbb2 f3f3 	udiv	r3, r2, r3
 800205e:	3305      	adds	r3, #5
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	e00e      	b.n	8002082 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	fbb2 f2f3 	udiv	r2, r2, r3
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	461a      	mov	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	fbb2 f3f3 	udiv	r3, r2, r3
 800207e:	3305      	adds	r3, #5
 8002080:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4a5c      	ldr	r2, [pc, #368]	; (80021f8 <HAL_I2S_Init+0x270>)
 8002086:	fba2 2303 	umull	r2, r3, r2, r3
 800208a:	08db      	lsrs	r3, r3, #3
 800208c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	085b      	lsrs	r3, r3, #1
 800209e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	021b      	lsls	r3, r3, #8
 80020a4:	61bb      	str	r3, [r7, #24]
 80020a6:	e003      	b.n	80020b0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80020a8:	2302      	movs	r3, #2
 80020aa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d902      	bls.n	80020bc <HAL_I2S_Init+0x134>
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	2bff      	cmp	r3, #255	; 0xff
 80020ba:	d907      	bls.n	80020cc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c0:	f043 0210 	orr.w	r2, r3, #16
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e08f      	b.n	80021ec <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	ea42 0103 	orr.w	r1, r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	69fa      	ldr	r2, [r7, #28]
 80020dc:	430a      	orrs	r2, r1
 80020de:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80020ea:	f023 030f 	bic.w	r3, r3, #15
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6851      	ldr	r1, [r2, #4]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6892      	ldr	r2, [r2, #8]
 80020f6:	4311      	orrs	r1, r2
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	68d2      	ldr	r2, [r2, #12]
 80020fc:	4311      	orrs	r1, r2
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6992      	ldr	r2, [r2, #24]
 8002102:	430a      	orrs	r2, r1
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800210e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d161      	bne.n	80021dc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a38      	ldr	r2, [pc, #224]	; (80021fc <HAL_I2S_Init+0x274>)
 800211c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a37      	ldr	r2, [pc, #220]	; (8002200 <HAL_I2S_Init+0x278>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d101      	bne.n	800212c <HAL_I2S_Init+0x1a4>
 8002128:	4b36      	ldr	r3, [pc, #216]	; (8002204 <HAL_I2S_Init+0x27c>)
 800212a:	e001      	b.n	8002130 <HAL_I2S_Init+0x1a8>
 800212c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	4932      	ldr	r1, [pc, #200]	; (8002200 <HAL_I2S_Init+0x278>)
 8002138:	428a      	cmp	r2, r1
 800213a:	d101      	bne.n	8002140 <HAL_I2S_Init+0x1b8>
 800213c:	4a31      	ldr	r2, [pc, #196]	; (8002204 <HAL_I2S_Init+0x27c>)
 800213e:	e001      	b.n	8002144 <HAL_I2S_Init+0x1bc>
 8002140:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002144:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002148:	f023 030f 	bic.w	r3, r3, #15
 800214c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a2b      	ldr	r2, [pc, #172]	; (8002200 <HAL_I2S_Init+0x278>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d101      	bne.n	800215c <HAL_I2S_Init+0x1d4>
 8002158:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <HAL_I2S_Init+0x27c>)
 800215a:	e001      	b.n	8002160 <HAL_I2S_Init+0x1d8>
 800215c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002160:	2202      	movs	r2, #2
 8002162:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a25      	ldr	r2, [pc, #148]	; (8002200 <HAL_I2S_Init+0x278>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d101      	bne.n	8002172 <HAL_I2S_Init+0x1ea>
 800216e:	4b25      	ldr	r3, [pc, #148]	; (8002204 <HAL_I2S_Init+0x27c>)
 8002170:	e001      	b.n	8002176 <HAL_I2S_Init+0x1ee>
 8002172:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002182:	d003      	beq.n	800218c <HAL_I2S_Init+0x204>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d103      	bne.n	8002194 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800218c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	e001      	b.n	8002198 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002194:	2300      	movs	r3, #0
 8002196:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	b299      	uxth	r1, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80021ae:	4303      	orrs	r3, r0
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	430b      	orrs	r3, r1
 80021b4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80021b6:	4313      	orrs	r3, r2
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	897b      	ldrh	r3, [r7, #10]
 80021bc:	4313      	orrs	r3, r2
 80021be:	b29b      	uxth	r3, r3
 80021c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021c4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a0d      	ldr	r2, [pc, #52]	; (8002200 <HAL_I2S_Init+0x278>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d101      	bne.n	80021d4 <HAL_I2S_Init+0x24c>
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <HAL_I2S_Init+0x27c>)
 80021d2:	e001      	b.n	80021d8 <HAL_I2S_Init+0x250>
 80021d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021d8:	897a      	ldrh	r2, [r7, #10]
 80021da:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3720      	adds	r7, #32
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	080022ff 	.word	0x080022ff
 80021f8:	cccccccd 	.word	0xcccccccd
 80021fc:	08002415 	.word	0x08002415
 8002200:	40003800 	.word	0x40003800
 8002204:	40003400 	.word	0x40003400

08002208 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	881a      	ldrh	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	1c9a      	adds	r2, r3, #2
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002266:	b29b      	uxth	r3, r3
 8002268:	3b01      	subs	r3, #1
 800226a:	b29a      	uxth	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002274:	b29b      	uxth	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10e      	bne.n	8002298 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002288:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff ffb8 	bl	8002208 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b2:	b292      	uxth	r2, r2
 80022b4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ba:	1c9a      	adds	r2, r3, #2
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	3b01      	subs	r3, #1
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10e      	bne.n	80022f6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022e6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff ff93 	bl	800221c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b086      	sub	sp, #24
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b04      	cmp	r3, #4
 8002318:	d13a      	bne.n	8002390 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b01      	cmp	r3, #1
 8002322:	d109      	bne.n	8002338 <I2S_IRQHandler+0x3a>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232e:	2b40      	cmp	r3, #64	; 0x40
 8002330:	d102      	bne.n	8002338 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff ffb4 	bl	80022a0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233e:	2b40      	cmp	r3, #64	; 0x40
 8002340:	d126      	bne.n	8002390 <I2S_IRQHandler+0x92>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 0320 	and.w	r3, r3, #32
 800234c:	2b20      	cmp	r3, #32
 800234e:	d11f      	bne.n	8002390 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800235e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002360:	2300      	movs	r3, #0
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	f043 0202 	orr.w	r2, r3, #2
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7ff ff50 	bl	8002230 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b03      	cmp	r3, #3
 800239a:	d136      	bne.n	800240a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d109      	bne.n	80023ba <I2S_IRQHandler+0xbc>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b0:	2b80      	cmp	r3, #128	; 0x80
 80023b2:	d102      	bne.n	80023ba <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff ff45 	bl	8002244 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d122      	bne.n	800240a <I2S_IRQHandler+0x10c>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 0320 	and.w	r3, r3, #32
 80023ce:	2b20      	cmp	r3, #32
 80023d0:	d11b      	bne.n	800240a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80023e0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fc:	f043 0204 	orr.w	r2, r3, #4
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff ff13 	bl	8002230 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800240a:	bf00      	nop
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4aa2      	ldr	r2, [pc, #648]	; (80026b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d101      	bne.n	8002432 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800242e:	4ba2      	ldr	r3, [pc, #648]	; (80026b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002430:	e001      	b.n	8002436 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002432:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a9b      	ldr	r2, [pc, #620]	; (80026b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d101      	bne.n	8002450 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800244c:	4b9a      	ldr	r3, [pc, #616]	; (80026b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800244e:	e001      	b.n	8002454 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002450:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002460:	d004      	beq.n	800246c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	f040 8099 	bne.w	800259e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b02      	cmp	r3, #2
 8002474:	d107      	bne.n	8002486 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247c:	2b00      	cmp	r3, #0
 800247e:	d002      	beq.n	8002486 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f925 	bl	80026d0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b01      	cmp	r3, #1
 800248e:	d107      	bne.n	80024a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002496:	2b00      	cmp	r3, #0
 8002498:	d002      	beq.n	80024a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f9c8 	bl	8002830 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a6:	2b40      	cmp	r3, #64	; 0x40
 80024a8:	d13a      	bne.n	8002520 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d035      	beq.n	8002520 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a7e      	ldr	r2, [pc, #504]	; (80026b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d101      	bne.n	80024c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80024be:	4b7e      	ldr	r3, [pc, #504]	; (80026b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80024c0:	e001      	b.n	80024c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80024c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4979      	ldr	r1, [pc, #484]	; (80026b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80024ce:	428b      	cmp	r3, r1
 80024d0:	d101      	bne.n	80024d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80024d2:	4b79      	ldr	r3, [pc, #484]	; (80026b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80024d4:	e001      	b.n	80024da <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80024d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80024de:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80024ee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80024f0:	2300      	movs	r3, #0
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002512:	f043 0202 	orr.w	r2, r3, #2
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff fe88 	bl	8002230 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b08      	cmp	r3, #8
 8002528:	f040 80be 	bne.w	80026a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f003 0320 	and.w	r3, r3, #32
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 80b8 	beq.w	80026a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002546:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a59      	ldr	r2, [pc, #356]	; (80026b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d101      	bne.n	8002556 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002552:	4b59      	ldr	r3, [pc, #356]	; (80026b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002554:	e001      	b.n	800255a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002556:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4954      	ldr	r1, [pc, #336]	; (80026b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002562:	428b      	cmp	r3, r1
 8002564:	d101      	bne.n	800256a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002566:	4b54      	ldr	r3, [pc, #336]	; (80026b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002568:	e001      	b.n	800256e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800256a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800256e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002572:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002574:	2300      	movs	r3, #0
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	60bb      	str	r3, [r7, #8]
 8002580:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	f043 0204 	orr.w	r2, r3, #4
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff fe4a 	bl	8002230 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800259c:	e084      	b.n	80026a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d107      	bne.n	80025b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f8be 	bl	8002734 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d107      	bne.n	80025d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d002      	beq.n	80025d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 f8fd 	bl	80027cc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d8:	2b40      	cmp	r3, #64	; 0x40
 80025da:	d12f      	bne.n	800263c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	f003 0320 	and.w	r3, r3, #32
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d02a      	beq.n	800263c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80025f4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a2e      	ldr	r2, [pc, #184]	; (80026b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d101      	bne.n	8002604 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002600:	4b2d      	ldr	r3, [pc, #180]	; (80026b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002602:	e001      	b.n	8002608 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002604:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4929      	ldr	r1, [pc, #164]	; (80026b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002610:	428b      	cmp	r3, r1
 8002612:	d101      	bne.n	8002618 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002614:	4b28      	ldr	r3, [pc, #160]	; (80026b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002616:	e001      	b.n	800261c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002618:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800261c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002620:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	f043 0202 	orr.w	r2, r3, #2
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7ff fdfa 	bl	8002230 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b08      	cmp	r3, #8
 8002644:	d131      	bne.n	80026aa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f003 0320 	and.w	r3, r3, #32
 800264c:	2b00      	cmp	r3, #0
 800264e:	d02c      	beq.n	80026aa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a17      	ldr	r2, [pc, #92]	; (80026b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d101      	bne.n	800265e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800265a:	4b17      	ldr	r3, [pc, #92]	; (80026b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800265c:	e001      	b.n	8002662 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800265e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4912      	ldr	r1, [pc, #72]	; (80026b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800266a:	428b      	cmp	r3, r1
 800266c:	d101      	bne.n	8002672 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800266e:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002670:	e001      	b.n	8002676 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002672:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002676:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800267a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800268a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002698:	f043 0204 	orr.w	r2, r3, #4
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7ff fdc5 	bl	8002230 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80026a6:	e000      	b.n	80026aa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80026a8:	bf00      	nop
}
 80026aa:	bf00      	nop
 80026ac:	3720      	adds	r7, #32
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40003800 	.word	0x40003800
 80026b8:	40003400 	.word	0x40003400

080026bc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	1c99      	adds	r1, r3, #2
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6251      	str	r1, [r2, #36]	; 0x24
 80026e2:	881a      	ldrh	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d113      	bne.n	800272a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002710:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002716:	b29b      	uxth	r3, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	d106      	bne.n	800272a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff ffc9 	bl	80026bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
	...

08002734 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	1c99      	adds	r1, r3, #2
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6251      	str	r1, [r2, #36]	; 0x24
 8002746:	8819      	ldrh	r1, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a1d      	ldr	r2, [pc, #116]	; (80027c4 <I2SEx_TxISR_I2SExt+0x90>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d101      	bne.n	8002756 <I2SEx_TxISR_I2SExt+0x22>
 8002752:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <I2SEx_TxISR_I2SExt+0x94>)
 8002754:	e001      	b.n	800275a <I2SEx_TxISR_I2SExt+0x26>
 8002756:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800275a:	460a      	mov	r2, r1
 800275c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002762:	b29b      	uxth	r3, r3
 8002764:	3b01      	subs	r3, #1
 8002766:	b29a      	uxth	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002770:	b29b      	uxth	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d121      	bne.n	80027ba <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a12      	ldr	r2, [pc, #72]	; (80027c4 <I2SEx_TxISR_I2SExt+0x90>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d101      	bne.n	8002784 <I2SEx_TxISR_I2SExt+0x50>
 8002780:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <I2SEx_TxISR_I2SExt+0x94>)
 8002782:	e001      	b.n	8002788 <I2SEx_TxISR_I2SExt+0x54>
 8002784:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	490d      	ldr	r1, [pc, #52]	; (80027c4 <I2SEx_TxISR_I2SExt+0x90>)
 8002790:	428b      	cmp	r3, r1
 8002792:	d101      	bne.n	8002798 <I2SEx_TxISR_I2SExt+0x64>
 8002794:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <I2SEx_TxISR_I2SExt+0x94>)
 8002796:	e001      	b.n	800279c <I2SEx_TxISR_I2SExt+0x68>
 8002798:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800279c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027a0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d106      	bne.n	80027ba <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff ff81 	bl	80026bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40003800 	.word	0x40003800
 80027c8:	40003400 	.word	0x40003400

080027cc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68d8      	ldr	r0, [r3, #12]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027de:	1c99      	adds	r1, r3, #2
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80027e4:	b282      	uxth	r2, r0
 80027e6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	3b01      	subs	r3, #1
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d113      	bne.n	8002828 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800280e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002814:	b29b      	uxth	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d106      	bne.n	8002828 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff ff4a 	bl	80026bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a20      	ldr	r2, [pc, #128]	; (80028c0 <I2SEx_RxISR_I2SExt+0x90>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d101      	bne.n	8002846 <I2SEx_RxISR_I2SExt+0x16>
 8002842:	4b20      	ldr	r3, [pc, #128]	; (80028c4 <I2SEx_RxISR_I2SExt+0x94>)
 8002844:	e001      	b.n	800284a <I2SEx_RxISR_I2SExt+0x1a>
 8002846:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800284a:	68d8      	ldr	r0, [r3, #12]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002850:	1c99      	adds	r1, r3, #2
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002856:	b282      	uxth	r2, r0
 8002858:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800285e:	b29b      	uxth	r3, r3
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800286c:	b29b      	uxth	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d121      	bne.n	80028b6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a12      	ldr	r2, [pc, #72]	; (80028c0 <I2SEx_RxISR_I2SExt+0x90>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d101      	bne.n	8002880 <I2SEx_RxISR_I2SExt+0x50>
 800287c:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <I2SEx_RxISR_I2SExt+0x94>)
 800287e:	e001      	b.n	8002884 <I2SEx_RxISR_I2SExt+0x54>
 8002880:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	490d      	ldr	r1, [pc, #52]	; (80028c0 <I2SEx_RxISR_I2SExt+0x90>)
 800288c:	428b      	cmp	r3, r1
 800288e:	d101      	bne.n	8002894 <I2SEx_RxISR_I2SExt+0x64>
 8002890:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <I2SEx_RxISR_I2SExt+0x94>)
 8002892:	e001      	b.n	8002898 <I2SEx_RxISR_I2SExt+0x68>
 8002894:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002898:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800289c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d106      	bne.n	80028b6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff ff03 	bl	80026bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40003800 	.word	0x40003800
 80028c4:	40003400 	.word	0x40003400

080028c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e25b      	b.n	8002d92 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d075      	beq.n	80029d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028e6:	4ba3      	ldr	r3, [pc, #652]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 030c 	and.w	r3, r3, #12
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d00c      	beq.n	800290c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028f2:	4ba0      	ldr	r3, [pc, #640]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d112      	bne.n	8002924 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028fe:	4b9d      	ldr	r3, [pc, #628]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800290a:	d10b      	bne.n	8002924 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290c:	4b99      	ldr	r3, [pc, #612]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d05b      	beq.n	80029d0 <HAL_RCC_OscConfig+0x108>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d157      	bne.n	80029d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e236      	b.n	8002d92 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800292c:	d106      	bne.n	800293c <HAL_RCC_OscConfig+0x74>
 800292e:	4b91      	ldr	r3, [pc, #580]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a90      	ldr	r2, [pc, #576]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 8002934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	e01d      	b.n	8002978 <HAL_RCC_OscConfig+0xb0>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002944:	d10c      	bne.n	8002960 <HAL_RCC_OscConfig+0x98>
 8002946:	4b8b      	ldr	r3, [pc, #556]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a8a      	ldr	r2, [pc, #552]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 800294c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	4b88      	ldr	r3, [pc, #544]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a87      	ldr	r2, [pc, #540]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 8002958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	e00b      	b.n	8002978 <HAL_RCC_OscConfig+0xb0>
 8002960:	4b84      	ldr	r3, [pc, #528]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a83      	ldr	r2, [pc, #524]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 8002966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	4b81      	ldr	r3, [pc, #516]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a80      	ldr	r2, [pc, #512]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 8002972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d013      	beq.n	80029a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002980:	f7fe ff26 	bl	80017d0 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002988:	f7fe ff22 	bl	80017d0 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b64      	cmp	r3, #100	; 0x64
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e1fb      	b.n	8002d92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299a:	4b76      	ldr	r3, [pc, #472]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCC_OscConfig+0xc0>
 80029a6:	e014      	b.n	80029d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a8:	f7fe ff12 	bl	80017d0 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029b0:	f7fe ff0e 	bl	80017d0 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b64      	cmp	r3, #100	; 0x64
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e1e7      	b.n	8002d92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029c2:	4b6c      	ldr	r3, [pc, #432]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0xe8>
 80029ce:	e000      	b.n	80029d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d063      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029de:	4b65      	ldr	r3, [pc, #404]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 030c 	and.w	r3, r3, #12
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00b      	beq.n	8002a02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ea:	4b62      	ldr	r3, [pc, #392]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d11c      	bne.n	8002a30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029f6:	4b5f      	ldr	r3, [pc, #380]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d116      	bne.n	8002a30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a02:	4b5c      	ldr	r3, [pc, #368]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d005      	beq.n	8002a1a <HAL_RCC_OscConfig+0x152>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d001      	beq.n	8002a1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e1bb      	b.n	8002d92 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1a:	4b56      	ldr	r3, [pc, #344]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	4952      	ldr	r1, [pc, #328]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a2e:	e03a      	b.n	8002aa6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d020      	beq.n	8002a7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a38:	4b4f      	ldr	r3, [pc, #316]	; (8002b78 <HAL_RCC_OscConfig+0x2b0>)
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3e:	f7fe fec7 	bl	80017d0 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a46:	f7fe fec3 	bl	80017d0 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e19c      	b.n	8002d92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a58:	4b46      	ldr	r3, [pc, #280]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0f0      	beq.n	8002a46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a64:	4b43      	ldr	r3, [pc, #268]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4940      	ldr	r1, [pc, #256]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	600b      	str	r3, [r1, #0]
 8002a78:	e015      	b.n	8002aa6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a7a:	4b3f      	ldr	r3, [pc, #252]	; (8002b78 <HAL_RCC_OscConfig+0x2b0>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a80:	f7fe fea6 	bl	80017d0 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a88:	f7fe fea2 	bl	80017d0 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e17b      	b.n	8002d92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a9a:	4b36      	ldr	r3, [pc, #216]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f0      	bne.n	8002a88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d030      	beq.n	8002b14 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d016      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aba:	4b30      	ldr	r3, [pc, #192]	; (8002b7c <HAL_RCC_OscConfig+0x2b4>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac0:	f7fe fe86 	bl	80017d0 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac8:	f7fe fe82 	bl	80017d0 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e15b      	b.n	8002d92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ada:	4b26      	ldr	r3, [pc, #152]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 8002adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f0      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x200>
 8002ae6:	e015      	b.n	8002b14 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ae8:	4b24      	ldr	r3, [pc, #144]	; (8002b7c <HAL_RCC_OscConfig+0x2b4>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aee:	f7fe fe6f 	bl	80017d0 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002af6:	f7fe fe6b 	bl	80017d0 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e144      	b.n	8002d92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b08:	4b1a      	ldr	r3, [pc, #104]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 8002b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1f0      	bne.n	8002af6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 80a0 	beq.w	8002c62 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b22:	2300      	movs	r3, #0
 8002b24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b26:	4b13      	ldr	r3, [pc, #76]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10f      	bne.n	8002b52 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	4a0e      	ldr	r2, [pc, #56]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 8002b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b40:	6413      	str	r3, [r2, #64]	; 0x40
 8002b42:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <HAL_RCC_OscConfig+0x2ac>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	60bb      	str	r3, [r7, #8]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b52:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <HAL_RCC_OscConfig+0x2b8>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d121      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b5e:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <HAL_RCC_OscConfig+0x2b8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a07      	ldr	r2, [pc, #28]	; (8002b80 <HAL_RCC_OscConfig+0x2b8>)
 8002b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b6a:	f7fe fe31 	bl	80017d0 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b70:	e011      	b.n	8002b96 <HAL_RCC_OscConfig+0x2ce>
 8002b72:	bf00      	nop
 8002b74:	40023800 	.word	0x40023800
 8002b78:	42470000 	.word	0x42470000
 8002b7c:	42470e80 	.word	0x42470e80
 8002b80:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b84:	f7fe fe24 	bl	80017d0 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e0fd      	b.n	8002d92 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b96:	4b81      	ldr	r3, [pc, #516]	; (8002d9c <HAL_RCC_OscConfig+0x4d4>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d106      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x2f0>
 8002baa:	4b7d      	ldr	r3, [pc, #500]	; (8002da0 <HAL_RCC_OscConfig+0x4d8>)
 8002bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bae:	4a7c      	ldr	r2, [pc, #496]	; (8002da0 <HAL_RCC_OscConfig+0x4d8>)
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb6:	e01c      	b.n	8002bf2 <HAL_RCC_OscConfig+0x32a>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b05      	cmp	r3, #5
 8002bbe:	d10c      	bne.n	8002bda <HAL_RCC_OscConfig+0x312>
 8002bc0:	4b77      	ldr	r3, [pc, #476]	; (8002da0 <HAL_RCC_OscConfig+0x4d8>)
 8002bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc4:	4a76      	ldr	r2, [pc, #472]	; (8002da0 <HAL_RCC_OscConfig+0x4d8>)
 8002bc6:	f043 0304 	orr.w	r3, r3, #4
 8002bca:	6713      	str	r3, [r2, #112]	; 0x70
 8002bcc:	4b74      	ldr	r3, [pc, #464]	; (8002da0 <HAL_RCC_OscConfig+0x4d8>)
 8002bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd0:	4a73      	ldr	r2, [pc, #460]	; (8002da0 <HAL_RCC_OscConfig+0x4d8>)
 8002bd2:	f043 0301 	orr.w	r3, r3, #1
 8002bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd8:	e00b      	b.n	8002bf2 <HAL_RCC_OscConfig+0x32a>
 8002bda:	4b71      	ldr	r3, [pc, #452]	; (8002da0 <HAL_RCC_OscConfig+0x4d8>)
 8002bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bde:	4a70      	ldr	r2, [pc, #448]	; (8002da0 <HAL_RCC_OscConfig+0x4d8>)
 8002be0:	f023 0301 	bic.w	r3, r3, #1
 8002be4:	6713      	str	r3, [r2, #112]	; 0x70
 8002be6:	4b6e      	ldr	r3, [pc, #440]	; (8002da0 <HAL_RCC_OscConfig+0x4d8>)
 8002be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bea:	4a6d      	ldr	r2, [pc, #436]	; (8002da0 <HAL_RCC_OscConfig+0x4d8>)
 8002bec:	f023 0304 	bic.w	r3, r3, #4
 8002bf0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d015      	beq.n	8002c26 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bfa:	f7fe fde9 	bl	80017d0 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c00:	e00a      	b.n	8002c18 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c02:	f7fe fde5 	bl	80017d0 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e0bc      	b.n	8002d92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c18:	4b61      	ldr	r3, [pc, #388]	; (8002da0 <HAL_RCC_OscConfig+0x4d8>)
 8002c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0ee      	beq.n	8002c02 <HAL_RCC_OscConfig+0x33a>
 8002c24:	e014      	b.n	8002c50 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c26:	f7fe fdd3 	bl	80017d0 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c2c:	e00a      	b.n	8002c44 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c2e:	f7fe fdcf 	bl	80017d0 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e0a6      	b.n	8002d92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c44:	4b56      	ldr	r3, [pc, #344]	; (8002da0 <HAL_RCC_OscConfig+0x4d8>)
 8002c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1ee      	bne.n	8002c2e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c50:	7dfb      	ldrb	r3, [r7, #23]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d105      	bne.n	8002c62 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c56:	4b52      	ldr	r3, [pc, #328]	; (8002da0 <HAL_RCC_OscConfig+0x4d8>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	4a51      	ldr	r2, [pc, #324]	; (8002da0 <HAL_RCC_OscConfig+0x4d8>)
 8002c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 8092 	beq.w	8002d90 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c6c:	4b4c      	ldr	r3, [pc, #304]	; (8002da0 <HAL_RCC_OscConfig+0x4d8>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 030c 	and.w	r3, r3, #12
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d05c      	beq.n	8002d32 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d141      	bne.n	8002d04 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c80:	4b48      	ldr	r3, [pc, #288]	; (8002da4 <HAL_RCC_OscConfig+0x4dc>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c86:	f7fe fda3 	bl	80017d0 <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c8e:	f7fe fd9f 	bl	80017d0 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e078      	b.n	8002d92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ca0:	4b3f      	ldr	r3, [pc, #252]	; (8002da0 <HAL_RCC_OscConfig+0x4d8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1f0      	bne.n	8002c8e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69da      	ldr	r2, [r3, #28]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	019b      	lsls	r3, r3, #6
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc2:	085b      	lsrs	r3, r3, #1
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	041b      	lsls	r3, r3, #16
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cce:	061b      	lsls	r3, r3, #24
 8002cd0:	4933      	ldr	r1, [pc, #204]	; (8002da0 <HAL_RCC_OscConfig+0x4d8>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cd6:	4b33      	ldr	r3, [pc, #204]	; (8002da4 <HAL_RCC_OscConfig+0x4dc>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cdc:	f7fe fd78 	bl	80017d0 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce4:	f7fe fd74 	bl	80017d0 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e04d      	b.n	8002d92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf6:	4b2a      	ldr	r3, [pc, #168]	; (8002da0 <HAL_RCC_OscConfig+0x4d8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x41c>
 8002d02:	e045      	b.n	8002d90 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d04:	4b27      	ldr	r3, [pc, #156]	; (8002da4 <HAL_RCC_OscConfig+0x4dc>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0a:	f7fe fd61 	bl	80017d0 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d12:	f7fe fd5d 	bl	80017d0 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e036      	b.n	8002d92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d24:	4b1e      	ldr	r3, [pc, #120]	; (8002da0 <HAL_RCC_OscConfig+0x4d8>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1f0      	bne.n	8002d12 <HAL_RCC_OscConfig+0x44a>
 8002d30:	e02e      	b.n	8002d90 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d101      	bne.n	8002d3e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e029      	b.n	8002d92 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d3e:	4b18      	ldr	r3, [pc, #96]	; (8002da0 <HAL_RCC_OscConfig+0x4d8>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d11c      	bne.n	8002d8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d115      	bne.n	8002d8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d66:	4013      	ands	r3, r2
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d10d      	bne.n	8002d8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d106      	bne.n	8002d8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d001      	beq.n	8002d90 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40007000 	.word	0x40007000
 8002da0:	40023800 	.word	0x40023800
 8002da4:	42470060 	.word	0x42470060

08002da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0cc      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dbc:	4b68      	ldr	r3, [pc, #416]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 030f 	and.w	r3, r3, #15
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d90c      	bls.n	8002de4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dca:	4b65      	ldr	r3, [pc, #404]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd2:	4b63      	ldr	r3, [pc, #396]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d001      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0b8      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d020      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dfc:	4b59      	ldr	r3, [pc, #356]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	4a58      	ldr	r2, [pc, #352]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0308 	and.w	r3, r3, #8
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e14:	4b53      	ldr	r3, [pc, #332]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	4a52      	ldr	r2, [pc, #328]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e20:	4b50      	ldr	r3, [pc, #320]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	494d      	ldr	r1, [pc, #308]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d044      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d107      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e46:	4b47      	ldr	r3, [pc, #284]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d119      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e07f      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d003      	beq.n	8002e66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d107      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e66:	4b3f      	ldr	r3, [pc, #252]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d109      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e06f      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e76:	4b3b      	ldr	r3, [pc, #236]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e067      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e86:	4b37      	ldr	r3, [pc, #220]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f023 0203 	bic.w	r2, r3, #3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	4934      	ldr	r1, [pc, #208]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e98:	f7fe fc9a 	bl	80017d0 <HAL_GetTick>
 8002e9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e9e:	e00a      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea0:	f7fe fc96 	bl	80017d0 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e04f      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb6:	4b2b      	ldr	r3, [pc, #172]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 020c 	and.w	r2, r3, #12
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d1eb      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec8:	4b25      	ldr	r3, [pc, #148]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d20c      	bcs.n	8002ef0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed6:	4b22      	ldr	r3, [pc, #136]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ede:	4b20      	ldr	r3, [pc, #128]	; (8002f60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e032      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002efc:	4b19      	ldr	r3, [pc, #100]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	4916      	ldr	r1, [pc, #88]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d009      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f1a:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	490e      	ldr	r1, [pc, #56]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f2e:	f000 f821 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8002f32:	4601      	mov	r1, r0
 8002f34:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	4a0a      	ldr	r2, [pc, #40]	; (8002f68 <HAL_RCC_ClockConfig+0x1c0>)
 8002f40:	5cd3      	ldrb	r3, [r2, r3]
 8002f42:	fa21 f303 	lsr.w	r3, r1, r3
 8002f46:	4a09      	ldr	r2, [pc, #36]	; (8002f6c <HAL_RCC_ClockConfig+0x1c4>)
 8002f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <HAL_RCC_ClockConfig+0x1c8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe fb4c 	bl	80015ec <HAL_InitTick>

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40023c00 	.word	0x40023c00
 8002f64:	40023800 	.word	0x40023800
 8002f68:	08004f30 	.word	0x08004f30
 8002f6c:	20000000 	.word	0x20000000
 8002f70:	20000004 	.word	0x20000004

08002f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	607b      	str	r3, [r7, #4]
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	2300      	movs	r3, #0
 8002f84:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f8a:	4b63      	ldr	r3, [pc, #396]	; (8003118 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d007      	beq.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x32>
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d008      	beq.n	8002fac <HAL_RCC_GetSysClockFreq+0x38>
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f040 80b4 	bne.w	8003108 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fa0:	4b5e      	ldr	r3, [pc, #376]	; (800311c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002fa2:	60bb      	str	r3, [r7, #8]
       break;
 8002fa4:	e0b3      	b.n	800310e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fa6:	4b5e      	ldr	r3, [pc, #376]	; (8003120 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002fa8:	60bb      	str	r3, [r7, #8]
      break;
 8002faa:	e0b0      	b.n	800310e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fac:	4b5a      	ldr	r3, [pc, #360]	; (8003118 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fb4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fb6:	4b58      	ldr	r3, [pc, #352]	; (8003118 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d04a      	beq.n	8003058 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fc2:	4b55      	ldr	r3, [pc, #340]	; (8003118 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	099b      	lsrs	r3, r3, #6
 8002fc8:	f04f 0400 	mov.w	r4, #0
 8002fcc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	ea03 0501 	and.w	r5, r3, r1
 8002fd8:	ea04 0602 	and.w	r6, r4, r2
 8002fdc:	4629      	mov	r1, r5
 8002fde:	4632      	mov	r2, r6
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	f04f 0400 	mov.w	r4, #0
 8002fe8:	0154      	lsls	r4, r2, #5
 8002fea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002fee:	014b      	lsls	r3, r1, #5
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4622      	mov	r2, r4
 8002ff4:	1b49      	subs	r1, r1, r5
 8002ff6:	eb62 0206 	sbc.w	r2, r2, r6
 8002ffa:	f04f 0300 	mov.w	r3, #0
 8002ffe:	f04f 0400 	mov.w	r4, #0
 8003002:	0194      	lsls	r4, r2, #6
 8003004:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003008:	018b      	lsls	r3, r1, #6
 800300a:	1a5b      	subs	r3, r3, r1
 800300c:	eb64 0402 	sbc.w	r4, r4, r2
 8003010:	f04f 0100 	mov.w	r1, #0
 8003014:	f04f 0200 	mov.w	r2, #0
 8003018:	00e2      	lsls	r2, r4, #3
 800301a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800301e:	00d9      	lsls	r1, r3, #3
 8003020:	460b      	mov	r3, r1
 8003022:	4614      	mov	r4, r2
 8003024:	195b      	adds	r3, r3, r5
 8003026:	eb44 0406 	adc.w	r4, r4, r6
 800302a:	f04f 0100 	mov.w	r1, #0
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	0262      	lsls	r2, r4, #9
 8003034:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003038:	0259      	lsls	r1, r3, #9
 800303a:	460b      	mov	r3, r1
 800303c:	4614      	mov	r4, r2
 800303e:	4618      	mov	r0, r3
 8003040:	4621      	mov	r1, r4
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f04f 0400 	mov.w	r4, #0
 8003048:	461a      	mov	r2, r3
 800304a:	4623      	mov	r3, r4
 800304c:	f7fd fcb6 	bl	80009bc <__aeabi_uldivmod>
 8003050:	4603      	mov	r3, r0
 8003052:	460c      	mov	r4, r1
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	e049      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003058:	4b2f      	ldr	r3, [pc, #188]	; (8003118 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	099b      	lsrs	r3, r3, #6
 800305e:	f04f 0400 	mov.w	r4, #0
 8003062:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	ea03 0501 	and.w	r5, r3, r1
 800306e:	ea04 0602 	and.w	r6, r4, r2
 8003072:	4629      	mov	r1, r5
 8003074:	4632      	mov	r2, r6
 8003076:	f04f 0300 	mov.w	r3, #0
 800307a:	f04f 0400 	mov.w	r4, #0
 800307e:	0154      	lsls	r4, r2, #5
 8003080:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003084:	014b      	lsls	r3, r1, #5
 8003086:	4619      	mov	r1, r3
 8003088:	4622      	mov	r2, r4
 800308a:	1b49      	subs	r1, r1, r5
 800308c:	eb62 0206 	sbc.w	r2, r2, r6
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	f04f 0400 	mov.w	r4, #0
 8003098:	0194      	lsls	r4, r2, #6
 800309a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800309e:	018b      	lsls	r3, r1, #6
 80030a0:	1a5b      	subs	r3, r3, r1
 80030a2:	eb64 0402 	sbc.w	r4, r4, r2
 80030a6:	f04f 0100 	mov.w	r1, #0
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	00e2      	lsls	r2, r4, #3
 80030b0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030b4:	00d9      	lsls	r1, r3, #3
 80030b6:	460b      	mov	r3, r1
 80030b8:	4614      	mov	r4, r2
 80030ba:	195b      	adds	r3, r3, r5
 80030bc:	eb44 0406 	adc.w	r4, r4, r6
 80030c0:	f04f 0100 	mov.w	r1, #0
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	02a2      	lsls	r2, r4, #10
 80030ca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80030ce:	0299      	lsls	r1, r3, #10
 80030d0:	460b      	mov	r3, r1
 80030d2:	4614      	mov	r4, r2
 80030d4:	4618      	mov	r0, r3
 80030d6:	4621      	mov	r1, r4
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f04f 0400 	mov.w	r4, #0
 80030de:	461a      	mov	r2, r3
 80030e0:	4623      	mov	r3, r4
 80030e2:	f7fd fc6b 	bl	80009bc <__aeabi_uldivmod>
 80030e6:	4603      	mov	r3, r0
 80030e8:	460c      	mov	r4, r1
 80030ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030ec:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	0c1b      	lsrs	r3, r3, #16
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	3301      	adds	r3, #1
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	fbb2 f3f3 	udiv	r3, r2, r3
 8003104:	60bb      	str	r3, [r7, #8]
      break;
 8003106:	e002      	b.n	800310e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003108:	4b04      	ldr	r3, [pc, #16]	; (800311c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800310a:	60bb      	str	r3, [r7, #8]
      break;
 800310c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800310e:	68bb      	ldr	r3, [r7, #8]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003118:	40023800 	.word	0x40023800
 800311c:	00f42400 	.word	0x00f42400
 8003120:	007a1200 	.word	0x007a1200

08003124 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003128:	4b03      	ldr	r3, [pc, #12]	; (8003138 <HAL_RCC_GetHCLKFreq+0x14>)
 800312a:	681b      	ldr	r3, [r3, #0]
}
 800312c:	4618      	mov	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	20000000 	.word	0x20000000

0800313c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003140:	f7ff fff0 	bl	8003124 <HAL_RCC_GetHCLKFreq>
 8003144:	4601      	mov	r1, r0
 8003146:	4b05      	ldr	r3, [pc, #20]	; (800315c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	0a9b      	lsrs	r3, r3, #10
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	4a03      	ldr	r2, [pc, #12]	; (8003160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003152:	5cd3      	ldrb	r3, [r2, r3]
 8003154:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003158:	4618      	mov	r0, r3
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40023800 	.word	0x40023800
 8003160:	08004f40 	.word	0x08004f40

08003164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003168:	f7ff ffdc 	bl	8003124 <HAL_RCC_GetHCLKFreq>
 800316c:	4601      	mov	r1, r0
 800316e:	4b05      	ldr	r3, [pc, #20]	; (8003184 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	0b5b      	lsrs	r3, r3, #13
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	4a03      	ldr	r2, [pc, #12]	; (8003188 <HAL_RCC_GetPCLK2Freq+0x24>)
 800317a:	5cd3      	ldrb	r3, [r2, r3]
 800317c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003180:	4618      	mov	r0, r3
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40023800 	.word	0x40023800
 8003188:	08004f40 	.word	0x08004f40

0800318c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	220f      	movs	r2, #15
 800319a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800319c:	4b12      	ldr	r3, [pc, #72]	; (80031e8 <HAL_RCC_GetClockConfig+0x5c>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 0203 	and.w	r2, r3, #3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80031a8:	4b0f      	ldr	r3, [pc, #60]	; (80031e8 <HAL_RCC_GetClockConfig+0x5c>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80031b4:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <HAL_RCC_GetClockConfig+0x5c>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80031c0:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <HAL_RCC_GetClockConfig+0x5c>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	08db      	lsrs	r3, r3, #3
 80031c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80031ce:	4b07      	ldr	r3, [pc, #28]	; (80031ec <HAL_RCC_GetClockConfig+0x60>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 020f 	and.w	r2, r3, #15
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	601a      	str	r2, [r3, #0]
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	40023800 	.word	0x40023800
 80031ec:	40023c00 	.word	0x40023c00

080031f0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b00      	cmp	r3, #0
 800320a:	d105      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003214:	2b00      	cmp	r3, #0
 8003216:	d038      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003218:	4b68      	ldr	r3, [pc, #416]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800321a:	2200      	movs	r2, #0
 800321c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800321e:	f7fe fad7 	bl	80017d0 <HAL_GetTick>
 8003222:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003224:	e008      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003226:	f7fe fad3 	bl	80017d0 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e0bd      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003238:	4b61      	ldr	r3, [pc, #388]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1f0      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	019b      	lsls	r3, r3, #6
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	071b      	lsls	r3, r3, #28
 8003256:	495a      	ldr	r1, [pc, #360]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003258:	4313      	orrs	r3, r2
 800325a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800325e:	4b57      	ldr	r3, [pc, #348]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003260:	2201      	movs	r2, #1
 8003262:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003264:	f7fe fab4 	bl	80017d0 <HAL_GetTick>
 8003268:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800326a:	e008      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800326c:	f7fe fab0 	bl	80017d0 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e09a      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800327e:	4b50      	ldr	r3, [pc, #320]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0f0      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 8083 	beq.w	800339e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003298:	2300      	movs	r3, #0
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	4b48      	ldr	r3, [pc, #288]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	4a47      	ldr	r2, [pc, #284]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a6:	6413      	str	r3, [r2, #64]	; 0x40
 80032a8:	4b45      	ldr	r3, [pc, #276]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80032b4:	4b43      	ldr	r3, [pc, #268]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a42      	ldr	r2, [pc, #264]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032be:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032c0:	f7fe fa86 	bl	80017d0 <HAL_GetTick>
 80032c4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80032c8:	f7fe fa82 	bl	80017d0 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e06c      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80032da:	4b3a      	ldr	r3, [pc, #232]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f0      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032e6:	4b36      	ldr	r3, [pc, #216]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ee:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d02f      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	429a      	cmp	r2, r3
 8003302:	d028      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003304:	4b2e      	ldr	r3, [pc, #184]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800330c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800330e:	4b2e      	ldr	r3, [pc, #184]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003310:	2201      	movs	r2, #1
 8003312:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003314:	4b2c      	ldr	r3, [pc, #176]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800331a:	4a29      	ldr	r2, [pc, #164]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003320:	4b27      	ldr	r3, [pc, #156]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b01      	cmp	r3, #1
 800332a:	d114      	bne.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800332c:	f7fe fa50 	bl	80017d0 <HAL_GetTick>
 8003330:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003332:	e00a      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003334:	f7fe fa4c 	bl	80017d0 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003342:	4293      	cmp	r3, r2
 8003344:	d901      	bls.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e034      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334a:	4b1d      	ldr	r3, [pc, #116]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0ee      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800335e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003362:	d10d      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003364:	4b16      	ldr	r3, [pc, #88]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003378:	4911      	ldr	r1, [pc, #68]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800337a:	4313      	orrs	r3, r2
 800337c:	608b      	str	r3, [r1, #8]
 800337e:	e005      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003380:	4b0f      	ldr	r3, [pc, #60]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	4a0e      	ldr	r2, [pc, #56]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003386:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800338a:	6093      	str	r3, [r2, #8]
 800338c:	4b0c      	ldr	r3, [pc, #48]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800338e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003398:	4909      	ldr	r1, [pc, #36]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800339a:	4313      	orrs	r3, r2
 800339c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	7d1a      	ldrb	r2, [r3, #20]
 80033ae:	4b07      	ldr	r3, [pc, #28]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80033b0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3718      	adds	r7, #24
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	42470068 	.word	0x42470068
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40007000 	.word	0x40007000
 80033c8:	42470e40 	.word	0x42470e40
 80033cc:	424711e0 	.word	0x424711e0

080033d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d13f      	bne.n	800346e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80033ee:	4b23      	ldr	r3, [pc, #140]	; (800347c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033f6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d004      	beq.n	8003408 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d131      	bne.n	8003466 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003402:	4b1f      	ldr	r3, [pc, #124]	; (8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003404:	617b      	str	r3, [r7, #20]
          break;
 8003406:	e031      	b.n	800346c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003408:	4b1c      	ldr	r3, [pc, #112]	; (800347c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003410:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003414:	d109      	bne.n	800342a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003416:	4b19      	ldr	r3, [pc, #100]	; (800347c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800341c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003420:	4a18      	ldr	r2, [pc, #96]	; (8003484 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003422:	fbb2 f3f3 	udiv	r3, r2, r3
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	e008      	b.n	800343c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800342a:	4b14      	ldr	r3, [pc, #80]	; (800347c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800342c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003434:	4a14      	ldr	r2, [pc, #80]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003436:	fbb2 f3f3 	udiv	r3, r2, r3
 800343a:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800343c:	4b0f      	ldr	r3, [pc, #60]	; (800347c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800343e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003442:	099b      	lsrs	r3, r3, #6
 8003444:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	fb02 f303 	mul.w	r3, r2, r3
 800344e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003450:	4b0a      	ldr	r3, [pc, #40]	; (800347c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003456:	0f1b      	lsrs	r3, r3, #28
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003462:	617b      	str	r3, [r7, #20]
          break;
 8003464:	e002      	b.n	800346c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]
          break;
 800346a:	bf00      	nop
        }
      }
      break;
 800346c:	bf00      	nop
    }
  }
  return frequency;
 800346e:	697b      	ldr	r3, [r7, #20]
}
 8003470:	4618      	mov	r0, r3
 8003472:	371c      	adds	r7, #28
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	40023800 	.word	0x40023800
 8003480:	00bb8000 	.word	0x00bb8000
 8003484:	007a1200 	.word	0x007a1200
 8003488:	00f42400 	.word	0x00f42400

0800348c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e056      	b.n	800354c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d106      	bne.n	80034be <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7fe f84f 	bl	800155c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2202      	movs	r2, #2
 80034c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034d4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	431a      	orrs	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	69db      	ldr	r3, [r3, #28]
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	ea42 0103 	orr.w	r1, r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	0c1b      	lsrs	r3, r3, #16
 800351c:	f003 0104 	and.w	r1, r3, #4
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	69da      	ldr	r2, [r3, #28]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800353a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e01d      	b.n	80035a2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d106      	bne.n	8003580 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f815 	bl	80035aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3304      	adds	r3, #4
 8003590:	4619      	mov	r1, r3
 8003592:	4610      	mov	r0, r2
 8003594:	f000 f968 	bl	8003868 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b083      	sub	sp, #12
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035be:	b480      	push	{r7}
 80035c0:	b085      	sub	sp, #20
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f042 0201 	orr.w	r2, r2, #1
 80035d4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2b06      	cmp	r3, #6
 80035e6:	d007      	beq.n	80035f8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b082      	sub	sp, #8
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b02      	cmp	r3, #2
 800361a:	d122      	bne.n	8003662 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b02      	cmp	r3, #2
 8003628:	d11b      	bne.n	8003662 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f06f 0202 	mvn.w	r2, #2
 8003632:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	f003 0303 	and.w	r3, r3, #3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f8ee 	bl	800382a <HAL_TIM_IC_CaptureCallback>
 800364e:	e005      	b.n	800365c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f8e0 	bl	8003816 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f8f1 	bl	800383e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b04      	cmp	r3, #4
 800366e:	d122      	bne.n	80036b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	2b04      	cmp	r3, #4
 800367c:	d11b      	bne.n	80036b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f06f 0204 	mvn.w	r2, #4
 8003686:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f8c4 	bl	800382a <HAL_TIM_IC_CaptureCallback>
 80036a2:	e005      	b.n	80036b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f8b6 	bl	8003816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f8c7 	bl	800383e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	f003 0308 	and.w	r3, r3, #8
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d122      	bne.n	800370a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b08      	cmp	r3, #8
 80036d0:	d11b      	bne.n	800370a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f06f 0208 	mvn.w	r2, #8
 80036da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2204      	movs	r2, #4
 80036e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	f003 0303 	and.w	r3, r3, #3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f89a 	bl	800382a <HAL_TIM_IC_CaptureCallback>
 80036f6:	e005      	b.n	8003704 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f88c 	bl	8003816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f89d 	bl	800383e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	f003 0310 	and.w	r3, r3, #16
 8003714:	2b10      	cmp	r3, #16
 8003716:	d122      	bne.n	800375e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f003 0310 	and.w	r3, r3, #16
 8003722:	2b10      	cmp	r3, #16
 8003724:	d11b      	bne.n	800375e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f06f 0210 	mvn.w	r2, #16
 800372e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2208      	movs	r2, #8
 8003734:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f870 	bl	800382a <HAL_TIM_IC_CaptureCallback>
 800374a:	e005      	b.n	8003758 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f862 	bl	8003816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f873 	bl	800383e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b01      	cmp	r3, #1
 800376a:	d10e      	bne.n	800378a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b01      	cmp	r3, #1
 8003778:	d107      	bne.n	800378a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f06f 0201 	mvn.w	r2, #1
 8003782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7fd fd8d 	bl	80012a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003794:	2b80      	cmp	r3, #128	; 0x80
 8003796:	d10e      	bne.n	80037b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a2:	2b80      	cmp	r3, #128	; 0x80
 80037a4:	d107      	bne.n	80037b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f8e3 	bl	800397c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c0:	2b40      	cmp	r3, #64	; 0x40
 80037c2:	d10e      	bne.n	80037e2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ce:	2b40      	cmp	r3, #64	; 0x40
 80037d0:	d107      	bne.n	80037e2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f838 	bl	8003852 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	f003 0320 	and.w	r3, r3, #32
 80037ec:	2b20      	cmp	r3, #32
 80037ee:	d10e      	bne.n	800380e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f003 0320 	and.w	r3, r3, #32
 80037fa:	2b20      	cmp	r3, #32
 80037fc:	d107      	bne.n	800380e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f06f 0220 	mvn.w	r2, #32
 8003806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f8ad 	bl	8003968 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
	...

08003868 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a34      	ldr	r2, [pc, #208]	; (800394c <TIM_Base_SetConfig+0xe4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d00f      	beq.n	80038a0 <TIM_Base_SetConfig+0x38>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003886:	d00b      	beq.n	80038a0 <TIM_Base_SetConfig+0x38>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a31      	ldr	r2, [pc, #196]	; (8003950 <TIM_Base_SetConfig+0xe8>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d007      	beq.n	80038a0 <TIM_Base_SetConfig+0x38>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a30      	ldr	r2, [pc, #192]	; (8003954 <TIM_Base_SetConfig+0xec>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d003      	beq.n	80038a0 <TIM_Base_SetConfig+0x38>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a2f      	ldr	r2, [pc, #188]	; (8003958 <TIM_Base_SetConfig+0xf0>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d108      	bne.n	80038b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a25      	ldr	r2, [pc, #148]	; (800394c <TIM_Base_SetConfig+0xe4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d01b      	beq.n	80038f2 <TIM_Base_SetConfig+0x8a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c0:	d017      	beq.n	80038f2 <TIM_Base_SetConfig+0x8a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a22      	ldr	r2, [pc, #136]	; (8003950 <TIM_Base_SetConfig+0xe8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d013      	beq.n	80038f2 <TIM_Base_SetConfig+0x8a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a21      	ldr	r2, [pc, #132]	; (8003954 <TIM_Base_SetConfig+0xec>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d00f      	beq.n	80038f2 <TIM_Base_SetConfig+0x8a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a20      	ldr	r2, [pc, #128]	; (8003958 <TIM_Base_SetConfig+0xf0>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00b      	beq.n	80038f2 <TIM_Base_SetConfig+0x8a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a1f      	ldr	r2, [pc, #124]	; (800395c <TIM_Base_SetConfig+0xf4>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d007      	beq.n	80038f2 <TIM_Base_SetConfig+0x8a>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a1e      	ldr	r2, [pc, #120]	; (8003960 <TIM_Base_SetConfig+0xf8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d003      	beq.n	80038f2 <TIM_Base_SetConfig+0x8a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a1d      	ldr	r2, [pc, #116]	; (8003964 <TIM_Base_SetConfig+0xfc>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d108      	bne.n	8003904 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4313      	orrs	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a08      	ldr	r2, [pc, #32]	; (800394c <TIM_Base_SetConfig+0xe4>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d103      	bne.n	8003938 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	691a      	ldr	r2, [r3, #16]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	615a      	str	r2, [r3, #20]
}
 800393e:	bf00      	nop
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	40010000 	.word	0x40010000
 8003950:	40000400 	.word	0x40000400
 8003954:	40000800 	.word	0x40000800
 8003958:	40000c00 	.word	0x40000c00
 800395c:	40014000 	.word	0x40014000
 8003960:	40014400 	.word	0x40014400
 8003964:	40014800 	.word	0x40014800

08003968 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800399a:	2300      	movs	r3, #0
 800399c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800399e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039a2:	2b84      	cmp	r3, #132	; 0x84
 80039a4:	d005      	beq.n	80039b2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80039a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4413      	add	r3, r2
 80039ae:	3303      	adds	r3, #3
 80039b0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80039b2:	68fb      	ldr	r3, [r7, #12]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3714      	adds	r7, #20
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80039c4:	f000 fb04 	bl	8003fd0 <vTaskStartScheduler>
  
  return osOK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	bd80      	pop	{r7, pc}

080039ce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80039ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039d0:	b089      	sub	sp, #36	; 0x24
 80039d2:	af04      	add	r7, sp, #16
 80039d4:	6078      	str	r0, [r7, #4]
 80039d6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d020      	beq.n	8003a22 <osThreadCreate+0x54>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d01c      	beq.n	8003a22 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685c      	ldr	r4, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681d      	ldr	r5, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691e      	ldr	r6, [r3, #16]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff ffc8 	bl	8003990 <makeFreeRtosPriority>
 8003a00:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a0a:	9202      	str	r2, [sp, #8]
 8003a0c:	9301      	str	r3, [sp, #4]
 8003a0e:	9100      	str	r1, [sp, #0]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	4632      	mov	r2, r6
 8003a14:	4629      	mov	r1, r5
 8003a16:	4620      	mov	r0, r4
 8003a18:	f000 f8d9 	bl	8003bce <xTaskCreateStatic>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	e01c      	b.n	8003a5c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685c      	ldr	r4, [r3, #4]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a2e:	b29e      	uxth	r6, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff ffaa 	bl	8003990 <makeFreeRtosPriority>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	f107 030c 	add.w	r3, r7, #12
 8003a42:	9301      	str	r3, [sp, #4]
 8003a44:	9200      	str	r2, [sp, #0]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	4632      	mov	r2, r6
 8003a4a:	4629      	mov	r1, r5
 8003a4c:	4620      	mov	r0, r4
 8003a4e:	f000 f917 	bl	8003c80 <xTaskCreate>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d001      	beq.n	8003a5c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	e000      	b.n	8003a5e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a66 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a66:	b480      	push	{r7}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f103 0208 	add.w	r2, r3, #8
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a7e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f103 0208 	add.w	r2, r3, #8
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f103 0208 	add.w	r2, r3, #8
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	601a      	str	r2, [r3, #0]
}
 8003afc:	bf00      	nop
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1e:	d103      	bne.n	8003b28 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	e00c      	b.n	8003b42 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3308      	adds	r3, #8
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	e002      	b.n	8003b36 <vListInsert+0x2e>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d2f6      	bcs.n	8003b30 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	601a      	str	r2, [r3, #0]
}
 8003b6e:	bf00      	nop
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b085      	sub	sp, #20
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6892      	ldr	r2, [r2, #8]
 8003b90:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6852      	ldr	r2, [r2, #4]
 8003b9a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d103      	bne.n	8003bae <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	1e5a      	subs	r2, r3, #1
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b08e      	sub	sp, #56	; 0x38
 8003bd2:	af04      	add	r7, sp, #16
 8003bd4:	60f8      	str	r0, [r7, #12]
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	607a      	str	r2, [r7, #4]
 8003bda:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d109      	bne.n	8003bf6 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	623b      	str	r3, [r7, #32]
 8003bf4:	e7fe      	b.n	8003bf4 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d109      	bne.n	8003c10 <xTaskCreateStatic+0x42>
 8003bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c00:	f383 8811 	msr	BASEPRI, r3
 8003c04:	f3bf 8f6f 	isb	sy
 8003c08:	f3bf 8f4f 	dsb	sy
 8003c0c:	61fb      	str	r3, [r7, #28]
 8003c0e:	e7fe      	b.n	8003c0e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003c10:	2354      	movs	r3, #84	; 0x54
 8003c12:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	2b54      	cmp	r3, #84	; 0x54
 8003c18:	d009      	beq.n	8003c2e <xTaskCreateStatic+0x60>
 8003c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1e:	f383 8811 	msr	BASEPRI, r3
 8003c22:	f3bf 8f6f 	isb	sy
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	61bb      	str	r3, [r7, #24]
 8003c2c:	e7fe      	b.n	8003c2c <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d01e      	beq.n	8003c72 <xTaskCreateStatic+0xa4>
 8003c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d01b      	beq.n	8003c72 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c42:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	9303      	str	r3, [sp, #12]
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	9302      	str	r3, [sp, #8]
 8003c54:	f107 0314 	add.w	r3, r7, #20
 8003c58:	9301      	str	r3, [sp, #4]
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	68b9      	ldr	r1, [r7, #8]
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 f850 	bl	8003d0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c6c:	f000 f8cc 	bl	8003e08 <prvAddNewTaskToReadyList>
 8003c70:	e001      	b.n	8003c76 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003c72:	2300      	movs	r3, #0
 8003c74:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003c76:	697b      	ldr	r3, [r7, #20]
	}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3728      	adds	r7, #40	; 0x28
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08c      	sub	sp, #48	; 0x30
 8003c84:	af04      	add	r7, sp, #16
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	603b      	str	r3, [r7, #0]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c90:	88fb      	ldrh	r3, [r7, #6]
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 ff0d 	bl	8004ab4 <pvPortMalloc>
 8003c9a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00e      	beq.n	8003cc0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003ca2:	2054      	movs	r0, #84	; 0x54
 8003ca4:	f000 ff06 	bl	8004ab4 <pvPortMalloc>
 8003ca8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	631a      	str	r2, [r3, #48]	; 0x30
 8003cb6:	e005      	b.n	8003cc4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003cb8:	6978      	ldr	r0, [r7, #20]
 8003cba:	f000 ffbd 	bl	8004c38 <vPortFree>
 8003cbe:	e001      	b.n	8003cc4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d017      	beq.n	8003cfa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003cd2:	88fa      	ldrh	r2, [r7, #6]
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	9303      	str	r3, [sp, #12]
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	9302      	str	r3, [sp, #8]
 8003cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cde:	9301      	str	r3, [sp, #4]
 8003ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	68b9      	ldr	r1, [r7, #8]
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 f80e 	bl	8003d0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003cee:	69f8      	ldr	r0, [r7, #28]
 8003cf0:	f000 f88a 	bl	8003e08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	61bb      	str	r3, [r7, #24]
 8003cf8:	e002      	b.n	8003d00 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003cfe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d00:	69bb      	ldr	r3, [r7, #24]
	}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3720      	adds	r7, #32
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b088      	sub	sp, #32
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	60f8      	str	r0, [r7, #12]
 8003d12:	60b9      	str	r1, [r7, #8]
 8003d14:	607a      	str	r2, [r7, #4]
 8003d16:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d22:	3b01      	subs	r3, #1
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	f023 0307 	bic.w	r3, r3, #7
 8003d30:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d009      	beq.n	8003d50 <prvInitialiseNewTask+0x46>
 8003d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d40:	f383 8811 	msr	BASEPRI, r3
 8003d44:	f3bf 8f6f 	isb	sy
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	617b      	str	r3, [r7, #20]
 8003d4e:	e7fe      	b.n	8003d4e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d50:	2300      	movs	r3, #0
 8003d52:	61fb      	str	r3, [r7, #28]
 8003d54:	e012      	b.n	8003d7c <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	7819      	ldrb	r1, [r3, #0]
 8003d5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	4413      	add	r3, r2
 8003d64:	3334      	adds	r3, #52	; 0x34
 8003d66:	460a      	mov	r2, r1
 8003d68:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	4413      	add	r3, r2
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d006      	beq.n	8003d84 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	61fb      	str	r3, [r7, #28]
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	2b0f      	cmp	r3, #15
 8003d80:	d9e9      	bls.n	8003d56 <prvInitialiseNewTask+0x4c>
 8003d82:	e000      	b.n	8003d86 <prvInitialiseNewTask+0x7c>
		{
			break;
 8003d84:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	2b06      	cmp	r3, #6
 8003d92:	d901      	bls.n	8003d98 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d94:	2306      	movs	r3, #6
 8003d96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003da2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da6:	2200      	movs	r2, #0
 8003da8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dac:	3304      	adds	r3, #4
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff fe79 	bl	8003aa6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db6:	3318      	adds	r3, #24
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff fe74 	bl	8003aa6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc6:	f1c3 0207 	rsb	r2, r3, #7
 8003dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	68f9      	ldr	r1, [r7, #12]
 8003de6:	69b8      	ldr	r0, [r7, #24]
 8003de8:	f000 fc5e 	bl	80046a8 <pxPortInitialiseStack>
 8003dec:	4602      	mov	r2, r0
 8003dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d002      	beq.n	8003dfe <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003dfe:	bf00      	nop
 8003e00:	3720      	adds	r7, #32
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e10:	f000 fd74 	bl	80048fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e14:	4b2a      	ldr	r3, [pc, #168]	; (8003ec0 <prvAddNewTaskToReadyList+0xb8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	4a29      	ldr	r2, [pc, #164]	; (8003ec0 <prvAddNewTaskToReadyList+0xb8>)
 8003e1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e1e:	4b29      	ldr	r3, [pc, #164]	; (8003ec4 <prvAddNewTaskToReadyList+0xbc>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d109      	bne.n	8003e3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e26:	4a27      	ldr	r2, [pc, #156]	; (8003ec4 <prvAddNewTaskToReadyList+0xbc>)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e2c:	4b24      	ldr	r3, [pc, #144]	; (8003ec0 <prvAddNewTaskToReadyList+0xb8>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d110      	bne.n	8003e56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e34:	f000 fb12 	bl	800445c <prvInitialiseTaskLists>
 8003e38:	e00d      	b.n	8003e56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e3a:	4b23      	ldr	r3, [pc, #140]	; (8003ec8 <prvAddNewTaskToReadyList+0xc0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d109      	bne.n	8003e56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e42:	4b20      	ldr	r3, [pc, #128]	; (8003ec4 <prvAddNewTaskToReadyList+0xbc>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d802      	bhi.n	8003e56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e50:	4a1c      	ldr	r2, [pc, #112]	; (8003ec4 <prvAddNewTaskToReadyList+0xbc>)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e56:	4b1d      	ldr	r3, [pc, #116]	; (8003ecc <prvAddNewTaskToReadyList+0xc4>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	4a1b      	ldr	r2, [pc, #108]	; (8003ecc <prvAddNewTaskToReadyList+0xc4>)
 8003e5e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e64:	2201      	movs	r2, #1
 8003e66:	409a      	lsls	r2, r3
 8003e68:	4b19      	ldr	r3, [pc, #100]	; (8003ed0 <prvAddNewTaskToReadyList+0xc8>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	4a18      	ldr	r2, [pc, #96]	; (8003ed0 <prvAddNewTaskToReadyList+0xc8>)
 8003e70:	6013      	str	r3, [r2, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e76:	4613      	mov	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4413      	add	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4a15      	ldr	r2, [pc, #84]	; (8003ed4 <prvAddNewTaskToReadyList+0xcc>)
 8003e80:	441a      	add	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3304      	adds	r3, #4
 8003e86:	4619      	mov	r1, r3
 8003e88:	4610      	mov	r0, r2
 8003e8a:	f7ff fe19 	bl	8003ac0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e8e:	f000 fd63 	bl	8004958 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e92:	4b0d      	ldr	r3, [pc, #52]	; (8003ec8 <prvAddNewTaskToReadyList+0xc0>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00e      	beq.n	8003eb8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e9a:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <prvAddNewTaskToReadyList+0xbc>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d207      	bcs.n	8003eb8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ea8:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <prvAddNewTaskToReadyList+0xd0>)
 8003eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003eb8:	bf00      	nop
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	20000380 	.word	0x20000380
 8003ec4:	20000280 	.word	0x20000280
 8003ec8:	2000038c 	.word	0x2000038c
 8003ecc:	2000039c 	.word	0x2000039c
 8003ed0:	20000388 	.word	0x20000388
 8003ed4:	20000284 	.word	0x20000284
 8003ed8:	e000ed04 	.word	0xe000ed04

08003edc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b08a      	sub	sp, #40	; 0x28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d109      	bne.n	8003f04 <vTaskDelayUntil+0x28>
 8003ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef4:	f383 8811 	msr	BASEPRI, r3
 8003ef8:	f3bf 8f6f 	isb	sy
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	617b      	str	r3, [r7, #20]
 8003f02:	e7fe      	b.n	8003f02 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d109      	bne.n	8003f1e <vTaskDelayUntil+0x42>
 8003f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0e:	f383 8811 	msr	BASEPRI, r3
 8003f12:	f3bf 8f6f 	isb	sy
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	613b      	str	r3, [r7, #16]
 8003f1c:	e7fe      	b.n	8003f1c <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8003f1e:	4b29      	ldr	r3, [pc, #164]	; (8003fc4 <vTaskDelayUntil+0xe8>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d009      	beq.n	8003f3a <vTaskDelayUntil+0x5e>
 8003f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	e7fe      	b.n	8003f38 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8003f3a:	f000 f8a7 	bl	800408c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8003f3e:	4b22      	ldr	r3, [pc, #136]	; (8003fc8 <vTaskDelayUntil+0xec>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6a3a      	ldr	r2, [r7, #32]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d20b      	bcs.n	8003f70 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	69fa      	ldr	r2, [r7, #28]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d211      	bcs.n	8003f86 <vTaskDelayUntil+0xaa>
 8003f62:	69fa      	ldr	r2, [r7, #28]
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d90d      	bls.n	8003f86 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6e:	e00a      	b.n	8003f86 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	69fa      	ldr	r2, [r7, #28]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d303      	bcc.n	8003f82 <vTaskDelayUntil+0xa6>
 8003f7a:	69fa      	ldr	r2, [r7, #28]
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d901      	bls.n	8003f86 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8003f82:	2301      	movs	r3, #1
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69fa      	ldr	r2, [r7, #28]
 8003f8a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d006      	beq.n	8003fa0 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2100      	movs	r1, #0
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fb1e 	bl	80045dc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8003fa0:	f000 f882 	bl	80040a8 <xTaskResumeAll>
 8003fa4:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d107      	bne.n	8003fbc <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8003fac:	4b07      	ldr	r3, [pc, #28]	; (8003fcc <vTaskDelayUntil+0xf0>)
 8003fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	f3bf 8f4f 	dsb	sy
 8003fb8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003fbc:	bf00      	nop
 8003fbe:	3728      	adds	r7, #40	; 0x28
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	200003a8 	.word	0x200003a8
 8003fc8:	20000384 	.word	0x20000384
 8003fcc:	e000ed04 	.word	0xe000ed04

08003fd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b08a      	sub	sp, #40	; 0x28
 8003fd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003fde:	463a      	mov	r2, r7
 8003fe0:	1d39      	adds	r1, r7, #4
 8003fe2:	f107 0308 	add.w	r3, r7, #8
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fc fe68 	bl	8000cbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003fec:	6839      	ldr	r1, [r7, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	9202      	str	r2, [sp, #8]
 8003ff4:	9301      	str	r3, [sp, #4]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	460a      	mov	r2, r1
 8003ffe:	491d      	ldr	r1, [pc, #116]	; (8004074 <vTaskStartScheduler+0xa4>)
 8004000:	481d      	ldr	r0, [pc, #116]	; (8004078 <vTaskStartScheduler+0xa8>)
 8004002:	f7ff fde4 	bl	8003bce <xTaskCreateStatic>
 8004006:	4602      	mov	r2, r0
 8004008:	4b1c      	ldr	r3, [pc, #112]	; (800407c <vTaskStartScheduler+0xac>)
 800400a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800400c:	4b1b      	ldr	r3, [pc, #108]	; (800407c <vTaskStartScheduler+0xac>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004014:	2301      	movs	r3, #1
 8004016:	617b      	str	r3, [r7, #20]
 8004018:	e001      	b.n	800401e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800401a:	2300      	movs	r3, #0
 800401c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d115      	bne.n	8004050 <vTaskStartScheduler+0x80>
 8004024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004028:	f383 8811 	msr	BASEPRI, r3
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	f3bf 8f4f 	dsb	sy
 8004034:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004036:	4b12      	ldr	r3, [pc, #72]	; (8004080 <vTaskStartScheduler+0xb0>)
 8004038:	f04f 32ff 	mov.w	r2, #4294967295
 800403c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800403e:	4b11      	ldr	r3, [pc, #68]	; (8004084 <vTaskStartScheduler+0xb4>)
 8004040:	2201      	movs	r2, #1
 8004042:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004044:	4b10      	ldr	r3, [pc, #64]	; (8004088 <vTaskStartScheduler+0xb8>)
 8004046:	2200      	movs	r2, #0
 8004048:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800404a:	f000 fbb9 	bl	80047c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800404e:	e00d      	b.n	800406c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004056:	d109      	bne.n	800406c <vTaskStartScheduler+0x9c>
 8004058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	60fb      	str	r3, [r7, #12]
 800406a:	e7fe      	b.n	800406a <vTaskStartScheduler+0x9a>
}
 800406c:	bf00      	nop
 800406e:	3718      	adds	r7, #24
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	08004f28 	.word	0x08004f28
 8004078:	0800442d 	.word	0x0800442d
 800407c:	200003a4 	.word	0x200003a4
 8004080:	200003a0 	.word	0x200003a0
 8004084:	2000038c 	.word	0x2000038c
 8004088:	20000384 	.word	0x20000384

0800408c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004090:	4b04      	ldr	r3, [pc, #16]	; (80040a4 <vTaskSuspendAll+0x18>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3301      	adds	r3, #1
 8004096:	4a03      	ldr	r2, [pc, #12]	; (80040a4 <vTaskSuspendAll+0x18>)
 8004098:	6013      	str	r3, [r2, #0]
}
 800409a:	bf00      	nop
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	200003a8 	.word	0x200003a8

080040a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80040ae:	2300      	movs	r3, #0
 80040b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80040b2:	2300      	movs	r3, #0
 80040b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80040b6:	4b41      	ldr	r3, [pc, #260]	; (80041bc <xTaskResumeAll+0x114>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d109      	bne.n	80040d2 <xTaskResumeAll+0x2a>
 80040be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c2:	f383 8811 	msr	BASEPRI, r3
 80040c6:	f3bf 8f6f 	isb	sy
 80040ca:	f3bf 8f4f 	dsb	sy
 80040ce:	603b      	str	r3, [r7, #0]
 80040d0:	e7fe      	b.n	80040d0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80040d2:	f000 fc13 	bl	80048fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80040d6:	4b39      	ldr	r3, [pc, #228]	; (80041bc <xTaskResumeAll+0x114>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3b01      	subs	r3, #1
 80040dc:	4a37      	ldr	r2, [pc, #220]	; (80041bc <xTaskResumeAll+0x114>)
 80040de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040e0:	4b36      	ldr	r3, [pc, #216]	; (80041bc <xTaskResumeAll+0x114>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d161      	bne.n	80041ac <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80040e8:	4b35      	ldr	r3, [pc, #212]	; (80041c0 <xTaskResumeAll+0x118>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d05d      	beq.n	80041ac <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040f0:	e02e      	b.n	8004150 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80040f2:	4b34      	ldr	r3, [pc, #208]	; (80041c4 <xTaskResumeAll+0x11c>)
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	3318      	adds	r3, #24
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff fd3b 	bl	8003b7a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	3304      	adds	r3, #4
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff fd36 	bl	8003b7a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004112:	2201      	movs	r2, #1
 8004114:	409a      	lsls	r2, r3
 8004116:	4b2c      	ldr	r3, [pc, #176]	; (80041c8 <xTaskResumeAll+0x120>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4313      	orrs	r3, r2
 800411c:	4a2a      	ldr	r2, [pc, #168]	; (80041c8 <xTaskResumeAll+0x120>)
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004124:	4613      	mov	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4a27      	ldr	r2, [pc, #156]	; (80041cc <xTaskResumeAll+0x124>)
 800412e:	441a      	add	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	3304      	adds	r3, #4
 8004134:	4619      	mov	r1, r3
 8004136:	4610      	mov	r0, r2
 8004138:	f7ff fcc2 	bl	8003ac0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004140:	4b23      	ldr	r3, [pc, #140]	; (80041d0 <xTaskResumeAll+0x128>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004146:	429a      	cmp	r2, r3
 8004148:	d302      	bcc.n	8004150 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800414a:	4b22      	ldr	r3, [pc, #136]	; (80041d4 <xTaskResumeAll+0x12c>)
 800414c:	2201      	movs	r2, #1
 800414e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004150:	4b1c      	ldr	r3, [pc, #112]	; (80041c4 <xTaskResumeAll+0x11c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1cc      	bne.n	80040f2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800415e:	f000 fa17 	bl	8004590 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004162:	4b1d      	ldr	r3, [pc, #116]	; (80041d8 <xTaskResumeAll+0x130>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d010      	beq.n	8004190 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800416e:	f000 f847 	bl	8004200 <xTaskIncrementTick>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004178:	4b16      	ldr	r3, [pc, #88]	; (80041d4 <xTaskResumeAll+0x12c>)
 800417a:	2201      	movs	r2, #1
 800417c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3b01      	subs	r3, #1
 8004182:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1f1      	bne.n	800416e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800418a:	4b13      	ldr	r3, [pc, #76]	; (80041d8 <xTaskResumeAll+0x130>)
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004190:	4b10      	ldr	r3, [pc, #64]	; (80041d4 <xTaskResumeAll+0x12c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d009      	beq.n	80041ac <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004198:	2301      	movs	r3, #1
 800419a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800419c:	4b0f      	ldr	r3, [pc, #60]	; (80041dc <xTaskResumeAll+0x134>)
 800419e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041ac:	f000 fbd4 	bl	8004958 <vPortExitCritical>

	return xAlreadyYielded;
 80041b0:	68bb      	ldr	r3, [r7, #8]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	200003a8 	.word	0x200003a8
 80041c0:	20000380 	.word	0x20000380
 80041c4:	20000340 	.word	0x20000340
 80041c8:	20000388 	.word	0x20000388
 80041cc:	20000284 	.word	0x20000284
 80041d0:	20000280 	.word	0x20000280
 80041d4:	20000394 	.word	0x20000394
 80041d8:	20000390 	.word	0x20000390
 80041dc:	e000ed04 	.word	0xe000ed04

080041e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80041e6:	4b05      	ldr	r3, [pc, #20]	; (80041fc <xTaskGetTickCount+0x1c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80041ec:	687b      	ldr	r3, [r7, #4]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	20000384 	.word	0x20000384

08004200 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004206:	2300      	movs	r3, #0
 8004208:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800420a:	4b50      	ldr	r3, [pc, #320]	; (800434c <xTaskIncrementTick+0x14c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	f040 808c 	bne.w	800432c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004214:	4b4e      	ldr	r3, [pc, #312]	; (8004350 <xTaskIncrementTick+0x150>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	3301      	adds	r3, #1
 800421a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800421c:	4a4c      	ldr	r2, [pc, #304]	; (8004350 <xTaskIncrementTick+0x150>)
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d11f      	bne.n	8004268 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004228:	4b4a      	ldr	r3, [pc, #296]	; (8004354 <xTaskIncrementTick+0x154>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d009      	beq.n	8004246 <xTaskIncrementTick+0x46>
 8004232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004236:	f383 8811 	msr	BASEPRI, r3
 800423a:	f3bf 8f6f 	isb	sy
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	e7fe      	b.n	8004244 <xTaskIncrementTick+0x44>
 8004246:	4b43      	ldr	r3, [pc, #268]	; (8004354 <xTaskIncrementTick+0x154>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	4b42      	ldr	r3, [pc, #264]	; (8004358 <xTaskIncrementTick+0x158>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a40      	ldr	r2, [pc, #256]	; (8004354 <xTaskIncrementTick+0x154>)
 8004252:	6013      	str	r3, [r2, #0]
 8004254:	4a40      	ldr	r2, [pc, #256]	; (8004358 <xTaskIncrementTick+0x158>)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	4b40      	ldr	r3, [pc, #256]	; (800435c <xTaskIncrementTick+0x15c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3301      	adds	r3, #1
 8004260:	4a3e      	ldr	r2, [pc, #248]	; (800435c <xTaskIncrementTick+0x15c>)
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	f000 f994 	bl	8004590 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004268:	4b3d      	ldr	r3, [pc, #244]	; (8004360 <xTaskIncrementTick+0x160>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	429a      	cmp	r2, r3
 8004270:	d34d      	bcc.n	800430e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004272:	4b38      	ldr	r3, [pc, #224]	; (8004354 <xTaskIncrementTick+0x154>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <xTaskIncrementTick+0x80>
 800427c:	2301      	movs	r3, #1
 800427e:	e000      	b.n	8004282 <xTaskIncrementTick+0x82>
 8004280:	2300      	movs	r3, #0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d004      	beq.n	8004290 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004286:	4b36      	ldr	r3, [pc, #216]	; (8004360 <xTaskIncrementTick+0x160>)
 8004288:	f04f 32ff 	mov.w	r2, #4294967295
 800428c:	601a      	str	r2, [r3, #0]
					break;
 800428e:	e03e      	b.n	800430e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004290:	4b30      	ldr	r3, [pc, #192]	; (8004354 <xTaskIncrementTick+0x154>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d203      	bcs.n	80042b0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80042a8:	4a2d      	ldr	r2, [pc, #180]	; (8004360 <xTaskIncrementTick+0x160>)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6013      	str	r3, [r2, #0]
						break;
 80042ae:	e02e      	b.n	800430e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	3304      	adds	r3, #4
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff fc60 	bl	8003b7a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d004      	beq.n	80042cc <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	3318      	adds	r3, #24
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7ff fc57 	bl	8003b7a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d0:	2201      	movs	r2, #1
 80042d2:	409a      	lsls	r2, r3
 80042d4:	4b23      	ldr	r3, [pc, #140]	; (8004364 <xTaskIncrementTick+0x164>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4313      	orrs	r3, r2
 80042da:	4a22      	ldr	r2, [pc, #136]	; (8004364 <xTaskIncrementTick+0x164>)
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e2:	4613      	mov	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4a1f      	ldr	r2, [pc, #124]	; (8004368 <xTaskIncrementTick+0x168>)
 80042ec:	441a      	add	r2, r3
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	3304      	adds	r3, #4
 80042f2:	4619      	mov	r1, r3
 80042f4:	4610      	mov	r0, r2
 80042f6:	f7ff fbe3 	bl	8003ac0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042fe:	4b1b      	ldr	r3, [pc, #108]	; (800436c <xTaskIncrementTick+0x16c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	429a      	cmp	r2, r3
 8004306:	d3b4      	bcc.n	8004272 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004308:	2301      	movs	r3, #1
 800430a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800430c:	e7b1      	b.n	8004272 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800430e:	4b17      	ldr	r3, [pc, #92]	; (800436c <xTaskIncrementTick+0x16c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004314:	4914      	ldr	r1, [pc, #80]	; (8004368 <xTaskIncrementTick+0x168>)
 8004316:	4613      	mov	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	440b      	add	r3, r1
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d907      	bls.n	8004336 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8004326:	2301      	movs	r3, #1
 8004328:	617b      	str	r3, [r7, #20]
 800432a:	e004      	b.n	8004336 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800432c:	4b10      	ldr	r3, [pc, #64]	; (8004370 <xTaskIncrementTick+0x170>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3301      	adds	r3, #1
 8004332:	4a0f      	ldr	r2, [pc, #60]	; (8004370 <xTaskIncrementTick+0x170>)
 8004334:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004336:	4b0f      	ldr	r3, [pc, #60]	; (8004374 <xTaskIncrementTick+0x174>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800433e:	2301      	movs	r3, #1
 8004340:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004342:	697b      	ldr	r3, [r7, #20]
}
 8004344:	4618      	mov	r0, r3
 8004346:	3718      	adds	r7, #24
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	200003a8 	.word	0x200003a8
 8004350:	20000384 	.word	0x20000384
 8004354:	20000338 	.word	0x20000338
 8004358:	2000033c 	.word	0x2000033c
 800435c:	20000398 	.word	0x20000398
 8004360:	200003a0 	.word	0x200003a0
 8004364:	20000388 	.word	0x20000388
 8004368:	20000284 	.word	0x20000284
 800436c:	20000280 	.word	0x20000280
 8004370:	20000390 	.word	0x20000390
 8004374:	20000394 	.word	0x20000394

08004378 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800437e:	4b26      	ldr	r3, [pc, #152]	; (8004418 <vTaskSwitchContext+0xa0>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004386:	4b25      	ldr	r3, [pc, #148]	; (800441c <vTaskSwitchContext+0xa4>)
 8004388:	2201      	movs	r2, #1
 800438a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800438c:	e03e      	b.n	800440c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800438e:	4b23      	ldr	r3, [pc, #140]	; (800441c <vTaskSwitchContext+0xa4>)
 8004390:	2200      	movs	r2, #0
 8004392:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004394:	4b22      	ldr	r3, [pc, #136]	; (8004420 <vTaskSwitchContext+0xa8>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	fab3 f383 	clz	r3, r3
 80043a0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80043a2:	7afb      	ldrb	r3, [r7, #11]
 80043a4:	f1c3 031f 	rsb	r3, r3, #31
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	491e      	ldr	r1, [pc, #120]	; (8004424 <vTaskSwitchContext+0xac>)
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	4613      	mov	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	440b      	add	r3, r1
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d109      	bne.n	80043d2 <vTaskSwitchContext+0x5a>
	__asm volatile
 80043be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	607b      	str	r3, [r7, #4]
 80043d0:	e7fe      	b.n	80043d0 <vTaskSwitchContext+0x58>
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4a11      	ldr	r2, [pc, #68]	; (8004424 <vTaskSwitchContext+0xac>)
 80043de:	4413      	add	r3, r2
 80043e0:	613b      	str	r3, [r7, #16]
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	605a      	str	r2, [r3, #4]
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	3308      	adds	r3, #8
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d104      	bne.n	8004402 <vTaskSwitchContext+0x8a>
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	605a      	str	r2, [r3, #4]
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	4a07      	ldr	r2, [pc, #28]	; (8004428 <vTaskSwitchContext+0xb0>)
 800440a:	6013      	str	r3, [r2, #0]
}
 800440c:	bf00      	nop
 800440e:	371c      	adds	r7, #28
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	200003a8 	.word	0x200003a8
 800441c:	20000394 	.word	0x20000394
 8004420:	20000388 	.word	0x20000388
 8004424:	20000284 	.word	0x20000284
 8004428:	20000280 	.word	0x20000280

0800442c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004434:	f000 f852 	bl	80044dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004438:	4b06      	ldr	r3, [pc, #24]	; (8004454 <prvIdleTask+0x28>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d9f9      	bls.n	8004434 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004440:	4b05      	ldr	r3, [pc, #20]	; (8004458 <prvIdleTask+0x2c>)
 8004442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004450:	e7f0      	b.n	8004434 <prvIdleTask+0x8>
 8004452:	bf00      	nop
 8004454:	20000284 	.word	0x20000284
 8004458:	e000ed04 	.word	0xe000ed04

0800445c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004462:	2300      	movs	r3, #0
 8004464:	607b      	str	r3, [r7, #4]
 8004466:	e00c      	b.n	8004482 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	4613      	mov	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4a12      	ldr	r2, [pc, #72]	; (80044bc <prvInitialiseTaskLists+0x60>)
 8004474:	4413      	add	r3, r2
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff faf5 	bl	8003a66 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3301      	adds	r3, #1
 8004480:	607b      	str	r3, [r7, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b06      	cmp	r3, #6
 8004486:	d9ef      	bls.n	8004468 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004488:	480d      	ldr	r0, [pc, #52]	; (80044c0 <prvInitialiseTaskLists+0x64>)
 800448a:	f7ff faec 	bl	8003a66 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800448e:	480d      	ldr	r0, [pc, #52]	; (80044c4 <prvInitialiseTaskLists+0x68>)
 8004490:	f7ff fae9 	bl	8003a66 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004494:	480c      	ldr	r0, [pc, #48]	; (80044c8 <prvInitialiseTaskLists+0x6c>)
 8004496:	f7ff fae6 	bl	8003a66 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800449a:	480c      	ldr	r0, [pc, #48]	; (80044cc <prvInitialiseTaskLists+0x70>)
 800449c:	f7ff fae3 	bl	8003a66 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80044a0:	480b      	ldr	r0, [pc, #44]	; (80044d0 <prvInitialiseTaskLists+0x74>)
 80044a2:	f7ff fae0 	bl	8003a66 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80044a6:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <prvInitialiseTaskLists+0x78>)
 80044a8:	4a05      	ldr	r2, [pc, #20]	; (80044c0 <prvInitialiseTaskLists+0x64>)
 80044aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044ac:	4b0a      	ldr	r3, [pc, #40]	; (80044d8 <prvInitialiseTaskLists+0x7c>)
 80044ae:	4a05      	ldr	r2, [pc, #20]	; (80044c4 <prvInitialiseTaskLists+0x68>)
 80044b0:	601a      	str	r2, [r3, #0]
}
 80044b2:	bf00      	nop
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	20000284 	.word	0x20000284
 80044c0:	20000310 	.word	0x20000310
 80044c4:	20000324 	.word	0x20000324
 80044c8:	20000340 	.word	0x20000340
 80044cc:	20000354 	.word	0x20000354
 80044d0:	2000036c 	.word	0x2000036c
 80044d4:	20000338 	.word	0x20000338
 80044d8:	2000033c 	.word	0x2000033c

080044dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044e2:	e019      	b.n	8004518 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80044e4:	f000 fa0a 	bl	80048fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80044e8:	4b0f      	ldr	r3, [pc, #60]	; (8004528 <prvCheckTasksWaitingTermination+0x4c>)
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3304      	adds	r3, #4
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff fb40 	bl	8003b7a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044fa:	4b0c      	ldr	r3, [pc, #48]	; (800452c <prvCheckTasksWaitingTermination+0x50>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3b01      	subs	r3, #1
 8004500:	4a0a      	ldr	r2, [pc, #40]	; (800452c <prvCheckTasksWaitingTermination+0x50>)
 8004502:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004504:	4b0a      	ldr	r3, [pc, #40]	; (8004530 <prvCheckTasksWaitingTermination+0x54>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3b01      	subs	r3, #1
 800450a:	4a09      	ldr	r2, [pc, #36]	; (8004530 <prvCheckTasksWaitingTermination+0x54>)
 800450c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800450e:	f000 fa23 	bl	8004958 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f80e 	bl	8004534 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004518:	4b05      	ldr	r3, [pc, #20]	; (8004530 <prvCheckTasksWaitingTermination+0x54>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1e1      	bne.n	80044e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004520:	bf00      	nop
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	20000354 	.word	0x20000354
 800452c:	20000380 	.word	0x20000380
 8004530:	20000368 	.word	0x20000368

08004534 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004542:	2b00      	cmp	r3, #0
 8004544:	d108      	bne.n	8004558 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454a:	4618      	mov	r0, r3
 800454c:	f000 fb74 	bl	8004c38 <vPortFree>
				vPortFree( pxTCB );
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 fb71 	bl	8004c38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004556:	e017      	b.n	8004588 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800455e:	2b01      	cmp	r3, #1
 8004560:	d103      	bne.n	800456a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fb68 	bl	8004c38 <vPortFree>
	}
 8004568:	e00e      	b.n	8004588 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004570:	2b02      	cmp	r3, #2
 8004572:	d009      	beq.n	8004588 <prvDeleteTCB+0x54>
 8004574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004578:	f383 8811 	msr	BASEPRI, r3
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	e7fe      	b.n	8004586 <prvDeleteTCB+0x52>
	}
 8004588:	bf00      	nop
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004596:	4b0f      	ldr	r3, [pc, #60]	; (80045d4 <prvResetNextTaskUnblockTime+0x44>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <prvResetNextTaskUnblockTime+0x14>
 80045a0:	2301      	movs	r3, #1
 80045a2:	e000      	b.n	80045a6 <prvResetNextTaskUnblockTime+0x16>
 80045a4:	2300      	movs	r3, #0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d004      	beq.n	80045b4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80045aa:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <prvResetNextTaskUnblockTime+0x48>)
 80045ac:	f04f 32ff 	mov.w	r2, #4294967295
 80045b0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80045b2:	e008      	b.n	80045c6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80045b4:	4b07      	ldr	r3, [pc, #28]	; (80045d4 <prvResetNextTaskUnblockTime+0x44>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	4a05      	ldr	r2, [pc, #20]	; (80045d8 <prvResetNextTaskUnblockTime+0x48>)
 80045c4:	6013      	str	r3, [r2, #0]
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	20000338 	.word	0x20000338
 80045d8:	200003a0 	.word	0x200003a0

080045dc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045e6:	4b29      	ldr	r3, [pc, #164]	; (800468c <prvAddCurrentTaskToDelayedList+0xb0>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045ec:	4b28      	ldr	r3, [pc, #160]	; (8004690 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3304      	adds	r3, #4
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fac1 	bl	8003b7a <uxListRemove>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10b      	bne.n	8004616 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80045fe:	4b24      	ldr	r3, [pc, #144]	; (8004690 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	2201      	movs	r2, #1
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	43da      	mvns	r2, r3
 800460c:	4b21      	ldr	r3, [pc, #132]	; (8004694 <prvAddCurrentTaskToDelayedList+0xb8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4013      	ands	r3, r2
 8004612:	4a20      	ldr	r2, [pc, #128]	; (8004694 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004614:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461c:	d10a      	bne.n	8004634 <prvAddCurrentTaskToDelayedList+0x58>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d007      	beq.n	8004634 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004624:	4b1a      	ldr	r3, [pc, #104]	; (8004690 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3304      	adds	r3, #4
 800462a:	4619      	mov	r1, r3
 800462c:	481a      	ldr	r0, [pc, #104]	; (8004698 <prvAddCurrentTaskToDelayedList+0xbc>)
 800462e:	f7ff fa47 	bl	8003ac0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004632:	e026      	b.n	8004682 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4413      	add	r3, r2
 800463a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800463c:	4b14      	ldr	r3, [pc, #80]	; (8004690 <prvAddCurrentTaskToDelayedList+0xb4>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	429a      	cmp	r2, r3
 800464a:	d209      	bcs.n	8004660 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800464c:	4b13      	ldr	r3, [pc, #76]	; (800469c <prvAddCurrentTaskToDelayedList+0xc0>)
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	4b0f      	ldr	r3, [pc, #60]	; (8004690 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3304      	adds	r3, #4
 8004656:	4619      	mov	r1, r3
 8004658:	4610      	mov	r0, r2
 800465a:	f7ff fa55 	bl	8003b08 <vListInsert>
}
 800465e:	e010      	b.n	8004682 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004660:	4b0f      	ldr	r3, [pc, #60]	; (80046a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	4b0a      	ldr	r3, [pc, #40]	; (8004690 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3304      	adds	r3, #4
 800466a:	4619      	mov	r1, r3
 800466c:	4610      	mov	r0, r2
 800466e:	f7ff fa4b 	bl	8003b08 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004672:	4b0c      	ldr	r3, [pc, #48]	; (80046a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	429a      	cmp	r2, r3
 800467a:	d202      	bcs.n	8004682 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800467c:	4a09      	ldr	r2, [pc, #36]	; (80046a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	6013      	str	r3, [r2, #0]
}
 8004682:	bf00      	nop
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	20000384 	.word	0x20000384
 8004690:	20000280 	.word	0x20000280
 8004694:	20000388 	.word	0x20000388
 8004698:	2000036c 	.word	0x2000036c
 800469c:	2000033c 	.word	0x2000033c
 80046a0:	20000338 	.word	0x20000338
 80046a4:	200003a0 	.word	0x200003a0

080046a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	3b04      	subs	r3, #4
 80046b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	3b04      	subs	r3, #4
 80046c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	f023 0201 	bic.w	r2, r3, #1
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	3b04      	subs	r3, #4
 80046d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80046d8:	4a0c      	ldr	r2, [pc, #48]	; (800470c <pxPortInitialiseStack+0x64>)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	3b14      	subs	r3, #20
 80046e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	3b04      	subs	r3, #4
 80046ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f06f 0202 	mvn.w	r2, #2
 80046f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	3b20      	subs	r3, #32
 80046fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80046fe:	68fb      	ldr	r3, [r7, #12]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	08004711 	.word	0x08004711

08004710 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004716:	2300      	movs	r3, #0
 8004718:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800471a:	4b11      	ldr	r3, [pc, #68]	; (8004760 <prvTaskExitError+0x50>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004722:	d009      	beq.n	8004738 <prvTaskExitError+0x28>
 8004724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004728:	f383 8811 	msr	BASEPRI, r3
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	e7fe      	b.n	8004736 <prvTaskExitError+0x26>
 8004738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473c:	f383 8811 	msr	BASEPRI, r3
 8004740:	f3bf 8f6f 	isb	sy
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800474a:	bf00      	nop
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0fc      	beq.n	800474c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004752:	bf00      	nop
 8004754:	3714      	adds	r7, #20
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	2000000c 	.word	0x2000000c
	...

08004770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004770:	4b07      	ldr	r3, [pc, #28]	; (8004790 <pxCurrentTCBConst2>)
 8004772:	6819      	ldr	r1, [r3, #0]
 8004774:	6808      	ldr	r0, [r1, #0]
 8004776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800477a:	f380 8809 	msr	PSP, r0
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	f04f 0000 	mov.w	r0, #0
 8004786:	f380 8811 	msr	BASEPRI, r0
 800478a:	4770      	bx	lr
 800478c:	f3af 8000 	nop.w

08004790 <pxCurrentTCBConst2>:
 8004790:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004794:	bf00      	nop
 8004796:	bf00      	nop

08004798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004798:	4808      	ldr	r0, [pc, #32]	; (80047bc <prvPortStartFirstTask+0x24>)
 800479a:	6800      	ldr	r0, [r0, #0]
 800479c:	6800      	ldr	r0, [r0, #0]
 800479e:	f380 8808 	msr	MSP, r0
 80047a2:	f04f 0000 	mov.w	r0, #0
 80047a6:	f380 8814 	msr	CONTROL, r0
 80047aa:	b662      	cpsie	i
 80047ac:	b661      	cpsie	f
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	df00      	svc	0
 80047b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80047ba:	bf00      	nop
 80047bc:	e000ed08 	.word	0xe000ed08

080047c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80047c6:	4b44      	ldr	r3, [pc, #272]	; (80048d8 <xPortStartScheduler+0x118>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a44      	ldr	r2, [pc, #272]	; (80048dc <xPortStartScheduler+0x11c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d109      	bne.n	80047e4 <xPortStartScheduler+0x24>
 80047d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	613b      	str	r3, [r7, #16]
 80047e2:	e7fe      	b.n	80047e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80047e4:	4b3c      	ldr	r3, [pc, #240]	; (80048d8 <xPortStartScheduler+0x118>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a3d      	ldr	r2, [pc, #244]	; (80048e0 <xPortStartScheduler+0x120>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d109      	bne.n	8004802 <xPortStartScheduler+0x42>
 80047ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	e7fe      	b.n	8004800 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004802:	4b38      	ldr	r3, [pc, #224]	; (80048e4 <xPortStartScheduler+0x124>)
 8004804:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	b2db      	uxtb	r3, r3
 800480c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	22ff      	movs	r2, #255	; 0xff
 8004812:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	b2db      	uxtb	r3, r3
 800481a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800481c:	78fb      	ldrb	r3, [r7, #3]
 800481e:	b2db      	uxtb	r3, r3
 8004820:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004824:	b2da      	uxtb	r2, r3
 8004826:	4b30      	ldr	r3, [pc, #192]	; (80048e8 <xPortStartScheduler+0x128>)
 8004828:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800482a:	4b30      	ldr	r3, [pc, #192]	; (80048ec <xPortStartScheduler+0x12c>)
 800482c:	2207      	movs	r2, #7
 800482e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004830:	e009      	b.n	8004846 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004832:	4b2e      	ldr	r3, [pc, #184]	; (80048ec <xPortStartScheduler+0x12c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3b01      	subs	r3, #1
 8004838:	4a2c      	ldr	r2, [pc, #176]	; (80048ec <xPortStartScheduler+0x12c>)
 800483a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800483c:	78fb      	ldrb	r3, [r7, #3]
 800483e:	b2db      	uxtb	r3, r3
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	b2db      	uxtb	r3, r3
 8004844:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004846:	78fb      	ldrb	r3, [r7, #3]
 8004848:	b2db      	uxtb	r3, r3
 800484a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484e:	2b80      	cmp	r3, #128	; 0x80
 8004850:	d0ef      	beq.n	8004832 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004852:	4b26      	ldr	r3, [pc, #152]	; (80048ec <xPortStartScheduler+0x12c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f1c3 0307 	rsb	r3, r3, #7
 800485a:	2b04      	cmp	r3, #4
 800485c:	d009      	beq.n	8004872 <xPortStartScheduler+0xb2>
 800485e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004862:	f383 8811 	msr	BASEPRI, r3
 8004866:	f3bf 8f6f 	isb	sy
 800486a:	f3bf 8f4f 	dsb	sy
 800486e:	60bb      	str	r3, [r7, #8]
 8004870:	e7fe      	b.n	8004870 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004872:	4b1e      	ldr	r3, [pc, #120]	; (80048ec <xPortStartScheduler+0x12c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	021b      	lsls	r3, r3, #8
 8004878:	4a1c      	ldr	r2, [pc, #112]	; (80048ec <xPortStartScheduler+0x12c>)
 800487a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800487c:	4b1b      	ldr	r3, [pc, #108]	; (80048ec <xPortStartScheduler+0x12c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004884:	4a19      	ldr	r2, [pc, #100]	; (80048ec <xPortStartScheduler+0x12c>)
 8004886:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	b2da      	uxtb	r2, r3
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004890:	4b17      	ldr	r3, [pc, #92]	; (80048f0 <xPortStartScheduler+0x130>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a16      	ldr	r2, [pc, #88]	; (80048f0 <xPortStartScheduler+0x130>)
 8004896:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800489a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800489c:	4b14      	ldr	r3, [pc, #80]	; (80048f0 <xPortStartScheduler+0x130>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a13      	ldr	r2, [pc, #76]	; (80048f0 <xPortStartScheduler+0x130>)
 80048a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80048a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80048a8:	f000 f8d6 	bl	8004a58 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80048ac:	4b11      	ldr	r3, [pc, #68]	; (80048f4 <xPortStartScheduler+0x134>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80048b2:	f000 f8f5 	bl	8004aa0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80048b6:	4b10      	ldr	r3, [pc, #64]	; (80048f8 <xPortStartScheduler+0x138>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a0f      	ldr	r2, [pc, #60]	; (80048f8 <xPortStartScheduler+0x138>)
 80048bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80048c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80048c2:	f7ff ff69 	bl	8004798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80048c6:	f7ff fd57 	bl	8004378 <vTaskSwitchContext>
	prvTaskExitError();
 80048ca:	f7ff ff21 	bl	8004710 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	e000ed00 	.word	0xe000ed00
 80048dc:	410fc271 	.word	0x410fc271
 80048e0:	410fc270 	.word	0x410fc270
 80048e4:	e000e400 	.word	0xe000e400
 80048e8:	200003ac 	.word	0x200003ac
 80048ec:	200003b0 	.word	0x200003b0
 80048f0:	e000ed20 	.word	0xe000ed20
 80048f4:	2000000c 	.word	0x2000000c
 80048f8:	e000ef34 	.word	0xe000ef34

080048fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004906:	f383 8811 	msr	BASEPRI, r3
 800490a:	f3bf 8f6f 	isb	sy
 800490e:	f3bf 8f4f 	dsb	sy
 8004912:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004914:	4b0e      	ldr	r3, [pc, #56]	; (8004950 <vPortEnterCritical+0x54>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3301      	adds	r3, #1
 800491a:	4a0d      	ldr	r2, [pc, #52]	; (8004950 <vPortEnterCritical+0x54>)
 800491c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800491e:	4b0c      	ldr	r3, [pc, #48]	; (8004950 <vPortEnterCritical+0x54>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d10e      	bne.n	8004944 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004926:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <vPortEnterCritical+0x58>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d009      	beq.n	8004944 <vPortEnterCritical+0x48>
 8004930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004934:	f383 8811 	msr	BASEPRI, r3
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	603b      	str	r3, [r7, #0]
 8004942:	e7fe      	b.n	8004942 <vPortEnterCritical+0x46>
	}
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	2000000c 	.word	0x2000000c
 8004954:	e000ed04 	.word	0xe000ed04

08004958 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800495e:	4b11      	ldr	r3, [pc, #68]	; (80049a4 <vPortExitCritical+0x4c>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d109      	bne.n	800497a <vPortExitCritical+0x22>
 8004966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496a:	f383 8811 	msr	BASEPRI, r3
 800496e:	f3bf 8f6f 	isb	sy
 8004972:	f3bf 8f4f 	dsb	sy
 8004976:	607b      	str	r3, [r7, #4]
 8004978:	e7fe      	b.n	8004978 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800497a:	4b0a      	ldr	r3, [pc, #40]	; (80049a4 <vPortExitCritical+0x4c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3b01      	subs	r3, #1
 8004980:	4a08      	ldr	r2, [pc, #32]	; (80049a4 <vPortExitCritical+0x4c>)
 8004982:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004984:	4b07      	ldr	r3, [pc, #28]	; (80049a4 <vPortExitCritical+0x4c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d104      	bne.n	8004996 <vPortExitCritical+0x3e>
 800498c:	2300      	movs	r3, #0
 800498e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	2000000c 	.word	0x2000000c
	...

080049b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80049b0:	f3ef 8009 	mrs	r0, PSP
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	4b15      	ldr	r3, [pc, #84]	; (8004a10 <pxCurrentTCBConst>)
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	f01e 0f10 	tst.w	lr, #16
 80049c0:	bf08      	it	eq
 80049c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80049c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ca:	6010      	str	r0, [r2, #0]
 80049cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80049d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80049d4:	f380 8811 	msr	BASEPRI, r0
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f7ff fcca 	bl	8004378 <vTaskSwitchContext>
 80049e4:	f04f 0000 	mov.w	r0, #0
 80049e8:	f380 8811 	msr	BASEPRI, r0
 80049ec:	bc09      	pop	{r0, r3}
 80049ee:	6819      	ldr	r1, [r3, #0]
 80049f0:	6808      	ldr	r0, [r1, #0]
 80049f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049f6:	f01e 0f10 	tst.w	lr, #16
 80049fa:	bf08      	it	eq
 80049fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004a00:	f380 8809 	msr	PSP, r0
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	f3af 8000 	nop.w

08004a10 <pxCurrentTCBConst>:
 8004a10:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004a14:	bf00      	nop
 8004a16:	bf00      	nop

08004a18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a30:	f7ff fbe6 	bl	8004200 <xTaskIncrementTick>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a3a:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <SysTick_Handler+0x3c>)
 8004a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	2300      	movs	r3, #0
 8004a44:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a4c:	bf00      	nop
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	e000ed04 	.word	0xe000ed04

08004a58 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a5c:	4b0b      	ldr	r3, [pc, #44]	; (8004a8c <vPortSetupTimerInterrupt+0x34>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a62:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <vPortSetupTimerInterrupt+0x38>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a68:	4b0a      	ldr	r3, [pc, #40]	; (8004a94 <vPortSetupTimerInterrupt+0x3c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a0a      	ldr	r2, [pc, #40]	; (8004a98 <vPortSetupTimerInterrupt+0x40>)
 8004a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a72:	099b      	lsrs	r3, r3, #6
 8004a74:	4a09      	ldr	r2, [pc, #36]	; (8004a9c <vPortSetupTimerInterrupt+0x44>)
 8004a76:	3b01      	subs	r3, #1
 8004a78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a7a:	4b04      	ldr	r3, [pc, #16]	; (8004a8c <vPortSetupTimerInterrupt+0x34>)
 8004a7c:	2207      	movs	r2, #7
 8004a7e:	601a      	str	r2, [r3, #0]
}
 8004a80:	bf00      	nop
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	e000e010 	.word	0xe000e010
 8004a90:	e000e018 	.word	0xe000e018
 8004a94:	20000000 	.word	0x20000000
 8004a98:	10624dd3 	.word	0x10624dd3
 8004a9c:	e000e014 	.word	0xe000e014

08004aa0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004aa0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004ab0 <vPortEnableVFP+0x10>
 8004aa4:	6801      	ldr	r1, [r0, #0]
 8004aa6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004aaa:	6001      	str	r1, [r0, #0]
 8004aac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004aae:	bf00      	nop
 8004ab0:	e000ed88 	.word	0xe000ed88

08004ab4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b08a      	sub	sp, #40	; 0x28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004abc:	2300      	movs	r3, #0
 8004abe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ac0:	f7ff fae4 	bl	800408c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ac4:	4b57      	ldr	r3, [pc, #348]	; (8004c24 <pvPortMalloc+0x170>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004acc:	f000 f90c 	bl	8004ce8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ad0:	4b55      	ldr	r3, [pc, #340]	; (8004c28 <pvPortMalloc+0x174>)
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f040 808c 	bne.w	8004bf6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d01c      	beq.n	8004b1e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004ae4:	2208      	movs	r2, #8
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4413      	add	r3, r2
 8004aea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f003 0307 	and.w	r3, r3, #7
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d013      	beq.n	8004b1e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f023 0307 	bic.w	r3, r3, #7
 8004afc:	3308      	adds	r3, #8
 8004afe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d009      	beq.n	8004b1e <pvPortMalloc+0x6a>
	__asm volatile
 8004b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	e7fe      	b.n	8004b1c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d068      	beq.n	8004bf6 <pvPortMalloc+0x142>
 8004b24:	4b41      	ldr	r3, [pc, #260]	; (8004c2c <pvPortMalloc+0x178>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d863      	bhi.n	8004bf6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b2e:	4b40      	ldr	r3, [pc, #256]	; (8004c30 <pvPortMalloc+0x17c>)
 8004b30:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b32:	4b3f      	ldr	r3, [pc, #252]	; (8004c30 <pvPortMalloc+0x17c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b38:	e004      	b.n	8004b44 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d903      	bls.n	8004b56 <pvPortMalloc+0xa2>
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1f1      	bne.n	8004b3a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b56:	4b33      	ldr	r3, [pc, #204]	; (8004c24 <pvPortMalloc+0x170>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d04a      	beq.n	8004bf6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2208      	movs	r2, #8
 8004b66:	4413      	add	r3, r2
 8004b68:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	6a3b      	ldr	r3, [r7, #32]
 8004b70:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	1ad2      	subs	r2, r2, r3
 8004b7a:	2308      	movs	r3, #8
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d91e      	bls.n	8004bc0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4413      	add	r3, r2
 8004b88:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d009      	beq.n	8004ba8 <pvPortMalloc+0xf4>
 8004b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b98:	f383 8811 	msr	BASEPRI, r3
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	613b      	str	r3, [r7, #16]
 8004ba6:	e7fe      	b.n	8004ba6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	1ad2      	subs	r2, r2, r3
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004bba:	69b8      	ldr	r0, [r7, #24]
 8004bbc:	f000 f8f6 	bl	8004dac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004bc0:	4b1a      	ldr	r3, [pc, #104]	; (8004c2c <pvPortMalloc+0x178>)
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	4a18      	ldr	r2, [pc, #96]	; (8004c2c <pvPortMalloc+0x178>)
 8004bcc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004bce:	4b17      	ldr	r3, [pc, #92]	; (8004c2c <pvPortMalloc+0x178>)
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	4b18      	ldr	r3, [pc, #96]	; (8004c34 <pvPortMalloc+0x180>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d203      	bcs.n	8004be2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004bda:	4b14      	ldr	r3, [pc, #80]	; (8004c2c <pvPortMalloc+0x178>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a15      	ldr	r2, [pc, #84]	; (8004c34 <pvPortMalloc+0x180>)
 8004be0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	4b10      	ldr	r3, [pc, #64]	; (8004c28 <pvPortMalloc+0x174>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	431a      	orrs	r2, r3
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004bf6:	f7ff fa57 	bl	80040a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	f003 0307 	and.w	r3, r3, #7
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d009      	beq.n	8004c18 <pvPortMalloc+0x164>
 8004c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	e7fe      	b.n	8004c16 <pvPortMalloc+0x162>
	return pvReturn;
 8004c18:	69fb      	ldr	r3, [r7, #28]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3728      	adds	r7, #40	; 0x28
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	20003fbc 	.word	0x20003fbc
 8004c28:	20003fc8 	.word	0x20003fc8
 8004c2c:	20003fc0 	.word	0x20003fc0
 8004c30:	20003fb4 	.word	0x20003fb4
 8004c34:	20003fc4 	.word	0x20003fc4

08004c38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d046      	beq.n	8004cd8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c4a:	2308      	movs	r3, #8
 8004c4c:	425b      	negs	r3, r3
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	4413      	add	r3, r2
 8004c52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	4b20      	ldr	r3, [pc, #128]	; (8004ce0 <vPortFree+0xa8>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4013      	ands	r3, r2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d109      	bne.n	8004c7a <vPortFree+0x42>
 8004c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6a:	f383 8811 	msr	BASEPRI, r3
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	e7fe      	b.n	8004c78 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d009      	beq.n	8004c96 <vPortFree+0x5e>
 8004c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	60bb      	str	r3, [r7, #8]
 8004c94:	e7fe      	b.n	8004c94 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	4b11      	ldr	r3, [pc, #68]	; (8004ce0 <vPortFree+0xa8>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d019      	beq.n	8004cd8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d115      	bne.n	8004cd8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <vPortFree+0xa8>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	43db      	mvns	r3, r3
 8004cb6:	401a      	ands	r2, r3
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004cbc:	f7ff f9e6 	bl	800408c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	4b07      	ldr	r3, [pc, #28]	; (8004ce4 <vPortFree+0xac>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4413      	add	r3, r2
 8004cca:	4a06      	ldr	r2, [pc, #24]	; (8004ce4 <vPortFree+0xac>)
 8004ccc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004cce:	6938      	ldr	r0, [r7, #16]
 8004cd0:	f000 f86c 	bl	8004dac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004cd4:	f7ff f9e8 	bl	80040a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004cd8:	bf00      	nop
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	20003fc8 	.word	0x20003fc8
 8004ce4:	20003fc0 	.word	0x20003fc0

08004ce8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004cee:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004cf2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004cf4:	4b27      	ldr	r3, [pc, #156]	; (8004d94 <prvHeapInit+0xac>)
 8004cf6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f003 0307 	and.w	r3, r3, #7
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00c      	beq.n	8004d1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	3307      	adds	r3, #7
 8004d06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0307 	bic.w	r3, r3, #7
 8004d0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	4a1f      	ldr	r2, [pc, #124]	; (8004d94 <prvHeapInit+0xac>)
 8004d18:	4413      	add	r3, r2
 8004d1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d20:	4a1d      	ldr	r2, [pc, #116]	; (8004d98 <prvHeapInit+0xb0>)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d26:	4b1c      	ldr	r3, [pc, #112]	; (8004d98 <prvHeapInit+0xb0>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	4413      	add	r3, r2
 8004d32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d34:	2208      	movs	r2, #8
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	1a9b      	subs	r3, r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f023 0307 	bic.w	r3, r3, #7
 8004d42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4a15      	ldr	r2, [pc, #84]	; (8004d9c <prvHeapInit+0xb4>)
 8004d48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d4a:	4b14      	ldr	r3, [pc, #80]	; (8004d9c <prvHeapInit+0xb4>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d52:	4b12      	ldr	r3, [pc, #72]	; (8004d9c <prvHeapInit+0xb4>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2200      	movs	r2, #0
 8004d58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	1ad2      	subs	r2, r2, r3
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d68:	4b0c      	ldr	r3, [pc, #48]	; (8004d9c <prvHeapInit+0xb4>)
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	4a0a      	ldr	r2, [pc, #40]	; (8004da0 <prvHeapInit+0xb8>)
 8004d76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	4a09      	ldr	r2, [pc, #36]	; (8004da4 <prvHeapInit+0xbc>)
 8004d7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d80:	4b09      	ldr	r3, [pc, #36]	; (8004da8 <prvHeapInit+0xc0>)
 8004d82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d86:	601a      	str	r2, [r3, #0]
}
 8004d88:	bf00      	nop
 8004d8a:	3714      	adds	r7, #20
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr
 8004d94:	200003b4 	.word	0x200003b4
 8004d98:	20003fb4 	.word	0x20003fb4
 8004d9c:	20003fbc 	.word	0x20003fbc
 8004da0:	20003fc4 	.word	0x20003fc4
 8004da4:	20003fc0 	.word	0x20003fc0
 8004da8:	20003fc8 	.word	0x20003fc8

08004dac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004db4:	4b28      	ldr	r3, [pc, #160]	; (8004e58 <prvInsertBlockIntoFreeList+0xac>)
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	e002      	b.n	8004dc0 <prvInsertBlockIntoFreeList+0x14>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d8f7      	bhi.n	8004dba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d108      	bne.n	8004dee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	441a      	add	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	441a      	add	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d118      	bne.n	8004e34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	4b15      	ldr	r3, [pc, #84]	; (8004e5c <prvInsertBlockIntoFreeList+0xb0>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d00d      	beq.n	8004e2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	441a      	add	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	e008      	b.n	8004e3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e2a:	4b0c      	ldr	r3, [pc, #48]	; (8004e5c <prvInsertBlockIntoFreeList+0xb0>)
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	601a      	str	r2, [r3, #0]
 8004e32:	e003      	b.n	8004e3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d002      	beq.n	8004e4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e4a:	bf00      	nop
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	20003fb4 	.word	0x20003fb4
 8004e5c:	20003fbc 	.word	0x20003fbc

08004e60 <__libc_init_array>:
 8004e60:	b570      	push	{r4, r5, r6, lr}
 8004e62:	4e0d      	ldr	r6, [pc, #52]	; (8004e98 <__libc_init_array+0x38>)
 8004e64:	4c0d      	ldr	r4, [pc, #52]	; (8004e9c <__libc_init_array+0x3c>)
 8004e66:	1ba4      	subs	r4, r4, r6
 8004e68:	10a4      	asrs	r4, r4, #2
 8004e6a:	2500      	movs	r5, #0
 8004e6c:	42a5      	cmp	r5, r4
 8004e6e:	d109      	bne.n	8004e84 <__libc_init_array+0x24>
 8004e70:	4e0b      	ldr	r6, [pc, #44]	; (8004ea0 <__libc_init_array+0x40>)
 8004e72:	4c0c      	ldr	r4, [pc, #48]	; (8004ea4 <__libc_init_array+0x44>)
 8004e74:	f000 f820 	bl	8004eb8 <_init>
 8004e78:	1ba4      	subs	r4, r4, r6
 8004e7a:	10a4      	asrs	r4, r4, #2
 8004e7c:	2500      	movs	r5, #0
 8004e7e:	42a5      	cmp	r5, r4
 8004e80:	d105      	bne.n	8004e8e <__libc_init_array+0x2e>
 8004e82:	bd70      	pop	{r4, r5, r6, pc}
 8004e84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e88:	4798      	blx	r3
 8004e8a:	3501      	adds	r5, #1
 8004e8c:	e7ee      	b.n	8004e6c <__libc_init_array+0xc>
 8004e8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e92:	4798      	blx	r3
 8004e94:	3501      	adds	r5, #1
 8004e96:	e7f2      	b.n	8004e7e <__libc_init_array+0x1e>
 8004e98:	08004f50 	.word	0x08004f50
 8004e9c:	08004f50 	.word	0x08004f50
 8004ea0:	08004f50 	.word	0x08004f50
 8004ea4:	08004f54 	.word	0x08004f54

08004ea8 <memset>:
 8004ea8:	4402      	add	r2, r0
 8004eaa:	4603      	mov	r3, r0
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d100      	bne.n	8004eb2 <memset+0xa>
 8004eb0:	4770      	bx	lr
 8004eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8004eb6:	e7f9      	b.n	8004eac <memset+0x4>

08004eb8 <_init>:
 8004eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eba:	bf00      	nop
 8004ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ebe:	bc08      	pop	{r3}
 8004ec0:	469e      	mov	lr, r3
 8004ec2:	4770      	bx	lr

08004ec4 <_fini>:
 8004ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ec6:	bf00      	nop
 8004ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eca:	bc08      	pop	{r3}
 8004ecc:	469e      	mov	lr, r3
 8004ece:	4770      	bx	lr
