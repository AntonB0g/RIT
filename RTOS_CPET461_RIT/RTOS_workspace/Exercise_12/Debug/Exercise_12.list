
Exercise_12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a74  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005c14  08005c14  00015c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cb4  08005cb4  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005cb4  08005cb4  00015cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cbc  08005cbc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cbc  08005cbc  00015cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cc0  08005cc0  00015cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005cc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000414c  20000014  08005cd8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004160  08005cd8  00024160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000179f7  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003249  00000000  00000000  00037a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001580  00000000  00000000  0003ac88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001428  00000000  00000000  0003c208  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000181fe  00000000  00000000  0003d630  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010b7e  00000000  00000000  0005582e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000980bc  00000000  00000000  000663ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fe468  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a9c  00000000  00000000  000fe4e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005bfc 	.word	0x08005bfc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	08005bfc 	.word	0x08005bfc

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	20000030 	.word	0x20000030
 8000510:	20000084 	.word	0x20000084

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b098      	sub	sp, #96	; 0x60
 8000518:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fe03 	bl	8001124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f85f 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f9a3 	bl	800086c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000526:	f000 f8df 	bl	80006e8 <MX_I2C1_Init>
  MX_I2S2_Init();
 800052a:	f000 f90b 	bl	8000744 <MX_I2S2_Init>
  MX_I2S3_Init();
 800052e:	f000 f937 	bl	80007a0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000532:	f000 f965 	bl	8000800 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of CriticalResourceMutex */
  osMutexDef(CriticalResourceMutex);
 8000536:	2300      	movs	r3, #0
 8000538:	65bb      	str	r3, [r7, #88]	; 0x58
 800053a:	2300      	movs	r3, #0
 800053c:	65fb      	str	r3, [r7, #92]	; 0x5c
  CriticalResourceMutexHandle = osMutexCreate(osMutex(CriticalResourceMutex));
 800053e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000542:	4618      	mov	r0, r3
 8000544:	f002 ff7b 	bl	800343e <osMutexCreate>
 8000548:	4602      	mov	r2, r0
 800054a:	4b1e      	ldr	r3, [pc, #120]	; (80005c4 <main+0xb0>)
 800054c:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of GreenLED_Task */
  osThreadDef(GreenLED_Task, Start_GreenLED_Task, osPriorityNormal, 0, 128);
 800054e:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <main+0xb4>)
 8000550:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000554:	461d      	mov	r5, r3
 8000556:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000558:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800055a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800055e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GreenLED_TaskHandle = osThreadCreate(osThread(GreenLED_Task), NULL);
 8000562:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000566:	2100      	movs	r1, #0
 8000568:	4618      	mov	r0, r3
 800056a:	f002 ff08 	bl	800337e <osThreadCreate>
 800056e:	4602      	mov	r2, r0
 8000570:	4b16      	ldr	r3, [pc, #88]	; (80005cc <main+0xb8>)
 8000572:	601a      	str	r2, [r3, #0]

  /* definition and creation of RedLED_Task */
  osThreadDef(RedLED_Task, Start_RedLED_Task, osPriorityHigh, 0, 128);
 8000574:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <main+0xbc>)
 8000576:	f107 0420 	add.w	r4, r7, #32
 800057a:	461d      	mov	r5, r3
 800057c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800057e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000580:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000584:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RedLED_TaskHandle = osThreadCreate(osThread(RedLED_Task), NULL);
 8000588:	f107 0320 	add.w	r3, r7, #32
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f002 fef5 	bl	800337e <osThreadCreate>
 8000594:	4602      	mov	r2, r0
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <main+0xc0>)
 8000598:	601a      	str	r2, [r3, #0]

  /* definition and creation of OrangeLED_Task */
  osThreadDef(OrangeLED_Task, Start_OrangeLED_Task, osPriorityAboveNormal, 0, 128);
 800059a:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <main+0xc4>)
 800059c:	1d3c      	adds	r4, r7, #4
 800059e:	461d      	mov	r5, r3
 80005a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  OrangeLED_TaskHandle = osThreadCreate(osThread(OrangeLED_Task), NULL);
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f002 fee4 	bl	800337e <osThreadCreate>
 80005b6:	4602      	mov	r2, r0
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <main+0xc8>)
 80005ba:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005bc:	f002 fed8 	bl	8003370 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <main+0xac>
 80005c2:	bf00      	nop
 80005c4:	20004084 	.word	0x20004084
 80005c8:	08005c24 	.word	0x08005c24
 80005cc:	20004080 	.word	0x20004080
 80005d0:	08005c4c 	.word	0x08005c4c
 80005d4:	20004088 	.word	0x20004088
 80005d8:	08005c78 	.word	0x08005c78
 80005dc:	20004024 	.word	0x20004024

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b09a      	sub	sp, #104	; 0x68
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005ea:	2230      	movs	r2, #48	; 0x30
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f005 fafb 	bl	8005bea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
 8000614:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemClock_Config+0x100>)
 800061c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061e:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemClock_Config+0x100>)
 8000620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000624:	6413      	str	r3, [r2, #64]	; 0x40
 8000626:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemClock_Config+0x100>)
 8000628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	4b2b      	ldr	r3, [pc, #172]	; (80006e4 <SystemClock_Config+0x104>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a2a      	ldr	r2, [pc, #168]	; (80006e4 <SystemClock_Config+0x104>)
 800063c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000640:	6013      	str	r3, [r2, #0]
 8000642:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <SystemClock_Config+0x104>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064e:	2301      	movs	r3, #1
 8000650:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000652:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000660:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000662:	2304      	movs	r3, #4
 8000664:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000666:	23c0      	movs	r3, #192	; 0xc0
 8000668:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800066a:	2304      	movs	r3, #4
 800066c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800066e:	2308      	movs	r3, #8
 8000670:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000672:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fdec 	bl	8002254 <HAL_RCC_OscConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000682:	f000 fb01 	bl	8000c88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000686:	230f      	movs	r3, #15
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068a:	2302      	movs	r3, #2
 800068c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000692:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000696:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800069c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a0:	2103      	movs	r1, #3
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 f846 	bl	8002734 <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006ae:	f000 faeb 	bl	8000c88 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006b2:	2301      	movs	r3, #1
 80006b4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80006b6:	23c8      	movs	r3, #200	; 0xc8
 80006b8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80006ba:	2305      	movs	r3, #5
 80006bc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006be:	2302      	movs	r3, #2
 80006c0:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 fa58 	bl	8002b7c <HAL_RCCEx_PeriphCLKConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80006d2:	f000 fad9 	bl	8000c88 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3768      	adds	r7, #104	; 0x68
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_I2C1_Init+0x50>)
 80006ee:	4a13      	ldr	r2, [pc, #76]	; (800073c <MX_I2C1_Init+0x54>)
 80006f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_I2C1_Init+0x50>)
 80006f4:	4a12      	ldr	r2, [pc, #72]	; (8000740 <MX_I2C1_Init+0x58>)
 80006f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_I2C1_Init+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_I2C1_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_I2C1_Init+0x50>)
 8000706:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800070a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <MX_I2C1_Init+0x50>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_I2C1_Init+0x50>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <MX_I2C1_Init+0x50>)
 8000726:	f000 ffbd 	bl	80016a4 <HAL_I2C_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000730:	f000 faaa 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20003fd0 	.word	0x20003fd0
 800073c:	40005400 	.word	0x40005400
 8000740:	000186a0 	.word	0x000186a0

08000744 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_I2S2_Init+0x50>)
 800074a:	4a13      	ldr	r2, [pc, #76]	; (8000798 <MX_I2S2_Init+0x54>)
 800074c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_I2S2_Init+0x50>)
 8000750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000754:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_I2S2_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800075c:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <MX_I2S2_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_I2S2_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <MX_I2S2_Init+0x50>)
 800076a:	4a0c      	ldr	r2, [pc, #48]	; (800079c <MX_I2S2_Init+0x58>)
 800076c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_I2S2_Init+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <MX_I2S2_Init+0x50>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_I2S2_Init+0x50>)
 800077c:	2201      	movs	r2, #1
 800077e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_I2S2_Init+0x50>)
 8000782:	f001 f8c7 	bl	8001914 <HAL_I2S_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 800078c:	f000 fa7c 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	2000408c 	.word	0x2000408c
 8000798:	40003800 	.word	0x40003800
 800079c:	00017700 	.word	0x00017700

080007a0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007a4:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <MX_I2S3_Init+0x54>)
 80007a6:	4a14      	ldr	r2, [pc, #80]	; (80007f8 <MX_I2S3_Init+0x58>)
 80007a8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007aa:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_I2S3_Init+0x54>)
 80007ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <MX_I2S3_Init+0x54>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_I2S3_Init+0x54>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007be:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <MX_I2S3_Init+0x54>)
 80007c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <MX_I2S3_Init+0x54>)
 80007c8:	4a0c      	ldr	r2, [pc, #48]	; (80007fc <MX_I2S3_Init+0x5c>)
 80007ca:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_I2S3_Init+0x54>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <MX_I2S3_Init+0x54>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_I2S3_Init+0x54>)
 80007da:	2200      	movs	r2, #0
 80007dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_I2S3_Init+0x54>)
 80007e0:	f001 f898 	bl	8001914 <HAL_I2S_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007ea:	f000 fa4d 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200040d4 	.word	0x200040d4
 80007f8:	40003c00 	.word	0x40003c00
 80007fc:	00017700 	.word	0x00017700

08000800 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000804:	4b17      	ldr	r3, [pc, #92]	; (8000864 <MX_SPI1_Init+0x64>)
 8000806:	4a18      	ldr	r2, [pc, #96]	; (8000868 <MX_SPI1_Init+0x68>)
 8000808:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800080a:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_SPI1_Init+0x64>)
 800080c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000810:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_SPI1_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_SPI1_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_SPI1_Init+0x64>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_SPI1_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_SPI1_Init+0x64>)
 800082c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000830:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_SPI1_Init+0x64>)
 8000834:	2200      	movs	r2, #0
 8000836:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000838:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <MX_SPI1_Init+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_SPI1_Init+0x64>)
 8000840:	2200      	movs	r2, #0
 8000842:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <MX_SPI1_Init+0x64>)
 8000846:	2200      	movs	r2, #0
 8000848:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_SPI1_Init+0x64>)
 800084c:	220a      	movs	r2, #10
 800084e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000850:	4804      	ldr	r0, [pc, #16]	; (8000864 <MX_SPI1_Init+0x64>)
 8000852:	f002 fae1 	bl	8002e18 <HAL_SPI_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800085c:	f000 fa14 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20004028 	.word	0x20004028
 8000868:	40013000 	.word	0x40013000

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08c      	sub	sp, #48	; 0x30
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	61bb      	str	r3, [r7, #24]
 8000886:	4b6f      	ldr	r3, [pc, #444]	; (8000a44 <MX_GPIO_Init+0x1d8>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a6e      	ldr	r2, [pc, #440]	; (8000a44 <MX_GPIO_Init+0x1d8>)
 800088c:	f043 0310 	orr.w	r3, r3, #16
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b6c      	ldr	r3, [pc, #432]	; (8000a44 <MX_GPIO_Init+0x1d8>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0310 	and.w	r3, r3, #16
 800089a:	61bb      	str	r3, [r7, #24]
 800089c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
 80008a2:	4b68      	ldr	r3, [pc, #416]	; (8000a44 <MX_GPIO_Init+0x1d8>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a67      	ldr	r2, [pc, #412]	; (8000a44 <MX_GPIO_Init+0x1d8>)
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b65      	ldr	r3, [pc, #404]	; (8000a44 <MX_GPIO_Init+0x1d8>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0304 	and.w	r3, r3, #4
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	4b61      	ldr	r3, [pc, #388]	; (8000a44 <MX_GPIO_Init+0x1d8>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a60      	ldr	r2, [pc, #384]	; (8000a44 <MX_GPIO_Init+0x1d8>)
 80008c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b5e      	ldr	r3, [pc, #376]	; (8000a44 <MX_GPIO_Init+0x1d8>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	4b5a      	ldr	r3, [pc, #360]	; (8000a44 <MX_GPIO_Init+0x1d8>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a59      	ldr	r2, [pc, #356]	; (8000a44 <MX_GPIO_Init+0x1d8>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b57      	ldr	r3, [pc, #348]	; (8000a44 <MX_GPIO_Init+0x1d8>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	4b53      	ldr	r3, [pc, #332]	; (8000a44 <MX_GPIO_Init+0x1d8>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a52      	ldr	r2, [pc, #328]	; (8000a44 <MX_GPIO_Init+0x1d8>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b50      	ldr	r3, [pc, #320]	; (8000a44 <MX_GPIO_Init+0x1d8>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4b4c      	ldr	r3, [pc, #304]	; (8000a44 <MX_GPIO_Init+0x1d8>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a4b      	ldr	r2, [pc, #300]	; (8000a44 <MX_GPIO_Init+0x1d8>)
 8000918:	f043 0308 	orr.w	r3, r3, #8
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b49      	ldr	r3, [pc, #292]	; (8000a44 <MX_GPIO_Init+0x1d8>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0308 	and.w	r3, r3, #8
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	2108      	movs	r1, #8
 800092e:	4846      	ldr	r0, [pc, #280]	; (8000a48 <MX_GPIO_Init+0x1dc>)
 8000930:	f000 fe9e 	bl	8001670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000934:	2201      	movs	r2, #1
 8000936:	2101      	movs	r1, #1
 8000938:	4844      	ldr	r0, [pc, #272]	; (8000a4c <MX_GPIO_Init+0x1e0>)
 800093a:	f000 fe99 	bl	8001670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800093e:	2200      	movs	r2, #0
 8000940:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000944:	4842      	ldr	r0, [pc, #264]	; (8000a50 <MX_GPIO_Init+0x1e4>)
 8000946:	f000 fe93 	bl	8001670 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800094a:	2304      	movs	r3, #4
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094e:	2300      	movs	r3, #0
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	483a      	ldr	r0, [pc, #232]	; (8000a48 <MX_GPIO_Init+0x1dc>)
 800095e:	f000 fd05 	bl	800136c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000962:	2308      	movs	r3, #8
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	2301      	movs	r3, #1
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4833      	ldr	r0, [pc, #204]	; (8000a48 <MX_GPIO_Init+0x1dc>)
 800097a:	f000 fcf7 	bl	800136c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800097e:	2332      	movs	r3, #50	; 0x32
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000982:	4b34      	ldr	r3, [pc, #208]	; (8000a54 <MX_GPIO_Init+0x1e8>)
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	482d      	ldr	r0, [pc, #180]	; (8000a48 <MX_GPIO_Init+0x1dc>)
 8000992:	f000 fceb 	bl	800136c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000996:	2301      	movs	r3, #1
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4827      	ldr	r0, [pc, #156]	; (8000a4c <MX_GPIO_Init+0x1e0>)
 80009ae:	f000 fcdd 	bl	800136c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009b2:	2301      	movs	r3, #1
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009b6:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <MX_GPIO_Init+0x1e8>)
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4824      	ldr	r0, [pc, #144]	; (8000a58 <MX_GPIO_Init+0x1ec>)
 80009c6:	f000 fcd1 	bl	800136c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80009ca:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009ce:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	481b      	ldr	r0, [pc, #108]	; (8000a50 <MX_GPIO_Init+0x1e4>)
 80009e4:	f000 fcc2 	bl	800136c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4816      	ldr	r0, [pc, #88]	; (8000a58 <MX_GPIO_Init+0x1ec>)
 80009fe:	f000 fcb5 	bl	800136c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a02:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a10:	2303      	movs	r3, #3
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a14:	230a      	movs	r3, #10
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480e      	ldr	r0, [pc, #56]	; (8000a58 <MX_GPIO_Init+0x1ec>)
 8000a20:	f000 fca4 	bl	800136c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a24:	2320      	movs	r3, #32
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	4806      	ldr	r0, [pc, #24]	; (8000a50 <MX_GPIO_Init+0x1e4>)
 8000a38:	f000 fc98 	bl	800136c <HAL_GPIO_Init>

}
 8000a3c:	bf00      	nop
 8000a3e:	3730      	adds	r7, #48	; 0x30
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40020800 	.word	0x40020800
 8000a50:	40020c00 	.word	0x40020c00
 8000a54:	10120000 	.word	0x10120000
 8000a58:	40020000 	.word	0x40020000

08000a5c <Access_Function>:

/* USER CODE BEGIN 4 */
void Access_Function()
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
	osMutexWait(CriticalResourceMutexHandle, osWaitForever);// semaphore P (wait for forever)
 8000a62:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <Access_Function+0x9c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f04f 31ff 	mov.w	r1, #4294967295
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f002 fd00 	bl	8003470 <osMutexWait>
	if (Start_Flag == 1)
 8000a70:	4b22      	ldr	r3, [pc, #136]	; (8000afc <Access_Function+0xa0>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d103      	bne.n	8000a80 <Access_Function+0x24>
	{
		Start_Flag = 0;
 8000a78:	4b20      	ldr	r3, [pc, #128]	; (8000afc <Access_Function+0xa0>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	e005      	b.n	8000a8c <Access_Function+0x30>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOD, blue, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a86:	481e      	ldr	r0, [pc, #120]	; (8000b00 <Access_Function+0xa4>)
 8000a88:	f000 fdf2 	bl	8001670 <HAL_GPIO_WritePin>
	}
	for(int i = 0; i < 20; i++) // 2 seconds software delay used not to suspend the task (the task has to run)
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	e022      	b.n	8000ad8 <Access_Function+0x7c>
	{
		HAL_GPIO_WritePin(GPIOD, blue, GPIO_PIN_SET); // Set Green LED
 8000a92:	2201      	movs	r2, #1
 8000a94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a98:	4819      	ldr	r0, [pc, #100]	; (8000b00 <Access_Function+0xa4>)
 8000a9a:	f000 fde9 	bl	8001670 <HAL_GPIO_WritePin>
	    for(int i = 0; i < 75000; i++); // 0.5 seconds software delay used not to suspend the task (the task has to run)
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	e002      	b.n	8000aaa <Access_Function+0x4e>
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	4a15      	ldr	r2, [pc, #84]	; (8000b04 <Access_Function+0xa8>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	ddf8      	ble.n	8000aa4 <Access_Function+0x48>
	    HAL_GPIO_WritePin(GPIOD, blue, GPIO_PIN_RESET); // Reset Green LED
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ab8:	4811      	ldr	r0, [pc, #68]	; (8000b00 <Access_Function+0xa4>)
 8000aba:	f000 fdd9 	bl	8001670 <HAL_GPIO_WritePin>
	    for(int i = 0; i < 75000; i++); // 0.5 seconds software delay used not to suspend the task (the task has to run)
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	e002      	b.n	8000aca <Access_Function+0x6e>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a0d      	ldr	r2, [pc, #52]	; (8000b04 <Access_Function+0xa8>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	ddf8      	ble.n	8000ac4 <Access_Function+0x68>
	for(int i = 0; i < 20; i++) // 2 seconds software delay used not to suspend the task (the task has to run)
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	2b13      	cmp	r3, #19
 8000adc:	ddd9      	ble.n	8000a92 <Access_Function+0x36>
	}
	Start_Flag = 1;
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <Access_Function+0xa0>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	601a      	str	r2, [r3, #0]
    osMutexRelease(CriticalResourceMutexHandle);// semaphore V (resume)
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <Access_Function+0x9c>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f002 fd0f 	bl	800350c <osMutexRelease>
}
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20004084 	.word	0x20004084
 8000afc:	20000000 	.word	0x20000000
 8000b00:	40020c00 	.word	0x40020c00
 8000b04:	000124f7 	.word	0x000124f7

08000b08 <Start_GreenLED_Task>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_Start_GreenLED_Task */
void Start_GreenLED_Task(void const * argument)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  Access_Function();
 8000b10:	f7ff ffa4 	bl	8000a5c <Access_Function>
	  for(int i = 0; i <= 40; i++)
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	e022      	b.n	8000b60 <Start_GreenLED_Task+0x58>
	  {
		HAL_GPIO_WritePin(GPIOD, green, GPIO_PIN_SET); // Set Green LED
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b20:	4813      	ldr	r0, [pc, #76]	; (8000b70 <Start_GreenLED_Task+0x68>)
 8000b22:	f000 fda5 	bl	8001670 <HAL_GPIO_WritePin>
		for(int i = 0; i < 75000; i++); // 0.5 seconds software delay used not to suspend the task (the task has to run)
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	e002      	b.n	8000b32 <Start_GreenLED_Task+0x2a>
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	4a0f      	ldr	r2, [pc, #60]	; (8000b74 <Start_GreenLED_Task+0x6c>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	ddf8      	ble.n	8000b2c <Start_GreenLED_Task+0x24>
		HAL_GPIO_WritePin(GPIOD, green, GPIO_PIN_RESET); // Reset Green LED
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b40:	480b      	ldr	r0, [pc, #44]	; (8000b70 <Start_GreenLED_Task+0x68>)
 8000b42:	f000 fd95 	bl	8001670 <HAL_GPIO_WritePin>
		for(int i = 0; i < 75000; i++); // 0.5 seconds software delay used not to suspend the task (the task has to run)
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	e002      	b.n	8000b52 <Start_GreenLED_Task+0x4a>
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	4a07      	ldr	r2, [pc, #28]	; (8000b74 <Start_GreenLED_Task+0x6c>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	ddf8      	ble.n	8000b4c <Start_GreenLED_Task+0x44>
	  for(int i = 0; i <= 40; i++)
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	2b28      	cmp	r3, #40	; 0x28
 8000b64:	ddd9      	ble.n	8000b1a <Start_GreenLED_Task+0x12>
	  }
	  vTaskSuspend(NULL);
 8000b66:	2000      	movs	r0, #0
 8000b68:	f003 fd2a 	bl	80045c0 <vTaskSuspend>
	  Access_Function();
 8000b6c:	e7d0      	b.n	8000b10 <Start_GreenLED_Task+0x8>
 8000b6e:	bf00      	nop
 8000b70:	40020c00 	.word	0x40020c00
 8000b74:	000124f7 	.word	0x000124f7

08000b78 <Start_RedLED_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_RedLED_Task */
void Start_RedLED_Task(void const * argument)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_RedLED_Task */
  /* Infinite loop */
  for(;;)
  {
	 osDelay(1000);// 1 sec delay
 8000b80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b84:	f002 fc47 	bl	8003416 <osDelay>
	 Access_Function();
 8000b88:	f7ff ff68 	bl	8000a5c <Access_Function>
	 for(int i = 0; i <= 40; i++)
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	e022      	b.n	8000bd8 <Start_RedLED_Task+0x60>
	 {
		HAL_GPIO_WritePin(GPIOD, red, GPIO_PIN_SET); // Set Green LED
 8000b92:	2201      	movs	r2, #1
 8000b94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b98:	4813      	ldr	r0, [pc, #76]	; (8000be8 <Start_RedLED_Task+0x70>)
 8000b9a:	f000 fd69 	bl	8001670 <HAL_GPIO_WritePin>
		for(int i = 0; i < 75000; i++); // 0.5 seconds software delay used not to suspend the task (the task has to run)
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	e002      	b.n	8000baa <Start_RedLED_Task+0x32>
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	4a0f      	ldr	r2, [pc, #60]	; (8000bec <Start_RedLED_Task+0x74>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	ddf8      	ble.n	8000ba4 <Start_RedLED_Task+0x2c>
		HAL_GPIO_WritePin(GPIOD, red, GPIO_PIN_RESET); // Reset Green LED
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bb8:	480b      	ldr	r0, [pc, #44]	; (8000be8 <Start_RedLED_Task+0x70>)
 8000bba:	f000 fd59 	bl	8001670 <HAL_GPIO_WritePin>
		for(int i = 0; i < 75000; i++); // 0.5 seconds software delay used not to suspend the task (the task has to run)
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	e002      	b.n	8000bca <Start_RedLED_Task+0x52>
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	4a07      	ldr	r2, [pc, #28]	; (8000bec <Start_RedLED_Task+0x74>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	ddf8      	ble.n	8000bc4 <Start_RedLED_Task+0x4c>
	 for(int i = 0; i <= 40; i++)
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	2b28      	cmp	r3, #40	; 0x28
 8000bdc:	ddd9      	ble.n	8000b92 <Start_RedLED_Task+0x1a>
	 }
	 vTaskSuspend(NULL);
 8000bde:	2000      	movs	r0, #0
 8000be0:	f003 fcee 	bl	80045c0 <vTaskSuspend>
	 osDelay(1000);// 1 sec delay
 8000be4:	e7cc      	b.n	8000b80 <Start_RedLED_Task+0x8>
 8000be6:	bf00      	nop
 8000be8:	40020c00 	.word	0x40020c00
 8000bec:	000124f7 	.word	0x000124f7

08000bf0 <Start_OrangeLED_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_OrangeLED_Task */
void Start_OrangeLED_Task(void const * argument)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_OrangeLED_Task */
  /* Infinite loop */
  for(;;)
  {
	osDelay(1000);// 1 sec delay
 8000bf8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bfc:	f002 fc0b 	bl	8003416 <osDelay>
	for(int i = 0; i <= 40; i++)
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	e022      	b.n	8000c4c <Start_OrangeLED_Task+0x5c>
	{
	  HAL_GPIO_WritePin(GPIOD, orange, GPIO_PIN_SET); // Set Green LED
 8000c06:	2201      	movs	r2, #1
 8000c08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c0c:	4813      	ldr	r0, [pc, #76]	; (8000c5c <Start_OrangeLED_Task+0x6c>)
 8000c0e:	f000 fd2f 	bl	8001670 <HAL_GPIO_WritePin>
	  for(int i = 0; i < 75000; i++); // 0.5 seconds software delay used not to suspend the task (the task has to run)
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	e002      	b.n	8000c1e <Start_OrangeLED_Task+0x2e>
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	4a0f      	ldr	r2, [pc, #60]	; (8000c60 <Start_OrangeLED_Task+0x70>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	ddf8      	ble.n	8000c18 <Start_OrangeLED_Task+0x28>
	  HAL_GPIO_WritePin(GPIOD, orange, GPIO_PIN_RESET); // Reset Green LED
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c2c:	480b      	ldr	r0, [pc, #44]	; (8000c5c <Start_OrangeLED_Task+0x6c>)
 8000c2e:	f000 fd1f 	bl	8001670 <HAL_GPIO_WritePin>
	  for(int i = 0; i < 75000; i++); // 0.5 seconds software delay used not to suspend the task (the task has to run)
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	e002      	b.n	8000c3e <Start_OrangeLED_Task+0x4e>
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	4a07      	ldr	r2, [pc, #28]	; (8000c60 <Start_OrangeLED_Task+0x70>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	ddf8      	ble.n	8000c38 <Start_OrangeLED_Task+0x48>
	for(int i = 0; i <= 40; i++)
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	2b28      	cmp	r3, #40	; 0x28
 8000c50:	ddd9      	ble.n	8000c06 <Start_OrangeLED_Task+0x16>
	}
	vTaskSuspend(NULL);
 8000c52:	2000      	movs	r0, #0
 8000c54:	f003 fcb4 	bl	80045c0 <vTaskSuspend>
	osDelay(1000);// 1 sec delay
 8000c58:	e7ce      	b.n	8000bf8 <Start_OrangeLED_Task+0x8>
 8000c5a:	bf00      	nop
 8000c5c:	40020c00 	.word	0x40020c00
 8000c60:	000124f7 	.word	0x000124f7

08000c64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d101      	bne.n	8000c7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c76:	f000 fa77 	bl	8001168 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40010000 	.word	0x40010000

08000c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	4b12      	ldr	r3, [pc, #72]	; (8000cec <HAL_MspInit+0x54>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	4a11      	ldr	r2, [pc, #68]	; (8000cec <HAL_MspInit+0x54>)
 8000ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cac:	6453      	str	r3, [r2, #68]	; 0x44
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <HAL_MspInit+0x54>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	603b      	str	r3, [r7, #0]
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <HAL_MspInit+0x54>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <HAL_MspInit+0x54>)
 8000cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <HAL_MspInit+0x54>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	210f      	movs	r1, #15
 8000cda:	f06f 0001 	mvn.w	r0, #1
 8000cde:	f000 fb1b 	bl	8001318 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800

08000cf0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a19      	ldr	r2, [pc, #100]	; (8000d74 <HAL_I2C_MspInit+0x84>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d12c      	bne.n	8000d6c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <HAL_I2C_MspInit+0x88>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a17      	ldr	r2, [pc, #92]	; (8000d78 <HAL_I2C_MspInit+0x88>)
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <HAL_I2C_MspInit+0x88>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d2e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d34:	2312      	movs	r3, #18
 8000d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d40:	2304      	movs	r3, #4
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480c      	ldr	r0, [pc, #48]	; (8000d7c <HAL_I2C_MspInit+0x8c>)
 8000d4c:	f000 fb0e 	bl	800136c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_I2C_MspInit+0x88>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	4a07      	ldr	r2, [pc, #28]	; (8000d78 <HAL_I2C_MspInit+0x88>)
 8000d5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <HAL_I2C_MspInit+0x88>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d6c:	bf00      	nop
 8000d6e:	3728      	adds	r7, #40	; 0x28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40005400 	.word	0x40005400
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40020400 	.word	0x40020400

08000d80 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08e      	sub	sp, #56	; 0x38
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a59      	ldr	r2, [pc, #356]	; (8000f04 <HAL_I2S_MspInit+0x184>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d15b      	bne.n	8000e5a <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	623b      	str	r3, [r7, #32]
 8000da6:	4b58      	ldr	r3, [pc, #352]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	4a57      	ldr	r2, [pc, #348]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db0:	6413      	str	r3, [r2, #64]	; 0x40
 8000db2:	4b55      	ldr	r3, [pc, #340]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dba:	623b      	str	r3, [r7, #32]
 8000dbc:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
 8000dc2:	4b51      	ldr	r3, [pc, #324]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a50      	ldr	r2, [pc, #320]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000dc8:	f043 0304 	orr.w	r3, r3, #4
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b4e      	ldr	r3, [pc, #312]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0304 	and.w	r3, r3, #4
 8000dd6:	61fb      	str	r3, [r7, #28]
 8000dd8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
 8000dde:	4b4a      	ldr	r3, [pc, #296]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a49      	ldr	r2, [pc, #292]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b47      	ldr	r3, [pc, #284]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	61bb      	str	r3, [r7, #24]
 8000df4:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000df6:	2304      	movs	r3, #4
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000e06:	2306      	movs	r3, #6
 8000e08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0e:	4619      	mov	r1, r3
 8000e10:	483e      	ldr	r0, [pc, #248]	; (8000f0c <HAL_I2S_MspInit+0x18c>)
 8000e12:	f000 faab 	bl	800136c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000e16:	2308      	movs	r3, #8
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e26:	2305      	movs	r3, #5
 8000e28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4836      	ldr	r0, [pc, #216]	; (8000f0c <HAL_I2S_MspInit+0x18c>)
 8000e32:	f000 fa9b 	bl	800136c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000e36:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e48:	2305      	movs	r3, #5
 8000e4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e50:	4619      	mov	r1, r3
 8000e52:	482f      	ldr	r0, [pc, #188]	; (8000f10 <HAL_I2S_MspInit+0x190>)
 8000e54:	f000 fa8a 	bl	800136c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e58:	e04f      	b.n	8000efa <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a2d      	ldr	r2, [pc, #180]	; (8000f14 <HAL_I2S_MspInit+0x194>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d14a      	bne.n	8000efa <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	4b27      	ldr	r3, [pc, #156]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	4a26      	ldr	r2, [pc, #152]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e72:	6413      	str	r3, [r2, #64]	; 0x40
 8000e74:	4b24      	ldr	r3, [pc, #144]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e7c:	617b      	str	r3, [r7, #20]
 8000e7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e80:	2300      	movs	r3, #0
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	4b20      	ldr	r3, [pc, #128]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e88:	4a1f      	ldr	r2, [pc, #124]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e90:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea4:	4a18      	ldr	r2, [pc, #96]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000ea6:	f043 0304 	orr.w	r3, r3, #4
 8000eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8000eac:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <HAL_I2S_MspInit+0x188>)
 8000eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000eb8:	2310      	movs	r3, #16
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ec8:	2306      	movs	r3, #6
 8000eca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4811      	ldr	r0, [pc, #68]	; (8000f18 <HAL_I2S_MspInit+0x198>)
 8000ed4:	f000 fa4a 	bl	800136c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ed8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000eea:	2306      	movs	r3, #6
 8000eec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4805      	ldr	r0, [pc, #20]	; (8000f0c <HAL_I2S_MspInit+0x18c>)
 8000ef6:	f000 fa39 	bl	800136c <HAL_GPIO_Init>
}
 8000efa:	bf00      	nop
 8000efc:	3738      	adds	r7, #56	; 0x38
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40003800 	.word	0x40003800
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020800 	.word	0x40020800
 8000f10:	40020400 	.word	0x40020400
 8000f14:	40003c00 	.word	0x40003c00
 8000f18:	40020000 	.word	0x40020000

08000f1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	; 0x28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a19      	ldr	r2, [pc, #100]	; (8000fa0 <HAL_SPI_MspInit+0x84>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d12b      	bne.n	8000f96 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <HAL_SPI_MspInit+0x88>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	4a17      	ldr	r2, [pc, #92]	; (8000fa4 <HAL_SPI_MspInit+0x88>)
 8000f48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <HAL_SPI_MspInit+0x88>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <HAL_SPI_MspInit+0x88>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a10      	ldr	r2, [pc, #64]	; (8000fa4 <HAL_SPI_MspInit+0x88>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <HAL_SPI_MspInit+0x88>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f76:	23e0      	movs	r3, #224	; 0xe0
 8000f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f82:	2303      	movs	r3, #3
 8000f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f86:	2305      	movs	r3, #5
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <HAL_SPI_MspInit+0x8c>)
 8000f92:	f000 f9eb 	bl	800136c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f96:	bf00      	nop
 8000f98:	3728      	adds	r7, #40	; 0x28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40013000 	.word	0x40013000
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40020000 	.word	0x40020000

08000fac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08c      	sub	sp, #48	; 0x30
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	2019      	movs	r0, #25
 8000fc2:	f000 f9a9 	bl	8001318 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000fc6:	2019      	movs	r0, #25
 8000fc8:	f000 f9c2 	bl	8001350 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	4b1e      	ldr	r3, [pc, #120]	; (800104c <HAL_InitTick+0xa0>)
 8000fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd4:	4a1d      	ldr	r2, [pc, #116]	; (800104c <HAL_InitTick+0xa0>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	6453      	str	r3, [r2, #68]	; 0x44
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	; (800104c <HAL_InitTick+0xa0>)
 8000fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fe8:	f107 0210 	add.w	r2, r7, #16
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f001 fd90 	bl	8002b18 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ff8:	f001 fd7a 	bl	8002af0 <HAL_RCC_GetPCLK2Freq>
 8000ffc:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001000:	4a13      	ldr	r2, [pc, #76]	; (8001050 <HAL_InitTick+0xa4>)
 8001002:	fba2 2303 	umull	r2, r3, r2, r3
 8001006:	0c9b      	lsrs	r3, r3, #18
 8001008:	3b01      	subs	r3, #1
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <HAL_InitTick+0xa8>)
 800100e:	4a12      	ldr	r2, [pc, #72]	; (8001058 <HAL_InitTick+0xac>)
 8001010:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <HAL_InitTick+0xa8>)
 8001014:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001018:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800101a:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <HAL_InitTick+0xa8>)
 800101c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <HAL_InitTick+0xa8>)
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <HAL_InitTick+0xa8>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800102c:	4809      	ldr	r0, [pc, #36]	; (8001054 <HAL_InitTick+0xa8>)
 800102e:	f001 ff57 	bl	8002ee0 <HAL_TIM_Base_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d104      	bne.n	8001042 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001038:	4806      	ldr	r0, [pc, #24]	; (8001054 <HAL_InitTick+0xa8>)
 800103a:	f001 ff86 	bl	8002f4a <HAL_TIM_Base_Start_IT>
 800103e:	4603      	mov	r3, r0
 8001040:	e000      	b.n	8001044 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
}
 8001044:	4618      	mov	r0, r3
 8001046:	3730      	adds	r7, #48	; 0x30
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40023800 	.word	0x40023800
 8001050:	431bde83 	.word	0x431bde83
 8001054:	2000411c 	.word	0x2000411c
 8001058:	40010000 	.word	0x40010000

0800105c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106e:	e7fe      	b.n	800106e <HardFault_Handler+0x4>

08001070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <MemManage_Handler+0x4>

08001076 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107a:	e7fe      	b.n	800107a <BusFault_Handler+0x4>

0800107c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <UsageFault_Handler+0x4>

08001082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001096:	f001 ff7c 	bl	8002f92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	2000411c 	.word	0x2000411c

080010a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <SystemInit+0x28>)
 80010aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ae:	4a07      	ldr	r2, [pc, #28]	; (80010cc <SystemInit+0x28>)
 80010b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <SystemInit+0x28>)
 80010ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010be:	609a      	str	r2, [r3, #8]
#endif
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001108 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010d6:	e003      	b.n	80010e0 <LoopCopyDataInit>

080010d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010de:	3104      	adds	r1, #4

080010e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010e0:	480b      	ldr	r0, [pc, #44]	; (8001110 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010e8:	d3f6      	bcc.n	80010d8 <CopyDataInit>
  ldr  r2, =_sbss
 80010ea:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010ec:	e002      	b.n	80010f4 <LoopFillZerobss>

080010ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010f0:	f842 3b04 	str.w	r3, [r2], #4

080010f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010f4:	4b09      	ldr	r3, [pc, #36]	; (800111c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010f8:	d3f9      	bcc.n	80010ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010fa:	f7ff ffd3 	bl	80010a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010fe:	f004 fd45 	bl	8005b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001102:	f7ff fa07 	bl	8000514 <main>
  bx  lr    
 8001106:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001108:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800110c:	08005cc4 	.word	0x08005cc4
  ldr  r0, =_sdata
 8001110:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001114:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8001118:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 800111c:	20004160 	.word	0x20004160

08001120 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001120:	e7fe      	b.n	8001120 <ADC_IRQHandler>
	...

08001124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <HAL_Init+0x40>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0d      	ldr	r2, [pc, #52]	; (8001164 <HAL_Init+0x40>)
 800112e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001132:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <HAL_Init+0x40>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <HAL_Init+0x40>)
 800113a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800113e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <HAL_Init+0x40>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a07      	ldr	r2, [pc, #28]	; (8001164 <HAL_Init+0x40>)
 8001146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800114c:	2003      	movs	r0, #3
 800114e:	f000 f8d8 	bl	8001302 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001152:	2000      	movs	r0, #0
 8001154:	f7ff ff2a 	bl	8000fac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001158:	f7ff fd9e 	bl	8000c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023c00 	.word	0x40023c00

08001168 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_IncTick+0x20>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_IncTick+0x24>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4413      	add	r3, r2
 8001178:	4a04      	ldr	r2, [pc, #16]	; (800118c <HAL_IncTick+0x24>)
 800117a:	6013      	str	r3, [r2, #0]
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	2000000c 	.word	0x2000000c
 800118c:	2000415c 	.word	0x2000415c

08001190 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return uwTick;
 8001194:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <HAL_GetTick+0x14>)
 8001196:	681b      	ldr	r3, [r3, #0]
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	2000415c 	.word	0x2000415c

080011a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c4:	4013      	ands	r3, r2
 80011c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011da:	4a04      	ldr	r2, [pc, #16]	; (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	60d3      	str	r3, [r2, #12]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <__NVIC_GetPriorityGrouping+0x18>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	f003 0307 	and.w	r3, r3, #7
}
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	2b00      	cmp	r3, #0
 800121c:	db0b      	blt.n	8001236 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	f003 021f 	and.w	r2, r3, #31
 8001224:	4907      	ldr	r1, [pc, #28]	; (8001244 <__NVIC_EnableIRQ+0x38>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	095b      	lsrs	r3, r3, #5
 800122c:	2001      	movs	r0, #1
 800122e:	fa00 f202 	lsl.w	r2, r0, r2
 8001232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000e100 	.word	0xe000e100

08001248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	db0a      	blt.n	8001272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	b2da      	uxtb	r2, r3
 8001260:	490c      	ldr	r1, [pc, #48]	; (8001294 <__NVIC_SetPriority+0x4c>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	0112      	lsls	r2, r2, #4
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	440b      	add	r3, r1
 800126c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001270:	e00a      	b.n	8001288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4908      	ldr	r1, [pc, #32]	; (8001298 <__NVIC_SetPriority+0x50>)
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	3b04      	subs	r3, #4
 8001280:	0112      	lsls	r2, r2, #4
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	440b      	add	r3, r1
 8001286:	761a      	strb	r2, [r3, #24]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000e100 	.word	0xe000e100
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f1c3 0307 	rsb	r3, r3, #7
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	bf28      	it	cs
 80012ba:	2304      	movcs	r3, #4
 80012bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3304      	adds	r3, #4
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d902      	bls.n	80012cc <NVIC_EncodePriority+0x30>
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3b03      	subs	r3, #3
 80012ca:	e000      	b.n	80012ce <NVIC_EncodePriority+0x32>
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	f04f 32ff 	mov.w	r2, #4294967295
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43da      	mvns	r2, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e4:	f04f 31ff 	mov.w	r1, #4294967295
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	43d9      	mvns	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	4313      	orrs	r3, r2
         );
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3724      	adds	r7, #36	; 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff ff4c 	bl	80011a8 <__NVIC_SetPriorityGrouping>
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
 8001324:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800132a:	f7ff ff61 	bl	80011f0 <__NVIC_GetPriorityGrouping>
 800132e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	68b9      	ldr	r1, [r7, #8]
 8001334:	6978      	ldr	r0, [r7, #20]
 8001336:	f7ff ffb1 	bl	800129c <NVIC_EncodePriority>
 800133a:	4602      	mov	r2, r0
 800133c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001340:	4611      	mov	r1, r2
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff ff80 	bl	8001248 <__NVIC_SetPriority>
}
 8001348:	bf00      	nop
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff ff54 	bl	800120c <__NVIC_EnableIRQ>
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800136c:	b480      	push	{r7}
 800136e:	b089      	sub	sp, #36	; 0x24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
 8001386:	e159      	b.n	800163c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001388:	2201      	movs	r2, #1
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	f040 8148 	bne.w	8001636 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d00b      	beq.n	80013c6 <HAL_GPIO_Init+0x5a>
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d007      	beq.n	80013c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013ba:	2b11      	cmp	r3, #17
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b12      	cmp	r3, #18
 80013c4:	d130      	bne.n	8001428 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	2203      	movs	r2, #3
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43db      	mvns	r3, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4013      	ands	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	68da      	ldr	r2, [r3, #12]
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013fc:	2201      	movs	r2, #1
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	091b      	lsrs	r3, r3, #4
 8001412:	f003 0201 	and.w	r2, r3, #1
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	2203      	movs	r2, #3
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b02      	cmp	r3, #2
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0xfc>
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b12      	cmp	r3, #18
 8001466:	d123      	bne.n	80014b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	08da      	lsrs	r2, r3, #3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3208      	adds	r2, #8
 8001470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001474:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	220f      	movs	r2, #15
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	691a      	ldr	r2, [r3, #16]
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	08da      	lsrs	r2, r3, #3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3208      	adds	r2, #8
 80014aa:	69b9      	ldr	r1, [r7, #24]
 80014ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	2203      	movs	r2, #3
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 0203 	and.w	r2, r3, #3
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 80a2 	beq.w	8001636 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	4b56      	ldr	r3, [pc, #344]	; (8001650 <HAL_GPIO_Init+0x2e4>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	4a55      	ldr	r2, [pc, #340]	; (8001650 <HAL_GPIO_Init+0x2e4>)
 80014fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001500:	6453      	str	r3, [r2, #68]	; 0x44
 8001502:	4b53      	ldr	r3, [pc, #332]	; (8001650 <HAL_GPIO_Init+0x2e4>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800150e:	4a51      	ldr	r2, [pc, #324]	; (8001654 <HAL_GPIO_Init+0x2e8>)
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	089b      	lsrs	r3, r3, #2
 8001514:	3302      	adds	r3, #2
 8001516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	220f      	movs	r2, #15
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4013      	ands	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a48      	ldr	r2, [pc, #288]	; (8001658 <HAL_GPIO_Init+0x2ec>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d019      	beq.n	800156e <HAL_GPIO_Init+0x202>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a47      	ldr	r2, [pc, #284]	; (800165c <HAL_GPIO_Init+0x2f0>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d013      	beq.n	800156a <HAL_GPIO_Init+0x1fe>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a46      	ldr	r2, [pc, #280]	; (8001660 <HAL_GPIO_Init+0x2f4>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d00d      	beq.n	8001566 <HAL_GPIO_Init+0x1fa>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a45      	ldr	r2, [pc, #276]	; (8001664 <HAL_GPIO_Init+0x2f8>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d007      	beq.n	8001562 <HAL_GPIO_Init+0x1f6>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a44      	ldr	r2, [pc, #272]	; (8001668 <HAL_GPIO_Init+0x2fc>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d101      	bne.n	800155e <HAL_GPIO_Init+0x1f2>
 800155a:	2304      	movs	r3, #4
 800155c:	e008      	b.n	8001570 <HAL_GPIO_Init+0x204>
 800155e:	2307      	movs	r3, #7
 8001560:	e006      	b.n	8001570 <HAL_GPIO_Init+0x204>
 8001562:	2303      	movs	r3, #3
 8001564:	e004      	b.n	8001570 <HAL_GPIO_Init+0x204>
 8001566:	2302      	movs	r3, #2
 8001568:	e002      	b.n	8001570 <HAL_GPIO_Init+0x204>
 800156a:	2301      	movs	r3, #1
 800156c:	e000      	b.n	8001570 <HAL_GPIO_Init+0x204>
 800156e:	2300      	movs	r3, #0
 8001570:	69fa      	ldr	r2, [r7, #28]
 8001572:	f002 0203 	and.w	r2, r2, #3
 8001576:	0092      	lsls	r2, r2, #2
 8001578:	4093      	lsls	r3, r2
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001580:	4934      	ldr	r1, [pc, #208]	; (8001654 <HAL_GPIO_Init+0x2e8>)
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	089b      	lsrs	r3, r3, #2
 8001586:	3302      	adds	r3, #2
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800158e:	4b37      	ldr	r3, [pc, #220]	; (800166c <HAL_GPIO_Init+0x300>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	43db      	mvns	r3, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4013      	ands	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015b2:	4a2e      	ldr	r2, [pc, #184]	; (800166c <HAL_GPIO_Init+0x300>)
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015b8:	4b2c      	ldr	r3, [pc, #176]	; (800166c <HAL_GPIO_Init+0x300>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4013      	ands	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015dc:	4a23      	ldr	r2, [pc, #140]	; (800166c <HAL_GPIO_Init+0x300>)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015e2:	4b22      	ldr	r3, [pc, #136]	; (800166c <HAL_GPIO_Init+0x300>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4013      	ands	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001606:	4a19      	ldr	r2, [pc, #100]	; (800166c <HAL_GPIO_Init+0x300>)
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800160c:	4b17      	ldr	r3, [pc, #92]	; (800166c <HAL_GPIO_Init+0x300>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001630:	4a0e      	ldr	r2, [pc, #56]	; (800166c <HAL_GPIO_Init+0x300>)
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3301      	adds	r3, #1
 800163a:	61fb      	str	r3, [r7, #28]
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	2b0f      	cmp	r3, #15
 8001640:	f67f aea2 	bls.w	8001388 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001644:	bf00      	nop
 8001646:	3724      	adds	r7, #36	; 0x24
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	40023800 	.word	0x40023800
 8001654:	40013800 	.word	0x40013800
 8001658:	40020000 	.word	0x40020000
 800165c:	40020400 	.word	0x40020400
 8001660:	40020800 	.word	0x40020800
 8001664:	40020c00 	.word	0x40020c00
 8001668:	40021000 	.word	0x40021000
 800166c:	40013c00 	.word	0x40013c00

08001670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	807b      	strh	r3, [r7, #2]
 800167c:	4613      	mov	r3, r2
 800167e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001680:	787b      	ldrb	r3, [r7, #1]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001686:	887a      	ldrh	r2, [r7, #2]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800168c:	e003      	b.n	8001696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800168e:	887b      	ldrh	r3, [r7, #2]
 8001690:	041a      	lsls	r2, r3, #16
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	619a      	str	r2, [r3, #24]
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e11f      	b.n	80018f6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d106      	bne.n	80016d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff fb10 	bl	8000cf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2224      	movs	r2, #36	; 0x24
 80016d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 0201 	bic.w	r2, r2, #1
 80016e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001706:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001708:	f001 f9de 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 800170c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	4a7b      	ldr	r2, [pc, #492]	; (8001900 <HAL_I2C_Init+0x25c>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d807      	bhi.n	8001728 <HAL_I2C_Init+0x84>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4a7a      	ldr	r2, [pc, #488]	; (8001904 <HAL_I2C_Init+0x260>)
 800171c:	4293      	cmp	r3, r2
 800171e:	bf94      	ite	ls
 8001720:	2301      	movls	r3, #1
 8001722:	2300      	movhi	r3, #0
 8001724:	b2db      	uxtb	r3, r3
 8001726:	e006      	b.n	8001736 <HAL_I2C_Init+0x92>
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4a77      	ldr	r2, [pc, #476]	; (8001908 <HAL_I2C_Init+0x264>)
 800172c:	4293      	cmp	r3, r2
 800172e:	bf94      	ite	ls
 8001730:	2301      	movls	r3, #1
 8001732:	2300      	movhi	r3, #0
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e0db      	b.n	80018f6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	4a72      	ldr	r2, [pc, #456]	; (800190c <HAL_I2C_Init+0x268>)
 8001742:	fba2 2303 	umull	r2, r3, r2, r3
 8001746:	0c9b      	lsrs	r3, r3, #18
 8001748:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68ba      	ldr	r2, [r7, #8]
 800175a:	430a      	orrs	r2, r1
 800175c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	4a64      	ldr	r2, [pc, #400]	; (8001900 <HAL_I2C_Init+0x25c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d802      	bhi.n	8001778 <HAL_I2C_Init+0xd4>
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	3301      	adds	r3, #1
 8001776:	e009      	b.n	800178c <HAL_I2C_Init+0xe8>
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800177e:	fb02 f303 	mul.w	r3, r2, r3
 8001782:	4a63      	ldr	r2, [pc, #396]	; (8001910 <HAL_I2C_Init+0x26c>)
 8001784:	fba2 2303 	umull	r2, r3, r2, r3
 8001788:	099b      	lsrs	r3, r3, #6
 800178a:	3301      	adds	r3, #1
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6812      	ldr	r2, [r2, #0]
 8001790:	430b      	orrs	r3, r1
 8001792:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800179e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	4956      	ldr	r1, [pc, #344]	; (8001900 <HAL_I2C_Init+0x25c>)
 80017a8:	428b      	cmp	r3, r1
 80017aa:	d80d      	bhi.n	80017c8 <HAL_I2C_Init+0x124>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	1e59      	subs	r1, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80017ba:	3301      	adds	r3, #1
 80017bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	bf38      	it	cc
 80017c4:	2304      	movcc	r3, #4
 80017c6:	e04f      	b.n	8001868 <HAL_I2C_Init+0x1c4>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d111      	bne.n	80017f4 <HAL_I2C_Init+0x150>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	1e58      	subs	r0, r3, #1
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6859      	ldr	r1, [r3, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	440b      	add	r3, r1
 80017de:	fbb0 f3f3 	udiv	r3, r0, r3
 80017e2:	3301      	adds	r3, #1
 80017e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	bf0c      	ite	eq
 80017ec:	2301      	moveq	r3, #1
 80017ee:	2300      	movne	r3, #0
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	e012      	b.n	800181a <HAL_I2C_Init+0x176>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	1e58      	subs	r0, r3, #1
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6859      	ldr	r1, [r3, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	0099      	lsls	r1, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	fbb0 f3f3 	udiv	r3, r0, r3
 800180a:	3301      	adds	r3, #1
 800180c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001810:	2b00      	cmp	r3, #0
 8001812:	bf0c      	ite	eq
 8001814:	2301      	moveq	r3, #1
 8001816:	2300      	movne	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_I2C_Init+0x17e>
 800181e:	2301      	movs	r3, #1
 8001820:	e022      	b.n	8001868 <HAL_I2C_Init+0x1c4>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10e      	bne.n	8001848 <HAL_I2C_Init+0x1a4>
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1e58      	subs	r0, r3, #1
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6859      	ldr	r1, [r3, #4]
 8001832:	460b      	mov	r3, r1
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	440b      	add	r3, r1
 8001838:	fbb0 f3f3 	udiv	r3, r0, r3
 800183c:	3301      	adds	r3, #1
 800183e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001846:	e00f      	b.n	8001868 <HAL_I2C_Init+0x1c4>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	1e58      	subs	r0, r3, #1
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6859      	ldr	r1, [r3, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	0099      	lsls	r1, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	fbb0 f3f3 	udiv	r3, r0, r3
 800185e:	3301      	adds	r3, #1
 8001860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001864:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	6809      	ldr	r1, [r1, #0]
 800186c:	4313      	orrs	r3, r2
 800186e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69da      	ldr	r2, [r3, #28]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001896:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6911      	ldr	r1, [r2, #16]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	68d2      	ldr	r2, [r2, #12]
 80018a2:	4311      	orrs	r1, r2
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	6812      	ldr	r2, [r2, #0]
 80018a8:	430b      	orrs	r3, r1
 80018aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	695a      	ldr	r2, [r3, #20]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0201 	orr.w	r2, r2, #1
 80018d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2220      	movs	r2, #32
 80018e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	000186a0 	.word	0x000186a0
 8001904:	001e847f 	.word	0x001e847f
 8001908:	003d08ff 	.word	0x003d08ff
 800190c:	431bde83 	.word	0x431bde83
 8001910:	10624dd3 	.word	0x10624dd3

08001914 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e128      	b.n	8001b78 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d109      	bne.n	8001946 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a90      	ldr	r2, [pc, #576]	; (8001b80 <HAL_I2S_Init+0x26c>)
 800193e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff fa1d 	bl	8000d80 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2202      	movs	r2, #2
 800194a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800195c:	f023 030f 	bic.w	r3, r3, #15
 8001960:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2202      	movs	r2, #2
 8001968:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	2b02      	cmp	r3, #2
 8001970:	d060      	beq.n	8001a34 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d102      	bne.n	8001980 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800197a:	2310      	movs	r3, #16
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	e001      	b.n	8001984 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001980:	2320      	movs	r3, #32
 8001982:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	2b20      	cmp	r3, #32
 800198a:	d802      	bhi.n	8001992 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001992:	2001      	movs	r0, #1
 8001994:	f001 f9e2 	bl	8002d5c <HAL_RCCEx_GetPeriphCLKFreq>
 8001998:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019a2:	d125      	bne.n	80019f0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d010      	beq.n	80019ce <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	461a      	mov	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c8:	3305      	adds	r3, #5
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	e01f      	b.n	8001a0e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	461a      	mov	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ea:	3305      	adds	r3, #5
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	e00e      	b.n	8001a0e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	461a      	mov	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0a:	3305      	adds	r3, #5
 8001a0c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4a5c      	ldr	r2, [pc, #368]	; (8001b84 <HAL_I2S_Init+0x270>)
 8001a12:	fba2 2303 	umull	r2, r3, r2, r3
 8001a16:	08db      	lsrs	r3, r3, #3
 8001a18:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	085b      	lsrs	r3, r3, #1
 8001a2a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	021b      	lsls	r3, r3, #8
 8001a30:	61bb      	str	r3, [r7, #24]
 8001a32:	e003      	b.n	8001a3c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001a34:	2302      	movs	r3, #2
 8001a36:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d902      	bls.n	8001a48 <HAL_I2S_Init+0x134>
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	2bff      	cmp	r3, #255	; 0xff
 8001a46:	d907      	bls.n	8001a58 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4c:	f043 0210 	orr.w	r2, r3, #16
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e08f      	b.n	8001b78 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	ea42 0103 	orr.w	r1, r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	69fa      	ldr	r2, [r7, #28]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a76:	f023 030f 	bic.w	r3, r3, #15
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6851      	ldr	r1, [r2, #4]
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6892      	ldr	r2, [r2, #8]
 8001a82:	4311      	orrs	r1, r2
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	68d2      	ldr	r2, [r2, #12]
 8001a88:	4311      	orrs	r1, r2
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	6992      	ldr	r2, [r2, #24]
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a9a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d161      	bne.n	8001b68 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a38      	ldr	r2, [pc, #224]	; (8001b88 <HAL_I2S_Init+0x274>)
 8001aa8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a37      	ldr	r2, [pc, #220]	; (8001b8c <HAL_I2S_Init+0x278>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d101      	bne.n	8001ab8 <HAL_I2S_Init+0x1a4>
 8001ab4:	4b36      	ldr	r3, [pc, #216]	; (8001b90 <HAL_I2S_Init+0x27c>)
 8001ab6:	e001      	b.n	8001abc <HAL_I2S_Init+0x1a8>
 8001ab8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6812      	ldr	r2, [r2, #0]
 8001ac2:	4932      	ldr	r1, [pc, #200]	; (8001b8c <HAL_I2S_Init+0x278>)
 8001ac4:	428a      	cmp	r2, r1
 8001ac6:	d101      	bne.n	8001acc <HAL_I2S_Init+0x1b8>
 8001ac8:	4a31      	ldr	r2, [pc, #196]	; (8001b90 <HAL_I2S_Init+0x27c>)
 8001aca:	e001      	b.n	8001ad0 <HAL_I2S_Init+0x1bc>
 8001acc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001ad0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001ad4:	f023 030f 	bic.w	r3, r3, #15
 8001ad8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a2b      	ldr	r2, [pc, #172]	; (8001b8c <HAL_I2S_Init+0x278>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d101      	bne.n	8001ae8 <HAL_I2S_Init+0x1d4>
 8001ae4:	4b2a      	ldr	r3, [pc, #168]	; (8001b90 <HAL_I2S_Init+0x27c>)
 8001ae6:	e001      	b.n	8001aec <HAL_I2S_Init+0x1d8>
 8001ae8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001aec:	2202      	movs	r2, #2
 8001aee:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a25      	ldr	r2, [pc, #148]	; (8001b8c <HAL_I2S_Init+0x278>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d101      	bne.n	8001afe <HAL_I2S_Init+0x1ea>
 8001afa:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <HAL_I2S_Init+0x27c>)
 8001afc:	e001      	b.n	8001b02 <HAL_I2S_Init+0x1ee>
 8001afe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b02:	69db      	ldr	r3, [r3, #28]
 8001b04:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b0e:	d003      	beq.n	8001b18 <HAL_I2S_Init+0x204>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d103      	bne.n	8001b20 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001b18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	e001      	b.n	8001b24 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001b20:	2300      	movs	r3, #0
 8001b22:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	b299      	uxth	r1, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001b3a:	4303      	orrs	r3, r0
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	430b      	orrs	r3, r1
 8001b40:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001b42:	4313      	orrs	r3, r2
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	897b      	ldrh	r3, [r7, #10]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b50:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a0d      	ldr	r2, [pc, #52]	; (8001b8c <HAL_I2S_Init+0x278>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d101      	bne.n	8001b60 <HAL_I2S_Init+0x24c>
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <HAL_I2S_Init+0x27c>)
 8001b5e:	e001      	b.n	8001b64 <HAL_I2S_Init+0x250>
 8001b60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b64:	897a      	ldrh	r2, [r7, #10]
 8001b66:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3720      	adds	r7, #32
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	08001c8b 	.word	0x08001c8b
 8001b84:	cccccccd 	.word	0xcccccccd
 8001b88:	08001da1 	.word	0x08001da1
 8001b8c:	40003800 	.word	0x40003800
 8001b90:	40003400 	.word	0x40003400

08001b94 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	881a      	ldrh	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be8:	1c9a      	adds	r2, r3, #2
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10e      	bne.n	8001c24 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c14:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff ffb8 	bl	8001b94 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3e:	b292      	uxth	r2, r2
 8001c40:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c46:	1c9a      	adds	r2, r3, #2
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	3b01      	subs	r3, #1
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10e      	bne.n	8001c82 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c72:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff ff93 	bl	8001ba8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b086      	sub	sp, #24
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	d13a      	bne.n	8001d1c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d109      	bne.n	8001cc4 <I2S_IRQHandler+0x3a>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cba:	2b40      	cmp	r3, #64	; 0x40
 8001cbc:	d102      	bne.n	8001cc4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff ffb4 	bl	8001c2c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cca:	2b40      	cmp	r3, #64	; 0x40
 8001ccc:	d126      	bne.n	8001d1c <I2S_IRQHandler+0x92>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0320 	and.w	r3, r3, #32
 8001cd8:	2b20      	cmp	r3, #32
 8001cda:	d11f      	bne.n	8001d1c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001cec:	2300      	movs	r3, #0
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	f043 0202 	orr.w	r2, r3, #2
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff ff50 	bl	8001bbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	d136      	bne.n	8001d96 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d109      	bne.n	8001d46 <I2S_IRQHandler+0xbc>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3c:	2b80      	cmp	r3, #128	; 0x80
 8001d3e:	d102      	bne.n	8001d46 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ff45 	bl	8001bd0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d122      	bne.n	8001d96 <I2S_IRQHandler+0x10c>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 0320 	and.w	r3, r3, #32
 8001d5a:	2b20      	cmp	r3, #32
 8001d5c:	d11b      	bne.n	8001d96 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d6c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d88:	f043 0204 	orr.w	r2, r3, #4
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff ff13 	bl	8001bbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001d96:	bf00      	nop
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4aa2      	ldr	r2, [pc, #648]	; (8002040 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d101      	bne.n	8001dbe <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001dba:	4ba2      	ldr	r3, [pc, #648]	; (8002044 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001dbc:	e001      	b.n	8001dc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001dbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a9b      	ldr	r2, [pc, #620]	; (8002040 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d101      	bne.n	8001ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001dd8:	4b9a      	ldr	r3, [pc, #616]	; (8002044 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001dda:	e001      	b.n	8001de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001ddc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dec:	d004      	beq.n	8001df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f040 8099 	bne.w	8001f2a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d107      	bne.n	8001e12 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f925 	bl	800205c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d107      	bne.n	8001e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d002      	beq.n	8001e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f9c8 	bl	80021bc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e32:	2b40      	cmp	r3, #64	; 0x40
 8001e34:	d13a      	bne.n	8001eac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	f003 0320 	and.w	r3, r3, #32
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d035      	beq.n	8001eac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a7e      	ldr	r2, [pc, #504]	; (8002040 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d101      	bne.n	8001e4e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001e4a:	4b7e      	ldr	r3, [pc, #504]	; (8002044 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001e4c:	e001      	b.n	8001e52 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001e4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4979      	ldr	r1, [pc, #484]	; (8002040 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001e5a:	428b      	cmp	r3, r1
 8001e5c:	d101      	bne.n	8001e62 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001e5e:	4b79      	ldr	r3, [pc, #484]	; (8002044 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001e60:	e001      	b.n	8001e66 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001e62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e6a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e7a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	f043 0202 	orr.w	r2, r3, #2
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff fe88 	bl	8001bbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	f040 80be 	bne.w	8002034 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f003 0320 	and.w	r3, r3, #32
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 80b8 	beq.w	8002034 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ed2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a59      	ldr	r2, [pc, #356]	; (8002040 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d101      	bne.n	8001ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001ede:	4b59      	ldr	r3, [pc, #356]	; (8002044 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ee0:	e001      	b.n	8001ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001ee2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4954      	ldr	r1, [pc, #336]	; (8002040 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001eee:	428b      	cmp	r3, r1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001ef2:	4b54      	ldr	r3, [pc, #336]	; (8002044 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ef4:	e001      	b.n	8001efa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001ef6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001efa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001efe:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001f00:	2300      	movs	r3, #0
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	f043 0204 	orr.w	r2, r3, #4
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff fe4a 	bl	8001bbc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001f28:	e084      	b.n	8002034 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d107      	bne.n	8001f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d002      	beq.n	8001f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f8be 	bl	80020c0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d107      	bne.n	8001f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d002      	beq.n	8001f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f8fd 	bl	8002158 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f64:	2b40      	cmp	r3, #64	; 0x40
 8001f66:	d12f      	bne.n	8001fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f003 0320 	and.w	r3, r3, #32
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d02a      	beq.n	8001fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f80:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a2e      	ldr	r2, [pc, #184]	; (8002040 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d101      	bne.n	8001f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001f8c:	4b2d      	ldr	r3, [pc, #180]	; (8002044 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001f8e:	e001      	b.n	8001f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001f90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4929      	ldr	r1, [pc, #164]	; (8002040 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001f9c:	428b      	cmp	r3, r1
 8001f9e:	d101      	bne.n	8001fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001fa0:	4b28      	ldr	r3, [pc, #160]	; (8002044 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001fa2:	e001      	b.n	8001fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001fa4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fa8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	f043 0202 	orr.w	r2, r3, #2
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff fdfa 	bl	8001bbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d131      	bne.n	8002036 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	f003 0320 	and.w	r3, r3, #32
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d02c      	beq.n	8002036 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a17      	ldr	r2, [pc, #92]	; (8002040 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d101      	bne.n	8001fea <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001fe6:	4b17      	ldr	r3, [pc, #92]	; (8002044 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001fe8:	e001      	b.n	8001fee <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001fea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4912      	ldr	r1, [pc, #72]	; (8002040 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001ff6:	428b      	cmp	r3, r1
 8001ff8:	d101      	bne.n	8001ffe <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8001ffa:	4b12      	ldr	r3, [pc, #72]	; (8002044 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ffc:	e001      	b.n	8002002 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8001ffe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002002:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002006:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002016:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002024:	f043 0204 	orr.w	r2, r3, #4
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff fdc5 	bl	8001bbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002032:	e000      	b.n	8002036 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002034:	bf00      	nop
}
 8002036:	bf00      	nop
 8002038:	3720      	adds	r7, #32
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40003800 	.word	0x40003800
 8002044:	40003400 	.word	0x40003400

08002048 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	1c99      	adds	r1, r3, #2
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6251      	str	r1, [r2, #36]	; 0x24
 800206e:	881a      	ldrh	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207a:	b29b      	uxth	r3, r3
 800207c:	3b01      	subs	r3, #1
 800207e:	b29a      	uxth	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002088:	b29b      	uxth	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d113      	bne.n	80020b6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800209c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d106      	bne.n	80020b6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ffc9 	bl	8002048 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	1c99      	adds	r1, r3, #2
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6251      	str	r1, [r2, #36]	; 0x24
 80020d2:	8819      	ldrh	r1, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a1d      	ldr	r2, [pc, #116]	; (8002150 <I2SEx_TxISR_I2SExt+0x90>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d101      	bne.n	80020e2 <I2SEx_TxISR_I2SExt+0x22>
 80020de:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <I2SEx_TxISR_I2SExt+0x94>)
 80020e0:	e001      	b.n	80020e6 <I2SEx_TxISR_I2SExt+0x26>
 80020e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020e6:	460a      	mov	r2, r1
 80020e8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	3b01      	subs	r3, #1
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d121      	bne.n	8002146 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a12      	ldr	r2, [pc, #72]	; (8002150 <I2SEx_TxISR_I2SExt+0x90>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d101      	bne.n	8002110 <I2SEx_TxISR_I2SExt+0x50>
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <I2SEx_TxISR_I2SExt+0x94>)
 800210e:	e001      	b.n	8002114 <I2SEx_TxISR_I2SExt+0x54>
 8002110:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	490d      	ldr	r1, [pc, #52]	; (8002150 <I2SEx_TxISR_I2SExt+0x90>)
 800211c:	428b      	cmp	r3, r1
 800211e:	d101      	bne.n	8002124 <I2SEx_TxISR_I2SExt+0x64>
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <I2SEx_TxISR_I2SExt+0x94>)
 8002122:	e001      	b.n	8002128 <I2SEx_TxISR_I2SExt+0x68>
 8002124:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002128:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800212c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002132:	b29b      	uxth	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	d106      	bne.n	8002146 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff ff81 	bl	8002048 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40003800 	.word	0x40003800
 8002154:	40003400 	.word	0x40003400

08002158 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68d8      	ldr	r0, [r3, #12]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216a:	1c99      	adds	r1, r3, #2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002170:	b282      	uxth	r2, r0
 8002172:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002178:	b29b      	uxth	r3, r3
 800217a:	3b01      	subs	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002186:	b29b      	uxth	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	d113      	bne.n	80021b4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800219a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d106      	bne.n	80021b4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff ff4a 	bl	8002048 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a20      	ldr	r2, [pc, #128]	; (800224c <I2SEx_RxISR_I2SExt+0x90>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d101      	bne.n	80021d2 <I2SEx_RxISR_I2SExt+0x16>
 80021ce:	4b20      	ldr	r3, [pc, #128]	; (8002250 <I2SEx_RxISR_I2SExt+0x94>)
 80021d0:	e001      	b.n	80021d6 <I2SEx_RxISR_I2SExt+0x1a>
 80021d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021d6:	68d8      	ldr	r0, [r3, #12]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021dc:	1c99      	adds	r1, r3, #2
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80021e2:	b282      	uxth	r2, r0
 80021e4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	3b01      	subs	r3, #1
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d121      	bne.n	8002242 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a12      	ldr	r2, [pc, #72]	; (800224c <I2SEx_RxISR_I2SExt+0x90>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d101      	bne.n	800220c <I2SEx_RxISR_I2SExt+0x50>
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <I2SEx_RxISR_I2SExt+0x94>)
 800220a:	e001      	b.n	8002210 <I2SEx_RxISR_I2SExt+0x54>
 800220c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	490d      	ldr	r1, [pc, #52]	; (800224c <I2SEx_RxISR_I2SExt+0x90>)
 8002218:	428b      	cmp	r3, r1
 800221a:	d101      	bne.n	8002220 <I2SEx_RxISR_I2SExt+0x64>
 800221c:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <I2SEx_RxISR_I2SExt+0x94>)
 800221e:	e001      	b.n	8002224 <I2SEx_RxISR_I2SExt+0x68>
 8002220:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002224:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002228:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222e:	b29b      	uxth	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d106      	bne.n	8002242 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff ff03 	bl	8002048 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40003800 	.word	0x40003800
 8002250:	40003400 	.word	0x40003400

08002254 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e25b      	b.n	800271e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d075      	beq.n	800235e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002272:	4ba3      	ldr	r3, [pc, #652]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	2b04      	cmp	r3, #4
 800227c:	d00c      	beq.n	8002298 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800227e:	4ba0      	ldr	r3, [pc, #640]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002286:	2b08      	cmp	r3, #8
 8002288:	d112      	bne.n	80022b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800228a:	4b9d      	ldr	r3, [pc, #628]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002292:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002296:	d10b      	bne.n	80022b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002298:	4b99      	ldr	r3, [pc, #612]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d05b      	beq.n	800235c <HAL_RCC_OscConfig+0x108>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d157      	bne.n	800235c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e236      	b.n	800271e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b8:	d106      	bne.n	80022c8 <HAL_RCC_OscConfig+0x74>
 80022ba:	4b91      	ldr	r3, [pc, #580]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a90      	ldr	r2, [pc, #576]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	e01d      	b.n	8002304 <HAL_RCC_OscConfig+0xb0>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022d0:	d10c      	bne.n	80022ec <HAL_RCC_OscConfig+0x98>
 80022d2:	4b8b      	ldr	r3, [pc, #556]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a8a      	ldr	r2, [pc, #552]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	4b88      	ldr	r3, [pc, #544]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a87      	ldr	r2, [pc, #540]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	e00b      	b.n	8002304 <HAL_RCC_OscConfig+0xb0>
 80022ec:	4b84      	ldr	r3, [pc, #528]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a83      	ldr	r2, [pc, #524]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	4b81      	ldr	r3, [pc, #516]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a80      	ldr	r2, [pc, #512]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80022fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d013      	beq.n	8002334 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7fe ff40 	bl	8001190 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002314:	f7fe ff3c 	bl	8001190 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b64      	cmp	r3, #100	; 0x64
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e1fb      	b.n	800271e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002326:	4b76      	ldr	r3, [pc, #472]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0xc0>
 8002332:	e014      	b.n	800235e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002334:	f7fe ff2c 	bl	8001190 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800233c:	f7fe ff28 	bl	8001190 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b64      	cmp	r3, #100	; 0x64
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e1e7      	b.n	800271e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234e:	4b6c      	ldr	r3, [pc, #432]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0xe8>
 800235a:	e000      	b.n	800235e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800235c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d063      	beq.n	8002432 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800236a:	4b65      	ldr	r3, [pc, #404]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00b      	beq.n	800238e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002376:	4b62      	ldr	r3, [pc, #392]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800237e:	2b08      	cmp	r3, #8
 8002380:	d11c      	bne.n	80023bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002382:	4b5f      	ldr	r3, [pc, #380]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d116      	bne.n	80023bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238e:	4b5c      	ldr	r3, [pc, #368]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d005      	beq.n	80023a6 <HAL_RCC_OscConfig+0x152>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d001      	beq.n	80023a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e1bb      	b.n	800271e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a6:	4b56      	ldr	r3, [pc, #344]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	4952      	ldr	r1, [pc, #328]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ba:	e03a      	b.n	8002432 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d020      	beq.n	8002406 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c4:	4b4f      	ldr	r3, [pc, #316]	; (8002504 <HAL_RCC_OscConfig+0x2b0>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ca:	f7fe fee1 	bl	8001190 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023d2:	f7fe fedd 	bl	8001190 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e19c      	b.n	800271e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e4:	4b46      	ldr	r3, [pc, #280]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f0      	beq.n	80023d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f0:	4b43      	ldr	r3, [pc, #268]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	4940      	ldr	r1, [pc, #256]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002400:	4313      	orrs	r3, r2
 8002402:	600b      	str	r3, [r1, #0]
 8002404:	e015      	b.n	8002432 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002406:	4b3f      	ldr	r3, [pc, #252]	; (8002504 <HAL_RCC_OscConfig+0x2b0>)
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240c:	f7fe fec0 	bl	8001190 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002414:	f7fe febc 	bl	8001190 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e17b      	b.n	800271e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002426:	4b36      	ldr	r3, [pc, #216]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f0      	bne.n	8002414 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b00      	cmp	r3, #0
 800243c:	d030      	beq.n	80024a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d016      	beq.n	8002474 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002446:	4b30      	ldr	r3, [pc, #192]	; (8002508 <HAL_RCC_OscConfig+0x2b4>)
 8002448:	2201      	movs	r2, #1
 800244a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244c:	f7fe fea0 	bl	8001190 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002454:	f7fe fe9c 	bl	8001190 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e15b      	b.n	800271e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002466:	4b26      	ldr	r3, [pc, #152]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0f0      	beq.n	8002454 <HAL_RCC_OscConfig+0x200>
 8002472:	e015      	b.n	80024a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002474:	4b24      	ldr	r3, [pc, #144]	; (8002508 <HAL_RCC_OscConfig+0x2b4>)
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247a:	f7fe fe89 	bl	8001190 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002482:	f7fe fe85 	bl	8001190 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e144      	b.n	800271e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002494:	4b1a      	ldr	r3, [pc, #104]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 8002496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1f0      	bne.n	8002482 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 80a0 	beq.w	80025ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ae:	2300      	movs	r3, #0
 80024b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024b2:	4b13      	ldr	r3, [pc, #76]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10f      	bne.n	80024de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	4a0e      	ldr	r2, [pc, #56]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80024c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024cc:	6413      	str	r3, [r2, #64]	; 0x40
 80024ce:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <HAL_RCC_OscConfig+0x2ac>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024da:	2301      	movs	r3, #1
 80024dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <HAL_RCC_OscConfig+0x2b8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d121      	bne.n	800252e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ea:	4b08      	ldr	r3, [pc, #32]	; (800250c <HAL_RCC_OscConfig+0x2b8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a07      	ldr	r2, [pc, #28]	; (800250c <HAL_RCC_OscConfig+0x2b8>)
 80024f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f6:	f7fe fe4b 	bl	8001190 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fc:	e011      	b.n	8002522 <HAL_RCC_OscConfig+0x2ce>
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800
 8002504:	42470000 	.word	0x42470000
 8002508:	42470e80 	.word	0x42470e80
 800250c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002510:	f7fe fe3e 	bl	8001190 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e0fd      	b.n	800271e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002522:	4b81      	ldr	r3, [pc, #516]	; (8002728 <HAL_RCC_OscConfig+0x4d4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f0      	beq.n	8002510 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d106      	bne.n	8002544 <HAL_RCC_OscConfig+0x2f0>
 8002536:	4b7d      	ldr	r3, [pc, #500]	; (800272c <HAL_RCC_OscConfig+0x4d8>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253a:	4a7c      	ldr	r2, [pc, #496]	; (800272c <HAL_RCC_OscConfig+0x4d8>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	6713      	str	r3, [r2, #112]	; 0x70
 8002542:	e01c      	b.n	800257e <HAL_RCC_OscConfig+0x32a>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2b05      	cmp	r3, #5
 800254a:	d10c      	bne.n	8002566 <HAL_RCC_OscConfig+0x312>
 800254c:	4b77      	ldr	r3, [pc, #476]	; (800272c <HAL_RCC_OscConfig+0x4d8>)
 800254e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002550:	4a76      	ldr	r2, [pc, #472]	; (800272c <HAL_RCC_OscConfig+0x4d8>)
 8002552:	f043 0304 	orr.w	r3, r3, #4
 8002556:	6713      	str	r3, [r2, #112]	; 0x70
 8002558:	4b74      	ldr	r3, [pc, #464]	; (800272c <HAL_RCC_OscConfig+0x4d8>)
 800255a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255c:	4a73      	ldr	r2, [pc, #460]	; (800272c <HAL_RCC_OscConfig+0x4d8>)
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	6713      	str	r3, [r2, #112]	; 0x70
 8002564:	e00b      	b.n	800257e <HAL_RCC_OscConfig+0x32a>
 8002566:	4b71      	ldr	r3, [pc, #452]	; (800272c <HAL_RCC_OscConfig+0x4d8>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256a:	4a70      	ldr	r2, [pc, #448]	; (800272c <HAL_RCC_OscConfig+0x4d8>)
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	6713      	str	r3, [r2, #112]	; 0x70
 8002572:	4b6e      	ldr	r3, [pc, #440]	; (800272c <HAL_RCC_OscConfig+0x4d8>)
 8002574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002576:	4a6d      	ldr	r2, [pc, #436]	; (800272c <HAL_RCC_OscConfig+0x4d8>)
 8002578:	f023 0304 	bic.w	r3, r3, #4
 800257c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d015      	beq.n	80025b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002586:	f7fe fe03 	bl	8001190 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258c:	e00a      	b.n	80025a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800258e:	f7fe fdff 	bl	8001190 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	f241 3288 	movw	r2, #5000	; 0x1388
 800259c:	4293      	cmp	r3, r2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e0bc      	b.n	800271e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a4:	4b61      	ldr	r3, [pc, #388]	; (800272c <HAL_RCC_OscConfig+0x4d8>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0ee      	beq.n	800258e <HAL_RCC_OscConfig+0x33a>
 80025b0:	e014      	b.n	80025dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b2:	f7fe fded 	bl	8001190 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b8:	e00a      	b.n	80025d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ba:	f7fe fde9 	bl	8001190 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e0a6      	b.n	800271e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d0:	4b56      	ldr	r3, [pc, #344]	; (800272c <HAL_RCC_OscConfig+0x4d8>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1ee      	bne.n	80025ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025dc:	7dfb      	ldrb	r3, [r7, #23]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d105      	bne.n	80025ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e2:	4b52      	ldr	r3, [pc, #328]	; (800272c <HAL_RCC_OscConfig+0x4d8>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	4a51      	ldr	r2, [pc, #324]	; (800272c <HAL_RCC_OscConfig+0x4d8>)
 80025e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 8092 	beq.w	800271c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025f8:	4b4c      	ldr	r3, [pc, #304]	; (800272c <HAL_RCC_OscConfig+0x4d8>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	2b08      	cmp	r3, #8
 8002602:	d05c      	beq.n	80026be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d141      	bne.n	8002690 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260c:	4b48      	ldr	r3, [pc, #288]	; (8002730 <HAL_RCC_OscConfig+0x4dc>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002612:	f7fe fdbd 	bl	8001190 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800261a:	f7fe fdb9 	bl	8001190 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e078      	b.n	800271e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262c:	4b3f      	ldr	r3, [pc, #252]	; (800272c <HAL_RCC_OscConfig+0x4d8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f0      	bne.n	800261a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69da      	ldr	r2, [r3, #28]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	019b      	lsls	r3, r3, #6
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	085b      	lsrs	r3, r3, #1
 8002650:	3b01      	subs	r3, #1
 8002652:	041b      	lsls	r3, r3, #16
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	061b      	lsls	r3, r3, #24
 800265c:	4933      	ldr	r1, [pc, #204]	; (800272c <HAL_RCC_OscConfig+0x4d8>)
 800265e:	4313      	orrs	r3, r2
 8002660:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002662:	4b33      	ldr	r3, [pc, #204]	; (8002730 <HAL_RCC_OscConfig+0x4dc>)
 8002664:	2201      	movs	r2, #1
 8002666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7fe fd92 	bl	8001190 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002670:	f7fe fd8e 	bl	8001190 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e04d      	b.n	800271e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002682:	4b2a      	ldr	r3, [pc, #168]	; (800272c <HAL_RCC_OscConfig+0x4d8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0x41c>
 800268e:	e045      	b.n	800271c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002690:	4b27      	ldr	r3, [pc, #156]	; (8002730 <HAL_RCC_OscConfig+0x4dc>)
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002696:	f7fe fd7b 	bl	8001190 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800269e:	f7fe fd77 	bl	8001190 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e036      	b.n	800271e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b0:	4b1e      	ldr	r3, [pc, #120]	; (800272c <HAL_RCC_OscConfig+0x4d8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1f0      	bne.n	800269e <HAL_RCC_OscConfig+0x44a>
 80026bc:	e02e      	b.n	800271c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e029      	b.n	800271e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026ca:	4b18      	ldr	r3, [pc, #96]	; (800272c <HAL_RCC_OscConfig+0x4d8>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d11c      	bne.n	8002718 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d115      	bne.n	8002718 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026f2:	4013      	ands	r3, r2
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d10d      	bne.n	8002718 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002706:	429a      	cmp	r2, r3
 8002708:	d106      	bne.n	8002718 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002714:	429a      	cmp	r2, r3
 8002716:	d001      	beq.n	800271c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e000      	b.n	800271e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40007000 	.word	0x40007000
 800272c:	40023800 	.word	0x40023800
 8002730:	42470060 	.word	0x42470060

08002734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0cc      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002748:	4b68      	ldr	r3, [pc, #416]	; (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 030f 	and.w	r3, r3, #15
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d90c      	bls.n	8002770 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002756:	4b65      	ldr	r3, [pc, #404]	; (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800275e:	4b63      	ldr	r3, [pc, #396]	; (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d001      	beq.n	8002770 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0b8      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d020      	beq.n	80027be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002788:	4b59      	ldr	r3, [pc, #356]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	4a58      	ldr	r2, [pc, #352]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002792:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027a0:	4b53      	ldr	r3, [pc, #332]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	4a52      	ldr	r2, [pc, #328]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ac:	4b50      	ldr	r3, [pc, #320]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	494d      	ldr	r1, [pc, #308]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d044      	beq.n	8002854 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d107      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d2:	4b47      	ldr	r3, [pc, #284]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d119      	bne.n	8002812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e07f      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d003      	beq.n	80027f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	d107      	bne.n	8002802 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f2:	4b3f      	ldr	r3, [pc, #252]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d109      	bne.n	8002812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e06f      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002802:	4b3b      	ldr	r3, [pc, #236]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e067      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002812:	4b37      	ldr	r3, [pc, #220]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f023 0203 	bic.w	r2, r3, #3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	4934      	ldr	r1, [pc, #208]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002820:	4313      	orrs	r3, r2
 8002822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002824:	f7fe fcb4 	bl	8001190 <HAL_GetTick>
 8002828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282a:	e00a      	b.n	8002842 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800282c:	f7fe fcb0 	bl	8001190 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	f241 3288 	movw	r2, #5000	; 0x1388
 800283a:	4293      	cmp	r3, r2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e04f      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002842:	4b2b      	ldr	r3, [pc, #172]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 020c 	and.w	r2, r3, #12
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	429a      	cmp	r2, r3
 8002852:	d1eb      	bne.n	800282c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002854:	4b25      	ldr	r3, [pc, #148]	; (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d20c      	bcs.n	800287c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002862:	4b22      	ldr	r3, [pc, #136]	; (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800286a:	4b20      	ldr	r3, [pc, #128]	; (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	429a      	cmp	r2, r3
 8002876:	d001      	beq.n	800287c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e032      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002888:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	4916      	ldr	r1, [pc, #88]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	4313      	orrs	r3, r2
 8002898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d009      	beq.n	80028ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028a6:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	490e      	ldr	r1, [pc, #56]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028ba:	f000 f821 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 80028be:	4601      	mov	r1, r0
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	4a0a      	ldr	r2, [pc, #40]	; (80028f4 <HAL_RCC_ClockConfig+0x1c0>)
 80028cc:	5cd3      	ldrb	r3, [r2, r3]
 80028ce:	fa21 f303 	lsr.w	r3, r1, r3
 80028d2:	4a09      	ldr	r2, [pc, #36]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 80028d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <HAL_RCC_ClockConfig+0x1c8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe fb66 	bl	8000fac <HAL_InitTick>

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40023c00 	.word	0x40023c00
 80028f0:	40023800 	.word	0x40023800
 80028f4:	08005c9c 	.word	0x08005c9c
 80028f8:	20000004 	.word	0x20000004
 80028fc:	20000008 	.word	0x20000008

08002900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	607b      	str	r3, [r7, #4]
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	2300      	movs	r3, #0
 8002910:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002916:	4b63      	ldr	r3, [pc, #396]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 030c 	and.w	r3, r3, #12
 800291e:	2b04      	cmp	r3, #4
 8002920:	d007      	beq.n	8002932 <HAL_RCC_GetSysClockFreq+0x32>
 8002922:	2b08      	cmp	r3, #8
 8002924:	d008      	beq.n	8002938 <HAL_RCC_GetSysClockFreq+0x38>
 8002926:	2b00      	cmp	r3, #0
 8002928:	f040 80b4 	bne.w	8002a94 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800292c:	4b5e      	ldr	r3, [pc, #376]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800292e:	60bb      	str	r3, [r7, #8]
       break;
 8002930:	e0b3      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002932:	4b5e      	ldr	r3, [pc, #376]	; (8002aac <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002934:	60bb      	str	r3, [r7, #8]
      break;
 8002936:	e0b0      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002938:	4b5a      	ldr	r3, [pc, #360]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002940:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002942:	4b58      	ldr	r3, [pc, #352]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d04a      	beq.n	80029e4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800294e:	4b55      	ldr	r3, [pc, #340]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	099b      	lsrs	r3, r3, #6
 8002954:	f04f 0400 	mov.w	r4, #0
 8002958:	f240 11ff 	movw	r1, #511	; 0x1ff
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	ea03 0501 	and.w	r5, r3, r1
 8002964:	ea04 0602 	and.w	r6, r4, r2
 8002968:	4629      	mov	r1, r5
 800296a:	4632      	mov	r2, r6
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	f04f 0400 	mov.w	r4, #0
 8002974:	0154      	lsls	r4, r2, #5
 8002976:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800297a:	014b      	lsls	r3, r1, #5
 800297c:	4619      	mov	r1, r3
 800297e:	4622      	mov	r2, r4
 8002980:	1b49      	subs	r1, r1, r5
 8002982:	eb62 0206 	sbc.w	r2, r2, r6
 8002986:	f04f 0300 	mov.w	r3, #0
 800298a:	f04f 0400 	mov.w	r4, #0
 800298e:	0194      	lsls	r4, r2, #6
 8002990:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002994:	018b      	lsls	r3, r1, #6
 8002996:	1a5b      	subs	r3, r3, r1
 8002998:	eb64 0402 	sbc.w	r4, r4, r2
 800299c:	f04f 0100 	mov.w	r1, #0
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	00e2      	lsls	r2, r4, #3
 80029a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029aa:	00d9      	lsls	r1, r3, #3
 80029ac:	460b      	mov	r3, r1
 80029ae:	4614      	mov	r4, r2
 80029b0:	195b      	adds	r3, r3, r5
 80029b2:	eb44 0406 	adc.w	r4, r4, r6
 80029b6:	f04f 0100 	mov.w	r1, #0
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	0262      	lsls	r2, r4, #9
 80029c0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80029c4:	0259      	lsls	r1, r3, #9
 80029c6:	460b      	mov	r3, r1
 80029c8:	4614      	mov	r4, r2
 80029ca:	4618      	mov	r0, r3
 80029cc:	4621      	mov	r1, r4
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f04f 0400 	mov.w	r4, #0
 80029d4:	461a      	mov	r2, r3
 80029d6:	4623      	mov	r3, r4
 80029d8:	f7fd fc02 	bl	80001e0 <__aeabi_uldivmod>
 80029dc:	4603      	mov	r3, r0
 80029de:	460c      	mov	r4, r1
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	e049      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e4:	4b2f      	ldr	r3, [pc, #188]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	099b      	lsrs	r3, r3, #6
 80029ea:	f04f 0400 	mov.w	r4, #0
 80029ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	ea03 0501 	and.w	r5, r3, r1
 80029fa:	ea04 0602 	and.w	r6, r4, r2
 80029fe:	4629      	mov	r1, r5
 8002a00:	4632      	mov	r2, r6
 8002a02:	f04f 0300 	mov.w	r3, #0
 8002a06:	f04f 0400 	mov.w	r4, #0
 8002a0a:	0154      	lsls	r4, r2, #5
 8002a0c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a10:	014b      	lsls	r3, r1, #5
 8002a12:	4619      	mov	r1, r3
 8002a14:	4622      	mov	r2, r4
 8002a16:	1b49      	subs	r1, r1, r5
 8002a18:	eb62 0206 	sbc.w	r2, r2, r6
 8002a1c:	f04f 0300 	mov.w	r3, #0
 8002a20:	f04f 0400 	mov.w	r4, #0
 8002a24:	0194      	lsls	r4, r2, #6
 8002a26:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a2a:	018b      	lsls	r3, r1, #6
 8002a2c:	1a5b      	subs	r3, r3, r1
 8002a2e:	eb64 0402 	sbc.w	r4, r4, r2
 8002a32:	f04f 0100 	mov.w	r1, #0
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	00e2      	lsls	r2, r4, #3
 8002a3c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a40:	00d9      	lsls	r1, r3, #3
 8002a42:	460b      	mov	r3, r1
 8002a44:	4614      	mov	r4, r2
 8002a46:	195b      	adds	r3, r3, r5
 8002a48:	eb44 0406 	adc.w	r4, r4, r6
 8002a4c:	f04f 0100 	mov.w	r1, #0
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	02a2      	lsls	r2, r4, #10
 8002a56:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a5a:	0299      	lsls	r1, r3, #10
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4614      	mov	r4, r2
 8002a60:	4618      	mov	r0, r3
 8002a62:	4621      	mov	r1, r4
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f04f 0400 	mov.w	r4, #0
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4623      	mov	r3, r4
 8002a6e:	f7fd fbb7 	bl	80001e0 <__aeabi_uldivmod>
 8002a72:	4603      	mov	r3, r0
 8002a74:	460c      	mov	r4, r1
 8002a76:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a78:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	0c1b      	lsrs	r3, r3, #16
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	3301      	adds	r3, #1
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a90:	60bb      	str	r3, [r7, #8]
      break;
 8002a92:	e002      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a94:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002a96:	60bb      	str	r3, [r7, #8]
      break;
 8002a98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	00f42400 	.word	0x00f42400
 8002aac:	007a1200 	.word	0x007a1200

08002ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab4:	4b03      	ldr	r3, [pc, #12]	; (8002ac4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	20000004 	.word	0x20000004

08002ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002acc:	f7ff fff0 	bl	8002ab0 <HAL_RCC_GetHCLKFreq>
 8002ad0:	4601      	mov	r1, r0
 8002ad2:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	0a9b      	lsrs	r3, r3, #10
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	4a03      	ldr	r2, [pc, #12]	; (8002aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ade:	5cd3      	ldrb	r3, [r2, r3]
 8002ae0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	08005cac 	.word	0x08005cac

08002af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002af4:	f7ff ffdc 	bl	8002ab0 <HAL_RCC_GetHCLKFreq>
 8002af8:	4601      	mov	r1, r0
 8002afa:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	0b5b      	lsrs	r3, r3, #13
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	4a03      	ldr	r2, [pc, #12]	; (8002b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b06:	5cd3      	ldrb	r3, [r2, r3]
 8002b08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40023800 	.word	0x40023800
 8002b14:	08005cac 	.word	0x08005cac

08002b18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	220f      	movs	r2, #15
 8002b26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b28:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <HAL_RCC_GetClockConfig+0x5c>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 0203 	and.w	r2, r3, #3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b34:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <HAL_RCC_GetClockConfig+0x5c>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b40:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <HAL_RCC_GetClockConfig+0x5c>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b4c:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <HAL_RCC_GetClockConfig+0x5c>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	08db      	lsrs	r3, r3, #3
 8002b52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b5a:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <HAL_RCC_GetClockConfig+0x60>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 020f 	and.w	r2, r3, #15
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	601a      	str	r2, [r3, #0]
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40023c00 	.word	0x40023c00

08002b7c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d105      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d038      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ba4:	4b68      	ldr	r3, [pc, #416]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002baa:	f7fe faf1 	bl	8001190 <HAL_GetTick>
 8002bae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002bb2:	f7fe faed 	bl	8001190 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e0bd      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bc4:	4b61      	ldr	r3, [pc, #388]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f0      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	019b      	lsls	r3, r3, #6
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	071b      	lsls	r3, r3, #28
 8002be2:	495a      	ldr	r1, [pc, #360]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002bea:	4b57      	ldr	r3, [pc, #348]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002bf0:	f7fe face 	bl	8001190 <HAL_GetTick>
 8002bf4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002bf8:	f7fe faca 	bl	8001190 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e09a      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c0a:	4b50      	ldr	r3, [pc, #320]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 8083 	beq.w	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c24:	2300      	movs	r3, #0
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	4b48      	ldr	r3, [pc, #288]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	4a47      	ldr	r2, [pc, #284]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c32:	6413      	str	r3, [r2, #64]	; 0x40
 8002c34:	4b45      	ldr	r3, [pc, #276]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002c40:	4b43      	ldr	r3, [pc, #268]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a42      	ldr	r2, [pc, #264]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c4a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c4c:	f7fe faa0 	bl	8001190 <HAL_GetTick>
 8002c50:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c54:	f7fe fa9c 	bl	8001190 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e06c      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002c66:	4b3a      	ldr	r3, [pc, #232]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0f0      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c72:	4b36      	ldr	r3, [pc, #216]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c7a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d02f      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d028      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c90:	4b2e      	ldr	r3, [pc, #184]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c98:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c9a:	4b2e      	ldr	r3, [pc, #184]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ca0:	4b2c      	ldr	r3, [pc, #176]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002ca6:	4a29      	ldr	r2, [pc, #164]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002cac:	4b27      	ldr	r3, [pc, #156]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d114      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002cb8:	f7fe fa6a 	bl	8001190 <HAL_GetTick>
 8002cbc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cbe:	e00a      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc0:	f7fe fa66 	bl	8001190 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e034      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd6:	4b1d      	ldr	r3, [pc, #116]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0ee      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cee:	d10d      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002cf0:	4b16      	ldr	r3, [pc, #88]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d04:	4911      	ldr	r1, [pc, #68]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	608b      	str	r3, [r1, #8]
 8002d0a:	e005      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002d0c:	4b0f      	ldr	r3, [pc, #60]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	4a0e      	ldr	r2, [pc, #56]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d12:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002d16:	6093      	str	r3, [r2, #8]
 8002d18:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d24:	4909      	ldr	r1, [pc, #36]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	7d1a      	ldrb	r2, [r3, #20]
 8002d3a:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002d3c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	42470068 	.word	0x42470068
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	40007000 	.word	0x40007000
 8002d54:	42470e40 	.word	0x42470e40
 8002d58:	424711e0 	.word	0x424711e0

08002d5c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d13f      	bne.n	8002dfa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002d7a:	4b23      	ldr	r3, [pc, #140]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d82:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d004      	beq.n	8002d94 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d131      	bne.n	8002df2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002d8e:	4b1f      	ldr	r3, [pc, #124]	; (8002e0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002d90:	617b      	str	r3, [r7, #20]
          break;
 8002d92:	e031      	b.n	8002df8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002d94:	4b1c      	ldr	r3, [pc, #112]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002da0:	d109      	bne.n	8002db6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002da2:	4b19      	ldr	r3, [pc, #100]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dac:	4a18      	ldr	r2, [pc, #96]	; (8002e10 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db2:	613b      	str	r3, [r7, #16]
 8002db4:	e008      	b.n	8002dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002db6:	4b14      	ldr	r3, [pc, #80]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dc0:	4a14      	ldr	r2, [pc, #80]	; (8002e14 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8002dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc6:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002dc8:	4b0f      	ldr	r3, [pc, #60]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dce:	099b      	lsrs	r3, r3, #6
 8002dd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	fb02 f303 	mul.w	r3, r2, r3
 8002dda:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002ddc:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002de2:	0f1b      	lsrs	r3, r3, #28
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dee:	617b      	str	r3, [r7, #20]
          break;
 8002df0:	e002      	b.n	8002df8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	617b      	str	r3, [r7, #20]
          break;
 8002df6:	bf00      	nop
        }
      }
      break;
 8002df8:	bf00      	nop
    }
  }
  return frequency;
 8002dfa:	697b      	ldr	r3, [r7, #20]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	371c      	adds	r7, #28
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	00bb8000 	.word	0x00bb8000
 8002e10:	007a1200 	.word	0x007a1200
 8002e14:	00f42400 	.word	0x00f42400

08002e18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e056      	b.n	8002ed8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d106      	bne.n	8002e4a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7fe f869 	bl	8000f1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e60:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	431a      	orrs	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	ea42 0103 	orr.w	r1, r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	0c1b      	lsrs	r3, r3, #16
 8002ea8:	f003 0104 	and.w	r1, r3, #4
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	69da      	ldr	r2, [r3, #28]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ec6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e01d      	b.n	8002f2e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d106      	bne.n	8002f0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f815 	bl	8002f36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4610      	mov	r0, r2
 8002f20:	f000 f968 	bl	80031f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b085      	sub	sp, #20
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f042 0201 	orr.w	r2, r2, #1
 8002f60:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2b06      	cmp	r3, #6
 8002f72:	d007      	beq.n	8002f84 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b082      	sub	sp, #8
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d122      	bne.n	8002fee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d11b      	bne.n	8002fee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f06f 0202 	mvn.w	r2, #2
 8002fbe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d003      	beq.n	8002fdc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 f8ee 	bl	80031b6 <HAL_TIM_IC_CaptureCallback>
 8002fda:	e005      	b.n	8002fe8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 f8e0 	bl	80031a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f8f1 	bl	80031ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	d122      	bne.n	8003042 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f003 0304 	and.w	r3, r3, #4
 8003006:	2b04      	cmp	r3, #4
 8003008:	d11b      	bne.n	8003042 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f06f 0204 	mvn.w	r2, #4
 8003012:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003024:	2b00      	cmp	r3, #0
 8003026:	d003      	beq.n	8003030 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f8c4 	bl	80031b6 <HAL_TIM_IC_CaptureCallback>
 800302e:	e005      	b.n	800303c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f8b6 	bl	80031a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f8c7 	bl	80031ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	f003 0308 	and.w	r3, r3, #8
 800304c:	2b08      	cmp	r3, #8
 800304e:	d122      	bne.n	8003096 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	2b08      	cmp	r3, #8
 800305c:	d11b      	bne.n	8003096 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f06f 0208 	mvn.w	r2, #8
 8003066:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2204      	movs	r2, #4
 800306c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	f003 0303 	and.w	r3, r3, #3
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f89a 	bl	80031b6 <HAL_TIM_IC_CaptureCallback>
 8003082:	e005      	b.n	8003090 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f88c 	bl	80031a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f89d 	bl	80031ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	f003 0310 	and.w	r3, r3, #16
 80030a0:	2b10      	cmp	r3, #16
 80030a2:	d122      	bne.n	80030ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f003 0310 	and.w	r3, r3, #16
 80030ae:	2b10      	cmp	r3, #16
 80030b0:	d11b      	bne.n	80030ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f06f 0210 	mvn.w	r2, #16
 80030ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2208      	movs	r2, #8
 80030c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f870 	bl	80031b6 <HAL_TIM_IC_CaptureCallback>
 80030d6:	e005      	b.n	80030e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f862 	bl	80031a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f873 	bl	80031ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d10e      	bne.n	8003116 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b01      	cmp	r3, #1
 8003104:	d107      	bne.n	8003116 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f06f 0201 	mvn.w	r2, #1
 800310e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f7fd fda7 	bl	8000c64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003120:	2b80      	cmp	r3, #128	; 0x80
 8003122:	d10e      	bne.n	8003142 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312e:	2b80      	cmp	r3, #128	; 0x80
 8003130:	d107      	bne.n	8003142 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800313a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f8e3 	bl	8003308 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314c:	2b40      	cmp	r3, #64	; 0x40
 800314e:	d10e      	bne.n	800316e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315a:	2b40      	cmp	r3, #64	; 0x40
 800315c:	d107      	bne.n	800316e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f838 	bl	80031de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	f003 0320 	and.w	r3, r3, #32
 8003178:	2b20      	cmp	r3, #32
 800317a:	d10e      	bne.n	800319a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	f003 0320 	and.w	r3, r3, #32
 8003186:	2b20      	cmp	r3, #32
 8003188:	d107      	bne.n	800319a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f06f 0220 	mvn.w	r2, #32
 8003192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f8ad 	bl	80032f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
	...

080031f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a34      	ldr	r2, [pc, #208]	; (80032d8 <TIM_Base_SetConfig+0xe4>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d00f      	beq.n	800322c <TIM_Base_SetConfig+0x38>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003212:	d00b      	beq.n	800322c <TIM_Base_SetConfig+0x38>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a31      	ldr	r2, [pc, #196]	; (80032dc <TIM_Base_SetConfig+0xe8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d007      	beq.n	800322c <TIM_Base_SetConfig+0x38>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a30      	ldr	r2, [pc, #192]	; (80032e0 <TIM_Base_SetConfig+0xec>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d003      	beq.n	800322c <TIM_Base_SetConfig+0x38>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a2f      	ldr	r2, [pc, #188]	; (80032e4 <TIM_Base_SetConfig+0xf0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d108      	bne.n	800323e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a25      	ldr	r2, [pc, #148]	; (80032d8 <TIM_Base_SetConfig+0xe4>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d01b      	beq.n	800327e <TIM_Base_SetConfig+0x8a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324c:	d017      	beq.n	800327e <TIM_Base_SetConfig+0x8a>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a22      	ldr	r2, [pc, #136]	; (80032dc <TIM_Base_SetConfig+0xe8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d013      	beq.n	800327e <TIM_Base_SetConfig+0x8a>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a21      	ldr	r2, [pc, #132]	; (80032e0 <TIM_Base_SetConfig+0xec>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d00f      	beq.n	800327e <TIM_Base_SetConfig+0x8a>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a20      	ldr	r2, [pc, #128]	; (80032e4 <TIM_Base_SetConfig+0xf0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d00b      	beq.n	800327e <TIM_Base_SetConfig+0x8a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a1f      	ldr	r2, [pc, #124]	; (80032e8 <TIM_Base_SetConfig+0xf4>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d007      	beq.n	800327e <TIM_Base_SetConfig+0x8a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a1e      	ldr	r2, [pc, #120]	; (80032ec <TIM_Base_SetConfig+0xf8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d003      	beq.n	800327e <TIM_Base_SetConfig+0x8a>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a1d      	ldr	r2, [pc, #116]	; (80032f0 <TIM_Base_SetConfig+0xfc>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d108      	bne.n	8003290 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003284:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4313      	orrs	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a08      	ldr	r2, [pc, #32]	; (80032d8 <TIM_Base_SetConfig+0xe4>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d103      	bne.n	80032c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	615a      	str	r2, [r3, #20]
}
 80032ca:	bf00      	nop
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	40010000 	.word	0x40010000
 80032dc:	40000400 	.word	0x40000400
 80032e0:	40000800 	.word	0x40000800
 80032e4:	40000c00 	.word	0x40000c00
 80032e8:	40014000 	.word	0x40014000
 80032ec:	40014400 	.word	0x40014400
 80032f0:	40014800 	.word	0x40014800

080032f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800332a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800332e:	2b84      	cmp	r3, #132	; 0x84
 8003330:	d005      	beq.n	800333e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003332:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4413      	add	r3, r2
 800333a:	3303      	adds	r3, #3
 800333c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800333e:	68fb      	ldr	r3, [r7, #12]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003352:	f3ef 8305 	mrs	r3, IPSR
 8003356:	607b      	str	r3, [r7, #4]
  return(result);
 8003358:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800335a:	2b00      	cmp	r3, #0
 800335c:	bf14      	ite	ne
 800335e:	2301      	movne	r3, #1
 8003360:	2300      	moveq	r3, #0
 8003362:	b2db      	uxtb	r3, r3
}
 8003364:	4618      	mov	r0, r3
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003374:	f001 f9b6 	bl	80046e4 <vTaskStartScheduler>
  
  return osOK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	bd80      	pop	{r7, pc}

0800337e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800337e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003380:	b089      	sub	sp, #36	; 0x24
 8003382:	af04      	add	r7, sp, #16
 8003384:	6078      	str	r0, [r7, #4]
 8003386:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d020      	beq.n	80033d2 <osThreadCreate+0x54>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d01c      	beq.n	80033d2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685c      	ldr	r4, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681d      	ldr	r5, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691e      	ldr	r6, [r3, #16]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff ffb6 	bl	800331c <makeFreeRtosPriority>
 80033b0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033ba:	9202      	str	r2, [sp, #8]
 80033bc:	9301      	str	r3, [sp, #4]
 80033be:	9100      	str	r1, [sp, #0]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	4632      	mov	r2, r6
 80033c4:	4629      	mov	r1, r5
 80033c6:	4620      	mov	r0, r4
 80033c8:	f000 ff3f 	bl	800424a <xTaskCreateStatic>
 80033cc:	4603      	mov	r3, r0
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	e01c      	b.n	800340c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685c      	ldr	r4, [r3, #4]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033de:	b29e      	uxth	r6, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff ff98 	bl	800331c <makeFreeRtosPriority>
 80033ec:	4602      	mov	r2, r0
 80033ee:	f107 030c 	add.w	r3, r7, #12
 80033f2:	9301      	str	r3, [sp, #4]
 80033f4:	9200      	str	r2, [sp, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	4632      	mov	r2, r6
 80033fa:	4629      	mov	r1, r5
 80033fc:	4620      	mov	r0, r4
 80033fe:	f000 ff7d 	bl	80042fc <xTaskCreate>
 8003402:	4603      	mov	r3, r0
 8003404:	2b01      	cmp	r3, #1
 8003406:	d001      	beq.n	800340c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003408:	2300      	movs	r3, #0
 800340a:	e000      	b.n	800340e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800340c:	68fb      	ldr	r3, [r7, #12]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003416 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b084      	sub	sp, #16
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <osDelay+0x16>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	e000      	b.n	800342e <osDelay+0x18>
 800342c:	2301      	movs	r3, #1
 800342e:	4618      	mov	r0, r3
 8003430:	f001 f892 	bl	8004558 <vTaskDelay>
  
  return osOK;
 8003434:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b082      	sub	sp, #8
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d007      	beq.n	800345e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	4619      	mov	r1, r3
 8003454:	2001      	movs	r0, #1
 8003456:	f000 faab 	bl	80039b0 <xQueueCreateMutexStatic>
 800345a:	4603      	mov	r3, r0
 800345c:	e003      	b.n	8003466 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800345e:	2001      	movs	r0, #1
 8003460:	f000 fa8e 	bl	8003980 <xQueueCreateMutex>
 8003464:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8003466:	4618      	mov	r0, r3
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
	...

08003470 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800347a:	2300      	movs	r3, #0
 800347c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <osMutexWait+0x18>
    return osErrorParameter;
 8003484:	2380      	movs	r3, #128	; 0x80
 8003486:	e03a      	b.n	80034fe <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8003488:	2300      	movs	r3, #0
 800348a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003492:	d103      	bne.n	800349c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8003494:	f04f 33ff 	mov.w	r3, #4294967295
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	e009      	b.n	80034b0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d006      	beq.n	80034b0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <osMutexWait+0x40>
      ticks = 1;
 80034ac:	2301      	movs	r3, #1
 80034ae:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80034b0:	f7ff ff4c 	bl	800334c <inHandlerMode>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d017      	beq.n	80034ea <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80034ba:	f107 0308 	add.w	r3, r7, #8
 80034be:	461a      	mov	r2, r3
 80034c0:	2100      	movs	r1, #0
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fd1c 	bl	8003f00 <xQueueReceiveFromISR>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d001      	beq.n	80034d2 <osMutexWait+0x62>
      return osErrorOS;
 80034ce:	23ff      	movs	r3, #255	; 0xff
 80034d0:	e015      	b.n	80034fe <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d011      	beq.n	80034fc <osMutexWait+0x8c>
 80034d8:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <osMutexWait+0x98>)
 80034da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	f3bf 8f4f 	dsb	sy
 80034e4:	f3bf 8f6f 	isb	sy
 80034e8:	e008      	b.n	80034fc <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80034ea:	68f9      	ldr	r1, [r7, #12]
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 fbff 	bl	8003cf0 <xQueueSemaphoreTake>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d001      	beq.n	80034fc <osMutexWait+0x8c>
    return osErrorOS;
 80034f8:	23ff      	movs	r3, #255	; 0xff
 80034fa:	e000      	b.n	80034fe <osMutexWait+0x8e>
  }
  
  return osOK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	e000ed04 	.word	0xe000ed04

0800350c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003518:	2300      	movs	r3, #0
 800351a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800351c:	f7ff ff16 	bl	800334c <inHandlerMode>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d016      	beq.n	8003554 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003526:	f107 0308 	add.w	r3, r7, #8
 800352a:	4619      	mov	r1, r3
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 fb55 	bl	8003bdc <xQueueGiveFromISR>
 8003532:	4603      	mov	r3, r0
 8003534:	2b01      	cmp	r3, #1
 8003536:	d001      	beq.n	800353c <osMutexRelease+0x30>
      return osErrorOS;
 8003538:	23ff      	movs	r3, #255	; 0xff
 800353a:	e017      	b.n	800356c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d013      	beq.n	800356a <osMutexRelease+0x5e>
 8003542:	4b0c      	ldr	r3, [pc, #48]	; (8003574 <osMutexRelease+0x68>)
 8003544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	f3bf 8f4f 	dsb	sy
 800354e:	f3bf 8f6f 	isb	sy
 8003552:	e00a      	b.n	800356a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8003554:	2300      	movs	r3, #0
 8003556:	2200      	movs	r2, #0
 8003558:	2100      	movs	r1, #0
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 fa44 	bl	80039e8 <xQueueGenericSend>
 8003560:	4603      	mov	r3, r0
 8003562:	2b01      	cmp	r3, #1
 8003564:	d001      	beq.n	800356a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8003566:	23ff      	movs	r3, #255	; 0xff
 8003568:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800356a:	68fb      	ldr	r3, [r7, #12]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	e000ed04 	.word	0xe000ed04

08003578 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f103 0208 	add.w	r2, r3, #8
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f04f 32ff 	mov.w	r2, #4294967295
 8003590:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f103 0208 	add.w	r2, r3, #8
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f103 0208 	add.w	r2, r3, #8
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035d2:	b480      	push	{r7}
 80035d4:	b085      	sub	sp, #20
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
 80035da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	601a      	str	r2, [r3, #0]
}
 800360e:	bf00      	nop
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800361a:	b480      	push	{r7}
 800361c:	b085      	sub	sp, #20
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
 8003622:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003630:	d103      	bne.n	800363a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	e00c      	b.n	8003654 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3308      	adds	r3, #8
 800363e:	60fb      	str	r3, [r7, #12]
 8003640:	e002      	b.n	8003648 <vListInsert+0x2e>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	429a      	cmp	r2, r3
 8003652:	d2f6      	bcs.n	8003642 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	601a      	str	r2, [r3, #0]
}
 8003680:	bf00      	nop
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6892      	ldr	r2, [r2, #8]
 80036a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6852      	ldr	r2, [r2, #4]
 80036ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d103      	bne.n	80036c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	1e5a      	subs	r2, r3, #1
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d109      	bne.n	8003708 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80036f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f8:	f383 8811 	msr	BASEPRI, r3
 80036fc:	f3bf 8f6f 	isb	sy
 8003700:	f3bf 8f4f 	dsb	sy
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	e7fe      	b.n	8003706 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003708:	f001 ff50 	bl	80055ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003714:	68f9      	ldr	r1, [r7, #12]
 8003716:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003718:	fb01 f303 	mul.w	r3, r1, r3
 800371c:	441a      	add	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003738:	3b01      	subs	r3, #1
 800373a:	68f9      	ldr	r1, [r7, #12]
 800373c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800373e:	fb01 f303 	mul.w	r3, r1, r3
 8003742:	441a      	add	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	22ff      	movs	r2, #255	; 0xff
 800374c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	22ff      	movs	r2, #255	; 0xff
 8003754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d114      	bne.n	8003788 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d01a      	beq.n	800379c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	3310      	adds	r3, #16
 800376a:	4618      	mov	r0, r3
 800376c:	f001 f9fc 	bl	8004b68 <xTaskRemoveFromEventList>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d012      	beq.n	800379c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003776:	4b0d      	ldr	r3, [pc, #52]	; (80037ac <xQueueGenericReset+0xcc>)
 8003778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	f3bf 8f4f 	dsb	sy
 8003782:	f3bf 8f6f 	isb	sy
 8003786:	e009      	b.n	800379c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	3310      	adds	r3, #16
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff fef3 	bl	8003578 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	3324      	adds	r3, #36	; 0x24
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff feee 	bl	8003578 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800379c:	f001 ff34 	bl	8005608 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80037a0:	2301      	movs	r3, #1
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	e000ed04 	.word	0xe000ed04

080037b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08e      	sub	sp, #56	; 0x38
 80037b4:	af02      	add	r7, sp, #8
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
 80037bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d109      	bne.n	80037d8 <xQueueGenericCreateStatic+0x28>
 80037c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c8:	f383 8811 	msr	BASEPRI, r3
 80037cc:	f3bf 8f6f 	isb	sy
 80037d0:	f3bf 8f4f 	dsb	sy
 80037d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80037d6:	e7fe      	b.n	80037d6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d109      	bne.n	80037f2 <xQueueGenericCreateStatic+0x42>
 80037de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e2:	f383 8811 	msr	BASEPRI, r3
 80037e6:	f3bf 8f6f 	isb	sy
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	627b      	str	r3, [r7, #36]	; 0x24
 80037f0:	e7fe      	b.n	80037f0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <xQueueGenericCreateStatic+0x4e>
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <xQueueGenericCreateStatic+0x52>
 80037fe:	2301      	movs	r3, #1
 8003800:	e000      	b.n	8003804 <xQueueGenericCreateStatic+0x54>
 8003802:	2300      	movs	r3, #0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d109      	bne.n	800381c <xQueueGenericCreateStatic+0x6c>
 8003808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	623b      	str	r3, [r7, #32]
 800381a:	e7fe      	b.n	800381a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d102      	bne.n	8003828 <xQueueGenericCreateStatic+0x78>
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <xQueueGenericCreateStatic+0x7c>
 8003828:	2301      	movs	r3, #1
 800382a:	e000      	b.n	800382e <xQueueGenericCreateStatic+0x7e>
 800382c:	2300      	movs	r3, #0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d109      	bne.n	8003846 <xQueueGenericCreateStatic+0x96>
 8003832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003836:	f383 8811 	msr	BASEPRI, r3
 800383a:	f3bf 8f6f 	isb	sy
 800383e:	f3bf 8f4f 	dsb	sy
 8003842:	61fb      	str	r3, [r7, #28]
 8003844:	e7fe      	b.n	8003844 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003846:	2348      	movs	r3, #72	; 0x48
 8003848:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2b48      	cmp	r3, #72	; 0x48
 800384e:	d009      	beq.n	8003864 <xQueueGenericCreateStatic+0xb4>
 8003850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003854:	f383 8811 	msr	BASEPRI, r3
 8003858:	f3bf 8f6f 	isb	sy
 800385c:	f3bf 8f4f 	dsb	sy
 8003860:	61bb      	str	r3, [r7, #24]
 8003862:	e7fe      	b.n	8003862 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00d      	beq.n	800388a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003876:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800387a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	4613      	mov	r3, r2
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	68b9      	ldr	r1, [r7, #8]
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 f842 	bl	800390e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800388a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800388c:	4618      	mov	r0, r3
 800388e:	3730      	adds	r7, #48	; 0x30
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08a      	sub	sp, #40	; 0x28
 8003898:	af02      	add	r7, sp, #8
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	4613      	mov	r3, r2
 80038a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d109      	bne.n	80038bc <xQueueGenericCreate+0x28>
 80038a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ac:	f383 8811 	msr	BASEPRI, r3
 80038b0:	f3bf 8f6f 	isb	sy
 80038b4:	f3bf 8f4f 	dsb	sy
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	e7fe      	b.n	80038ba <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d102      	bne.n	80038c8 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]
 80038c6:	e004      	b.n	80038d2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	fb02 f303 	mul.w	r3, r2, r3
 80038d0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	3348      	adds	r3, #72	; 0x48
 80038d6:	4618      	mov	r0, r3
 80038d8:	f001 ff82 	bl	80057e0 <pvPortMalloc>
 80038dc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00f      	beq.n	8003904 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	3348      	adds	r3, #72	; 0x48
 80038e8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80038f2:	79fa      	ldrb	r2, [r7, #7]
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	4613      	mov	r3, r2
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	68b9      	ldr	r1, [r7, #8]
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 f805 	bl	800390e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003904:	69bb      	ldr	r3, [r7, #24]
	}
 8003906:	4618      	mov	r0, r3
 8003908:	3720      	adds	r7, #32
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b084      	sub	sp, #16
 8003912:	af00      	add	r7, sp, #0
 8003914:	60f8      	str	r0, [r7, #12]
 8003916:	60b9      	str	r1, [r7, #8]
 8003918:	607a      	str	r2, [r7, #4]
 800391a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d103      	bne.n	800392a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	e002      	b.n	8003930 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800393c:	2101      	movs	r1, #1
 800393e:	69b8      	ldr	r0, [r7, #24]
 8003940:	f7ff fece 	bl	80036e0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003944:	bf00      	nop
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00e      	beq.n	8003978 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800396c:	2300      	movs	r3, #0
 800396e:	2200      	movs	r2, #0
 8003970:	2100      	movs	r1, #0
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f838 	bl	80039e8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003978:	bf00      	nop
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800398a:	2301      	movs	r3, #1
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	2300      	movs	r3, #0
 8003990:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	461a      	mov	r2, r3
 8003996:	6939      	ldr	r1, [r7, #16]
 8003998:	6978      	ldr	r0, [r7, #20]
 800399a:	f7ff ff7b 	bl	8003894 <xQueueGenericCreate>
 800399e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f7ff ffd3 	bl	800394c <prvInitialiseMutex>

		return pxNewQueue;
 80039a6:	68fb      	ldr	r3, [r7, #12]
	}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af02      	add	r7, sp, #8
 80039b6:	4603      	mov	r3, r0
 80039b8:	6039      	str	r1, [r7, #0]
 80039ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80039bc:	2301      	movs	r3, #1
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	2300      	movs	r3, #0
 80039c2:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80039c4:	79fb      	ldrb	r3, [r7, #7]
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	2200      	movs	r2, #0
 80039cc:	6939      	ldr	r1, [r7, #16]
 80039ce:	6978      	ldr	r0, [r7, #20]
 80039d0:	f7ff feee 	bl	80037b0 <xQueueGenericCreateStatic>
 80039d4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f7ff ffb8 	bl	800394c <prvInitialiseMutex>

		return pxNewQueue;
 80039dc:	68fb      	ldr	r3, [r7, #12]
	}
 80039de:	4618      	mov	r0, r3
 80039e0:	3718      	adds	r7, #24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08e      	sub	sp, #56	; 0x38
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
 80039f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80039f6:	2300      	movs	r3, #0
 80039f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80039fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d109      	bne.n	8003a18 <xQueueGenericSend+0x30>
 8003a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a08:	f383 8811 	msr	BASEPRI, r3
 8003a0c:	f3bf 8f6f 	isb	sy
 8003a10:	f3bf 8f4f 	dsb	sy
 8003a14:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a16:	e7fe      	b.n	8003a16 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d103      	bne.n	8003a26 <xQueueGenericSend+0x3e>
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <xQueueGenericSend+0x42>
 8003a26:	2301      	movs	r3, #1
 8003a28:	e000      	b.n	8003a2c <xQueueGenericSend+0x44>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d109      	bne.n	8003a44 <xQueueGenericSend+0x5c>
 8003a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a34:	f383 8811 	msr	BASEPRI, r3
 8003a38:	f3bf 8f6f 	isb	sy
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
 8003a42:	e7fe      	b.n	8003a42 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d103      	bne.n	8003a52 <xQueueGenericSend+0x6a>
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <xQueueGenericSend+0x6e>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <xQueueGenericSend+0x70>
 8003a56:	2300      	movs	r3, #0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d109      	bne.n	8003a70 <xQueueGenericSend+0x88>
 8003a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a60:	f383 8811 	msr	BASEPRI, r3
 8003a64:	f3bf 8f6f 	isb	sy
 8003a68:	f3bf 8f4f 	dsb	sy
 8003a6c:	623b      	str	r3, [r7, #32]
 8003a6e:	e7fe      	b.n	8003a6e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a70:	f001 fa36 	bl	8004ee0 <xTaskGetSchedulerState>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d102      	bne.n	8003a80 <xQueueGenericSend+0x98>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <xQueueGenericSend+0x9c>
 8003a80:	2301      	movs	r3, #1
 8003a82:	e000      	b.n	8003a86 <xQueueGenericSend+0x9e>
 8003a84:	2300      	movs	r3, #0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d109      	bne.n	8003a9e <xQueueGenericSend+0xb6>
 8003a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8e:	f383 8811 	msr	BASEPRI, r3
 8003a92:	f3bf 8f6f 	isb	sy
 8003a96:	f3bf 8f4f 	dsb	sy
 8003a9a:	61fb      	str	r3, [r7, #28]
 8003a9c:	e7fe      	b.n	8003a9c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a9e:	f001 fd85 	bl	80055ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d302      	bcc.n	8003ab4 <xQueueGenericSend+0xcc>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d129      	bne.n	8003b08 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	68b9      	ldr	r1, [r7, #8]
 8003ab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aba:	f000 fab6 	bl	800402a <prvCopyDataToQueue>
 8003abe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d010      	beq.n	8003aea <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aca:	3324      	adds	r3, #36	; 0x24
 8003acc:	4618      	mov	r0, r3
 8003ace:	f001 f84b 	bl	8004b68 <xTaskRemoveFromEventList>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d013      	beq.n	8003b00 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ad8:	4b3f      	ldr	r3, [pc, #252]	; (8003bd8 <xQueueGenericSend+0x1f0>)
 8003ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	f3bf 8f4f 	dsb	sy
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	e00a      	b.n	8003b00 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d007      	beq.n	8003b00 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003af0:	4b39      	ldr	r3, [pc, #228]	; (8003bd8 <xQueueGenericSend+0x1f0>)
 8003af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b00:	f001 fd82 	bl	8005608 <vPortExitCritical>
				return pdPASS;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e063      	b.n	8003bd0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d103      	bne.n	8003b16 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b0e:	f001 fd7b 	bl	8005608 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	e05c      	b.n	8003bd0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d106      	bne.n	8003b2a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b1c:	f107 0314 	add.w	r3, r7, #20
 8003b20:	4618      	mov	r0, r3
 8003b22:	f001 f883 	bl	8004c2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b26:	2301      	movs	r3, #1
 8003b28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b2a:	f001 fd6d 	bl	8005608 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b2e:	f000 fe37 	bl	80047a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b32:	f001 fd3b 	bl	80055ac <vPortEnterCritical>
 8003b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b3c:	b25b      	sxtb	r3, r3
 8003b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b42:	d103      	bne.n	8003b4c <xQueueGenericSend+0x164>
 8003b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b52:	b25b      	sxtb	r3, r3
 8003b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b58:	d103      	bne.n	8003b62 <xQueueGenericSend+0x17a>
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b62:	f001 fd51 	bl	8005608 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b66:	1d3a      	adds	r2, r7, #4
 8003b68:	f107 0314 	add.w	r3, r7, #20
 8003b6c:	4611      	mov	r1, r2
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f001 f872 	bl	8004c58 <xTaskCheckForTimeOut>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d124      	bne.n	8003bc4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b7c:	f000 fb4d 	bl	800421a <prvIsQueueFull>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d018      	beq.n	8003bb8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	3310      	adds	r3, #16
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 ffc6 	bl	8004b20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b96:	f000 fad8 	bl	800414a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b9a:	f000 fe0f 	bl	80047bc <xTaskResumeAll>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f47f af7c 	bne.w	8003a9e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003ba6:	4b0c      	ldr	r3, [pc, #48]	; (8003bd8 <xQueueGenericSend+0x1f0>)
 8003ba8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	f3bf 8f4f 	dsb	sy
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	e772      	b.n	8003a9e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003bb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bba:	f000 fac6 	bl	800414a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bbe:	f000 fdfd 	bl	80047bc <xTaskResumeAll>
 8003bc2:	e76c      	b.n	8003a9e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003bc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bc6:	f000 fac0 	bl	800414a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bca:	f000 fdf7 	bl	80047bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003bce:	2300      	movs	r3, #0
		}
	}
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3738      	adds	r7, #56	; 0x38
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	e000ed04 	.word	0xe000ed04

08003bdc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b08e      	sub	sp, #56	; 0x38
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d109      	bne.n	8003c04 <xQueueGiveFromISR+0x28>
 8003bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf4:	f383 8811 	msr	BASEPRI, r3
 8003bf8:	f3bf 8f6f 	isb	sy
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	623b      	str	r3, [r7, #32]
 8003c02:	e7fe      	b.n	8003c02 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d009      	beq.n	8003c20 <xQueueGiveFromISR+0x44>
 8003c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c10:	f383 8811 	msr	BASEPRI, r3
 8003c14:	f3bf 8f6f 	isb	sy
 8003c18:	f3bf 8f4f 	dsb	sy
 8003c1c:	61fb      	str	r3, [r7, #28]
 8003c1e:	e7fe      	b.n	8003c1e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8003c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d103      	bne.n	8003c30 <xQueueGiveFromISR+0x54>
 8003c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <xQueueGiveFromISR+0x58>
 8003c30:	2301      	movs	r3, #1
 8003c32:	e000      	b.n	8003c36 <xQueueGiveFromISR+0x5a>
 8003c34:	2300      	movs	r3, #0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d109      	bne.n	8003c4e <xQueueGiveFromISR+0x72>
 8003c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3e:	f383 8811 	msr	BASEPRI, r3
 8003c42:	f3bf 8f6f 	isb	sy
 8003c46:	f3bf 8f4f 	dsb	sy
 8003c4a:	61bb      	str	r3, [r7, #24]
 8003c4c:	e7fe      	b.n	8003c4c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c4e:	f001 fd89 	bl	8005764 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003c52:	f3ef 8211 	mrs	r2, BASEPRI
 8003c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5a:	f383 8811 	msr	BASEPRI, r3
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	617a      	str	r2, [r7, #20]
 8003c68:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003c6a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c72:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d22b      	bcs.n	8003cd6 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c98:	d112      	bne.n	8003cc0 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d016      	beq.n	8003cd0 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca4:	3324      	adds	r3, #36	; 0x24
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 ff5e 	bl	8004b68 <xTaskRemoveFromEventList>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00e      	beq.n	8003cd0 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00b      	beq.n	8003cd0 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	e007      	b.n	8003cd0 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	b25a      	sxtb	r2, r3
 8003cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8003cd4:	e001      	b.n	8003cda <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	637b      	str	r3, [r7, #52]	; 0x34
 8003cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cdc:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3738      	adds	r7, #56	; 0x38
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08e      	sub	sp, #56	; 0x38
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003d02:	2300      	movs	r3, #0
 8003d04:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d109      	bne.n	8003d20 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8003d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d10:	f383 8811 	msr	BASEPRI, r3
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	623b      	str	r3, [r7, #32]
 8003d1e:	e7fe      	b.n	8003d1e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d009      	beq.n	8003d3c <xQueueSemaphoreTake+0x4c>
 8003d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2c:	f383 8811 	msr	BASEPRI, r3
 8003d30:	f3bf 8f6f 	isb	sy
 8003d34:	f3bf 8f4f 	dsb	sy
 8003d38:	61fb      	str	r3, [r7, #28]
 8003d3a:	e7fe      	b.n	8003d3a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d3c:	f001 f8d0 	bl	8004ee0 <xTaskGetSchedulerState>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d102      	bne.n	8003d4c <xQueueSemaphoreTake+0x5c>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <xQueueSemaphoreTake+0x60>
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e000      	b.n	8003d52 <xQueueSemaphoreTake+0x62>
 8003d50:	2300      	movs	r3, #0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d109      	bne.n	8003d6a <xQueueSemaphoreTake+0x7a>
 8003d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5a:	f383 8811 	msr	BASEPRI, r3
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	f3bf 8f4f 	dsb	sy
 8003d66:	61bb      	str	r3, [r7, #24]
 8003d68:	e7fe      	b.n	8003d68 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d6a:	f001 fc1f 	bl	80055ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d72:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d024      	beq.n	8003dc4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7c:	1e5a      	subs	r2, r3, #1
 8003d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d80:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d104      	bne.n	8003d94 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003d8a:	f001 fa6f 	bl	800526c <pvTaskIncrementMutexHeldCount>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d92:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00f      	beq.n	8003dbc <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d9e:	3310      	adds	r3, #16
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 fee1 	bl	8004b68 <xTaskRemoveFromEventList>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d007      	beq.n	8003dbc <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003dac:	4b53      	ldr	r3, [pc, #332]	; (8003efc <xQueueSemaphoreTake+0x20c>)
 8003dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003dbc:	f001 fc24 	bl	8005608 <vPortExitCritical>
				return pdPASS;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e096      	b.n	8003ef2 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d110      	bne.n	8003dec <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d009      	beq.n	8003de4 <xQueueSemaphoreTake+0xf4>
 8003dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd4:	f383 8811 	msr	BASEPRI, r3
 8003dd8:	f3bf 8f6f 	isb	sy
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	617b      	str	r3, [r7, #20]
 8003de2:	e7fe      	b.n	8003de2 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003de4:	f001 fc10 	bl	8005608 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003de8:	2300      	movs	r3, #0
 8003dea:	e082      	b.n	8003ef2 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d106      	bne.n	8003e00 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003df2:	f107 030c 	add.w	r3, r7, #12
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 ff18 	bl	8004c2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e00:	f001 fc02 	bl	8005608 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e04:	f000 fccc 	bl	80047a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e08:	f001 fbd0 	bl	80055ac <vPortEnterCritical>
 8003e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e12:	b25b      	sxtb	r3, r3
 8003e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e18:	d103      	bne.n	8003e22 <xQueueSemaphoreTake+0x132>
 8003e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e28:	b25b      	sxtb	r3, r3
 8003e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2e:	d103      	bne.n	8003e38 <xQueueSemaphoreTake+0x148>
 8003e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e38:	f001 fbe6 	bl	8005608 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e3c:	463a      	mov	r2, r7
 8003e3e:	f107 030c 	add.w	r3, r7, #12
 8003e42:	4611      	mov	r1, r2
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 ff07 	bl	8004c58 <xTaskCheckForTimeOut>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d132      	bne.n	8003eb6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e52:	f000 f9cc 	bl	80041ee <prvIsQueueEmpty>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d026      	beq.n	8003eaa <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d109      	bne.n	8003e78 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8003e64:	f001 fba2 	bl	80055ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f001 f855 	bl	8004f1c <xTaskPriorityInherit>
 8003e72:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003e74:	f001 fbc8 	bl	8005608 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7a:	3324      	adds	r3, #36	; 0x24
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	4611      	mov	r1, r2
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 fe4d 	bl	8004b20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e88:	f000 f95f 	bl	800414a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e8c:	f000 fc96 	bl	80047bc <xTaskResumeAll>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f47f af69 	bne.w	8003d6a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8003e98:	4b18      	ldr	r3, [pc, #96]	; (8003efc <xQueueSemaphoreTake+0x20c>)
 8003e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	e75f      	b.n	8003d6a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003eaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003eac:	f000 f94d 	bl	800414a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003eb0:	f000 fc84 	bl	80047bc <xTaskResumeAll>
 8003eb4:	e759      	b.n	8003d6a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003eb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003eb8:	f000 f947 	bl	800414a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ebc:	f000 fc7e 	bl	80047bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ec0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ec2:	f000 f994 	bl	80041ee <prvIsQueueEmpty>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f43f af4e 	beq.w	8003d6a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00d      	beq.n	8003ef0 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8003ed4:	f001 fb6a 	bl	80055ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003ed8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003eda:	f000 f88e 	bl	8003ffa <prvGetDisinheritPriorityAfterTimeout>
 8003ede:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f001 f922 	bl	8005130 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003eec:	f001 fb8c 	bl	8005608 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ef0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3738      	adds	r7, #56	; 0x38
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	e000ed04 	.word	0xe000ed04

08003f00 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b08e      	sub	sp, #56	; 0x38
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d109      	bne.n	8003f2a <xQueueReceiveFromISR+0x2a>
 8003f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	623b      	str	r3, [r7, #32]
 8003f28:	e7fe      	b.n	8003f28 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d103      	bne.n	8003f38 <xQueueReceiveFromISR+0x38>
 8003f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <xQueueReceiveFromISR+0x3c>
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e000      	b.n	8003f3e <xQueueReceiveFromISR+0x3e>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d109      	bne.n	8003f56 <xQueueReceiveFromISR+0x56>
 8003f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f46:	f383 8811 	msr	BASEPRI, r3
 8003f4a:	f3bf 8f6f 	isb	sy
 8003f4e:	f3bf 8f4f 	dsb	sy
 8003f52:	61fb      	str	r3, [r7, #28]
 8003f54:	e7fe      	b.n	8003f54 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f56:	f001 fc05 	bl	8005764 <vPortValidateInterruptPriority>
	__asm volatile
 8003f5a:	f3ef 8211 	mrs	r2, BASEPRI
 8003f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f62:	f383 8811 	msr	BASEPRI, r3
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	f3bf 8f4f 	dsb	sy
 8003f6e:	61ba      	str	r2, [r7, #24]
 8003f70:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003f72:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f74:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d02f      	beq.n	8003fe2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f8c:	68b9      	ldr	r1, [r7, #8]
 8003f8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f90:	f000 f8b5 	bl	80040fe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f96:	1e5a      	subs	r2, r3, #1
 8003f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003f9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa4:	d112      	bne.n	8003fcc <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d016      	beq.n	8003fdc <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb0:	3310      	adds	r3, #16
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 fdd8 	bl	8004b68 <xTaskRemoveFromEventList>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00e      	beq.n	8003fdc <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00b      	beq.n	8003fdc <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	e007      	b.n	8003fdc <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	b25a      	sxtb	r2, r3
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	637b      	str	r3, [r7, #52]	; 0x34
 8003fe0:	e001      	b.n	8003fe6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8003fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3738      	adds	r7, #56	; 0x38
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b085      	sub	sp, #20
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	2b00      	cmp	r3, #0
 8004008:	d006      	beq.n	8004018 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f1c3 0307 	rsb	r3, r3, #7
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	e001      	b.n	800401c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004018:	2300      	movs	r3, #0
 800401a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800401c:	68fb      	ldr	r3, [r7, #12]
	}
 800401e:	4618      	mov	r0, r3
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b086      	sub	sp, #24
 800402e:	af00      	add	r7, sp, #0
 8004030:	60f8      	str	r0, [r7, #12]
 8004032:	60b9      	str	r1, [r7, #8]
 8004034:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004036:	2300      	movs	r3, #0
 8004038:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10d      	bne.n	8004064 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d14d      	bne.n	80040ec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	4618      	mov	r0, r3
 8004056:	f000 ffe7 	bl	8005028 <xTaskPriorityDisinherit>
 800405a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	605a      	str	r2, [r3, #4]
 8004062:	e043      	b.n	80040ec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d119      	bne.n	800409e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6898      	ldr	r0, [r3, #8]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	461a      	mov	r2, r3
 8004074:	68b9      	ldr	r1, [r7, #8]
 8004076:	f001 fdad 	bl	8005bd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	441a      	add	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	429a      	cmp	r2, r3
 8004092:	d32b      	bcc.n	80040ec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	609a      	str	r2, [r3, #8]
 800409c:	e026      	b.n	80040ec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	68d8      	ldr	r0, [r3, #12]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	461a      	mov	r2, r3
 80040a8:	68b9      	ldr	r1, [r7, #8]
 80040aa:	f001 fd93 	bl	8005bd4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	425b      	negs	r3, r3
 80040b8:	441a      	add	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d207      	bcs.n	80040da <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	425b      	negs	r3, r3
 80040d4:	441a      	add	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d105      	bne.n	80040ec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	3b01      	subs	r3, #1
 80040ea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80040f4:	697b      	ldr	r3, [r7, #20]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3718      	adds	r7, #24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b082      	sub	sp, #8
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
 8004106:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410c:	2b00      	cmp	r3, #0
 800410e:	d018      	beq.n	8004142 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	441a      	add	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	429a      	cmp	r2, r3
 8004128:	d303      	bcc.n	8004132 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68d9      	ldr	r1, [r3, #12]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	461a      	mov	r2, r3
 800413c:	6838      	ldr	r0, [r7, #0]
 800413e:	f001 fd49 	bl	8005bd4 <memcpy>
	}
}
 8004142:	bf00      	nop
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b084      	sub	sp, #16
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004152:	f001 fa2b 	bl	80055ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800415c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800415e:	e011      	b.n	8004184 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	2b00      	cmp	r3, #0
 8004166:	d012      	beq.n	800418e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3324      	adds	r3, #36	; 0x24
 800416c:	4618      	mov	r0, r3
 800416e:	f000 fcfb 	bl	8004b68 <xTaskRemoveFromEventList>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004178:	f000 fdce 	bl	8004d18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800417c:	7bfb      	ldrb	r3, [r7, #15]
 800417e:	3b01      	subs	r3, #1
 8004180:	b2db      	uxtb	r3, r3
 8004182:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004188:	2b00      	cmp	r3, #0
 800418a:	dce9      	bgt.n	8004160 <prvUnlockQueue+0x16>
 800418c:	e000      	b.n	8004190 <prvUnlockQueue+0x46>
					break;
 800418e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	22ff      	movs	r2, #255	; 0xff
 8004194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004198:	f001 fa36 	bl	8005608 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800419c:	f001 fa06 	bl	80055ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041a6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041a8:	e011      	b.n	80041ce <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d012      	beq.n	80041d8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3310      	adds	r3, #16
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 fcd6 	bl	8004b68 <xTaskRemoveFromEventList>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80041c2:	f000 fda9 	bl	8004d18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80041c6:	7bbb      	ldrb	r3, [r7, #14]
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	dce9      	bgt.n	80041aa <prvUnlockQueue+0x60>
 80041d6:	e000      	b.n	80041da <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80041d8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	22ff      	movs	r2, #255	; 0xff
 80041de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80041e2:	f001 fa11 	bl	8005608 <vPortExitCritical>
}
 80041e6:	bf00      	nop
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b084      	sub	sp, #16
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041f6:	f001 f9d9 	bl	80055ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d102      	bne.n	8004208 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004202:	2301      	movs	r3, #1
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	e001      	b.n	800420c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800420c:	f001 f9fc 	bl	8005608 <vPortExitCritical>

	return xReturn;
 8004210:	68fb      	ldr	r3, [r7, #12]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b084      	sub	sp, #16
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004222:	f001 f9c3 	bl	80055ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422e:	429a      	cmp	r2, r3
 8004230:	d102      	bne.n	8004238 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004232:	2301      	movs	r3, #1
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	e001      	b.n	800423c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004238:	2300      	movs	r3, #0
 800423a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800423c:	f001 f9e4 	bl	8005608 <vPortExitCritical>

	return xReturn;
 8004240:	68fb      	ldr	r3, [r7, #12]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800424a:	b580      	push	{r7, lr}
 800424c:	b08e      	sub	sp, #56	; 0x38
 800424e:	af04      	add	r7, sp, #16
 8004250:	60f8      	str	r0, [r7, #12]
 8004252:	60b9      	str	r1, [r7, #8]
 8004254:	607a      	str	r2, [r7, #4]
 8004256:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800425a:	2b00      	cmp	r3, #0
 800425c:	d109      	bne.n	8004272 <xTaskCreateStatic+0x28>
	__asm volatile
 800425e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	623b      	str	r3, [r7, #32]
 8004270:	e7fe      	b.n	8004270 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004274:	2b00      	cmp	r3, #0
 8004276:	d109      	bne.n	800428c <xTaskCreateStatic+0x42>
 8004278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	61fb      	str	r3, [r7, #28]
 800428a:	e7fe      	b.n	800428a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800428c:	2354      	movs	r3, #84	; 0x54
 800428e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	2b54      	cmp	r3, #84	; 0x54
 8004294:	d009      	beq.n	80042aa <xTaskCreateStatic+0x60>
 8004296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429a:	f383 8811 	msr	BASEPRI, r3
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	61bb      	str	r3, [r7, #24]
 80042a8:	e7fe      	b.n	80042a8 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80042aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d01e      	beq.n	80042ee <xTaskCreateStatic+0xa4>
 80042b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d01b      	beq.n	80042ee <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042be:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	2202      	movs	r2, #2
 80042c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80042c8:	2300      	movs	r3, #0
 80042ca:	9303      	str	r3, [sp, #12]
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	9302      	str	r3, [sp, #8]
 80042d0:	f107 0314 	add.w	r3, r7, #20
 80042d4:	9301      	str	r3, [sp, #4]
 80042d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	68b9      	ldr	r1, [r7, #8]
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 f850 	bl	8004386 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042e8:	f000 f8cc 	bl	8004484 <prvAddNewTaskToReadyList>
 80042ec:	e001      	b.n	80042f2 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80042ee:	2300      	movs	r3, #0
 80042f0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80042f2:	697b      	ldr	r3, [r7, #20]
	}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3728      	adds	r7, #40	; 0x28
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08c      	sub	sp, #48	; 0x30
 8004300:	af04      	add	r7, sp, #16
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	603b      	str	r3, [r7, #0]
 8004308:	4613      	mov	r3, r2
 800430a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800430c:	88fb      	ldrh	r3, [r7, #6]
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4618      	mov	r0, r3
 8004312:	f001 fa65 	bl	80057e0 <pvPortMalloc>
 8004316:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00e      	beq.n	800433c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800431e:	2054      	movs	r0, #84	; 0x54
 8004320:	f001 fa5e 	bl	80057e0 <pvPortMalloc>
 8004324:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	631a      	str	r2, [r3, #48]	; 0x30
 8004332:	e005      	b.n	8004340 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004334:	6978      	ldr	r0, [r7, #20]
 8004336:	f001 fb15 	bl	8005964 <vPortFree>
 800433a:	e001      	b.n	8004340 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800433c:	2300      	movs	r3, #0
 800433e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d017      	beq.n	8004376 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800434e:	88fa      	ldrh	r2, [r7, #6]
 8004350:	2300      	movs	r3, #0
 8004352:	9303      	str	r3, [sp, #12]
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	9302      	str	r3, [sp, #8]
 8004358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435a:	9301      	str	r3, [sp, #4]
 800435c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	68b9      	ldr	r1, [r7, #8]
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f000 f80e 	bl	8004386 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800436a:	69f8      	ldr	r0, [r7, #28]
 800436c:	f000 f88a 	bl	8004484 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004370:	2301      	movs	r3, #1
 8004372:	61bb      	str	r3, [r7, #24]
 8004374:	e002      	b.n	800437c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004376:	f04f 33ff 	mov.w	r3, #4294967295
 800437a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800437c:	69bb      	ldr	r3, [r7, #24]
	}
 800437e:	4618      	mov	r0, r3
 8004380:	3720      	adds	r7, #32
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b088      	sub	sp, #32
 800438a:	af00      	add	r7, sp, #0
 800438c:	60f8      	str	r0, [r7, #12]
 800438e:	60b9      	str	r1, [r7, #8]
 8004390:	607a      	str	r2, [r7, #4]
 8004392:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004396:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800439e:	3b01      	subs	r3, #1
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4413      	add	r3, r2
 80043a4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	f023 0307 	bic.w	r3, r3, #7
 80043ac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d009      	beq.n	80043cc <prvInitialiseNewTask+0x46>
 80043b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043bc:	f383 8811 	msr	BASEPRI, r3
 80043c0:	f3bf 8f6f 	isb	sy
 80043c4:	f3bf 8f4f 	dsb	sy
 80043c8:	617b      	str	r3, [r7, #20]
 80043ca:	e7fe      	b.n	80043ca <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043cc:	2300      	movs	r3, #0
 80043ce:	61fb      	str	r3, [r7, #28]
 80043d0:	e012      	b.n	80043f8 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	4413      	add	r3, r2
 80043d8:	7819      	ldrb	r1, [r3, #0]
 80043da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	4413      	add	r3, r2
 80043e0:	3334      	adds	r3, #52	; 0x34
 80043e2:	460a      	mov	r2, r1
 80043e4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	4413      	add	r3, r2
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d006      	beq.n	8004400 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	3301      	adds	r3, #1
 80043f6:	61fb      	str	r3, [r7, #28]
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	2b0f      	cmp	r3, #15
 80043fc:	d9e9      	bls.n	80043d2 <prvInitialiseNewTask+0x4c>
 80043fe:	e000      	b.n	8004402 <prvInitialiseNewTask+0x7c>
		{
			break;
 8004400:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800440a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440c:	2b06      	cmp	r3, #6
 800440e:	d901      	bls.n	8004414 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004410:	2306      	movs	r3, #6
 8004412:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004418:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800441e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004422:	2200      	movs	r2, #0
 8004424:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004428:	3304      	adds	r3, #4
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff f8c4 	bl	80035b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004432:	3318      	adds	r3, #24
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff f8bf 	bl	80035b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800443a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800443e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004442:	f1c3 0207 	rsb	r2, r3, #7
 8004446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004448:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800444a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800444e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004452:	2200      	movs	r2, #0
 8004454:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	68f9      	ldr	r1, [r7, #12]
 8004462:	69b8      	ldr	r0, [r7, #24]
 8004464:	f000 ff7c 	bl	8005360 <pxPortInitialiseStack>
 8004468:	4602      	mov	r2, r0
 800446a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800446e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004470:	2b00      	cmp	r3, #0
 8004472:	d002      	beq.n	800447a <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004476:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004478:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800447a:	bf00      	nop
 800447c:	3720      	adds	r7, #32
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800448c:	f001 f88e 	bl	80055ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004490:	4b2a      	ldr	r3, [pc, #168]	; (800453c <prvAddNewTaskToReadyList+0xb8>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3301      	adds	r3, #1
 8004496:	4a29      	ldr	r2, [pc, #164]	; (800453c <prvAddNewTaskToReadyList+0xb8>)
 8004498:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800449a:	4b29      	ldr	r3, [pc, #164]	; (8004540 <prvAddNewTaskToReadyList+0xbc>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d109      	bne.n	80044b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80044a2:	4a27      	ldr	r2, [pc, #156]	; (8004540 <prvAddNewTaskToReadyList+0xbc>)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80044a8:	4b24      	ldr	r3, [pc, #144]	; (800453c <prvAddNewTaskToReadyList+0xb8>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d110      	bne.n	80044d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80044b0:	f000 fc56 	bl	8004d60 <prvInitialiseTaskLists>
 80044b4:	e00d      	b.n	80044d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80044b6:	4b23      	ldr	r3, [pc, #140]	; (8004544 <prvAddNewTaskToReadyList+0xc0>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d109      	bne.n	80044d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80044be:	4b20      	ldr	r3, [pc, #128]	; (8004540 <prvAddNewTaskToReadyList+0xbc>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d802      	bhi.n	80044d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80044cc:	4a1c      	ldr	r2, [pc, #112]	; (8004540 <prvAddNewTaskToReadyList+0xbc>)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044d2:	4b1d      	ldr	r3, [pc, #116]	; (8004548 <prvAddNewTaskToReadyList+0xc4>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	3301      	adds	r3, #1
 80044d8:	4a1b      	ldr	r2, [pc, #108]	; (8004548 <prvAddNewTaskToReadyList+0xc4>)
 80044da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e0:	2201      	movs	r2, #1
 80044e2:	409a      	lsls	r2, r3
 80044e4:	4b19      	ldr	r3, [pc, #100]	; (800454c <prvAddNewTaskToReadyList+0xc8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	4a18      	ldr	r2, [pc, #96]	; (800454c <prvAddNewTaskToReadyList+0xc8>)
 80044ec:	6013      	str	r3, [r2, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f2:	4613      	mov	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4a15      	ldr	r2, [pc, #84]	; (8004550 <prvAddNewTaskToReadyList+0xcc>)
 80044fc:	441a      	add	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	3304      	adds	r3, #4
 8004502:	4619      	mov	r1, r3
 8004504:	4610      	mov	r0, r2
 8004506:	f7ff f864 	bl	80035d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800450a:	f001 f87d 	bl	8005608 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800450e:	4b0d      	ldr	r3, [pc, #52]	; (8004544 <prvAddNewTaskToReadyList+0xc0>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00e      	beq.n	8004534 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004516:	4b0a      	ldr	r3, [pc, #40]	; (8004540 <prvAddNewTaskToReadyList+0xbc>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004520:	429a      	cmp	r2, r3
 8004522:	d207      	bcs.n	8004534 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004524:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <prvAddNewTaskToReadyList+0xd0>)
 8004526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004534:	bf00      	nop
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	20000384 	.word	0x20000384
 8004540:	20000284 	.word	0x20000284
 8004544:	20000390 	.word	0x20000390
 8004548:	200003a0 	.word	0x200003a0
 800454c:	2000038c 	.word	0x2000038c
 8004550:	20000288 	.word	0x20000288
 8004554:	e000ed04 	.word	0xe000ed04

08004558 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d016      	beq.n	8004598 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800456a:	4b13      	ldr	r3, [pc, #76]	; (80045b8 <vTaskDelay+0x60>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d009      	beq.n	8004586 <vTaskDelay+0x2e>
 8004572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004576:	f383 8811 	msr	BASEPRI, r3
 800457a:	f3bf 8f6f 	isb	sy
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	60bb      	str	r3, [r7, #8]
 8004584:	e7fe      	b.n	8004584 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004586:	f000 f90b 	bl	80047a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800458a:	2100      	movs	r1, #0
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 fe81 	bl	8005294 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004592:	f000 f913 	bl	80047bc <xTaskResumeAll>
 8004596:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d107      	bne.n	80045ae <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800459e:	4b07      	ldr	r3, [pc, #28]	; (80045bc <vTaskDelay+0x64>)
 80045a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	f3bf 8f4f 	dsb	sy
 80045aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80045ae:	bf00      	nop
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	200003ac 	.word	0x200003ac
 80045bc:	e000ed04 	.word	0xe000ed04

080045c0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80045c8:	f000 fff0 	bl	80055ac <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d102      	bne.n	80045d8 <vTaskSuspend+0x18>
 80045d2:	4b3c      	ldr	r3, [pc, #240]	; (80046c4 <vTaskSuspend+0x104>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	e000      	b.n	80045da <vTaskSuspend+0x1a>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	3304      	adds	r3, #4
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff f853 	bl	800368c <uxListRemove>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d115      	bne.n	8004618 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f0:	4935      	ldr	r1, [pc, #212]	; (80046c8 <vTaskSuspend+0x108>)
 80045f2:	4613      	mov	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	440b      	add	r3, r1
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10a      	bne.n	8004618 <vTaskSuspend+0x58>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004606:	2201      	movs	r2, #1
 8004608:	fa02 f303 	lsl.w	r3, r2, r3
 800460c:	43da      	mvns	r2, r3
 800460e:	4b2f      	ldr	r3, [pc, #188]	; (80046cc <vTaskSuspend+0x10c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4013      	ands	r3, r2
 8004614:	4a2d      	ldr	r2, [pc, #180]	; (80046cc <vTaskSuspend+0x10c>)
 8004616:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461c:	2b00      	cmp	r3, #0
 800461e:	d004      	beq.n	800462a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	3318      	adds	r3, #24
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff f831 	bl	800368c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	3304      	adds	r3, #4
 800462e:	4619      	mov	r1, r3
 8004630:	4827      	ldr	r0, [pc, #156]	; (80046d0 <vTaskSuspend+0x110>)
 8004632:	f7fe ffce 	bl	80035d2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b01      	cmp	r3, #1
 8004640:	d103      	bne.n	800464a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800464a:	f000 ffdd 	bl	8005608 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800464e:	4b21      	ldr	r3, [pc, #132]	; (80046d4 <vTaskSuspend+0x114>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d005      	beq.n	8004662 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8004656:	f000 ffa9 	bl	80055ac <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800465a:	f000 fc1b 	bl	8004e94 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800465e:	f000 ffd3 	bl	8005608 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8004662:	4b18      	ldr	r3, [pc, #96]	; (80046c4 <vTaskSuspend+0x104>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	429a      	cmp	r2, r3
 800466a:	d126      	bne.n	80046ba <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 800466c:	4b19      	ldr	r3, [pc, #100]	; (80046d4 <vTaskSuspend+0x114>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d016      	beq.n	80046a2 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8004674:	4b18      	ldr	r3, [pc, #96]	; (80046d8 <vTaskSuspend+0x118>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d009      	beq.n	8004690 <vTaskSuspend+0xd0>
 800467c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	60bb      	str	r3, [r7, #8]
 800468e:	e7fe      	b.n	800468e <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 8004690:	4b12      	ldr	r3, [pc, #72]	; (80046dc <vTaskSuspend+0x11c>)
 8004692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046a0:	e00b      	b.n	80046ba <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80046a2:	4b0b      	ldr	r3, [pc, #44]	; (80046d0 <vTaskSuspend+0x110>)
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	4b0e      	ldr	r3, [pc, #56]	; (80046e0 <vTaskSuspend+0x120>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d103      	bne.n	80046b6 <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 80046ae:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <vTaskSuspend+0x104>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	601a      	str	r2, [r3, #0]
	}
 80046b4:	e001      	b.n	80046ba <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 80046b6:	f000 f9d9 	bl	8004a6c <vTaskSwitchContext>
	}
 80046ba:	bf00      	nop
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20000284 	.word	0x20000284
 80046c8:	20000288 	.word	0x20000288
 80046cc:	2000038c 	.word	0x2000038c
 80046d0:	20000370 	.word	0x20000370
 80046d4:	20000390 	.word	0x20000390
 80046d8:	200003ac 	.word	0x200003ac
 80046dc:	e000ed04 	.word	0xe000ed04
 80046e0:	20000384 	.word	0x20000384

080046e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b08a      	sub	sp, #40	; 0x28
 80046e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80046ea:	2300      	movs	r3, #0
 80046ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80046ee:	2300      	movs	r3, #0
 80046f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046f2:	463a      	mov	r2, r7
 80046f4:	1d39      	adds	r1, r7, #4
 80046f6:	f107 0308 	add.w	r3, r7, #8
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fb fef0 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004700:	6839      	ldr	r1, [r7, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	9202      	str	r2, [sp, #8]
 8004708:	9301      	str	r3, [sp, #4]
 800470a:	2300      	movs	r3, #0
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	2300      	movs	r3, #0
 8004710:	460a      	mov	r2, r1
 8004712:	491d      	ldr	r1, [pc, #116]	; (8004788 <vTaskStartScheduler+0xa4>)
 8004714:	481d      	ldr	r0, [pc, #116]	; (800478c <vTaskStartScheduler+0xa8>)
 8004716:	f7ff fd98 	bl	800424a <xTaskCreateStatic>
 800471a:	4602      	mov	r2, r0
 800471c:	4b1c      	ldr	r3, [pc, #112]	; (8004790 <vTaskStartScheduler+0xac>)
 800471e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004720:	4b1b      	ldr	r3, [pc, #108]	; (8004790 <vTaskStartScheduler+0xac>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004728:	2301      	movs	r3, #1
 800472a:	617b      	str	r3, [r7, #20]
 800472c:	e001      	b.n	8004732 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800472e:	2300      	movs	r3, #0
 8004730:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d115      	bne.n	8004764 <vTaskStartScheduler+0x80>
 8004738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473c:	f383 8811 	msr	BASEPRI, r3
 8004740:	f3bf 8f6f 	isb	sy
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800474a:	4b12      	ldr	r3, [pc, #72]	; (8004794 <vTaskStartScheduler+0xb0>)
 800474c:	f04f 32ff 	mov.w	r2, #4294967295
 8004750:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004752:	4b11      	ldr	r3, [pc, #68]	; (8004798 <vTaskStartScheduler+0xb4>)
 8004754:	2201      	movs	r2, #1
 8004756:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004758:	4b10      	ldr	r3, [pc, #64]	; (800479c <vTaskStartScheduler+0xb8>)
 800475a:	2200      	movs	r2, #0
 800475c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800475e:	f000 fe87 	bl	8005470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004762:	e00d      	b.n	8004780 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476a:	d109      	bne.n	8004780 <vTaskStartScheduler+0x9c>
 800476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	e7fe      	b.n	800477e <vTaskStartScheduler+0x9a>
}
 8004780:	bf00      	nop
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	08005c94 	.word	0x08005c94
 800478c:	08004d31 	.word	0x08004d31
 8004790:	200003a8 	.word	0x200003a8
 8004794:	200003a4 	.word	0x200003a4
 8004798:	20000390 	.word	0x20000390
 800479c:	20000388 	.word	0x20000388

080047a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80047a4:	4b04      	ldr	r3, [pc, #16]	; (80047b8 <vTaskSuspendAll+0x18>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3301      	adds	r3, #1
 80047aa:	4a03      	ldr	r2, [pc, #12]	; (80047b8 <vTaskSuspendAll+0x18>)
 80047ac:	6013      	str	r3, [r2, #0]
}
 80047ae:	bf00      	nop
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	200003ac 	.word	0x200003ac

080047bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80047c2:	2300      	movs	r3, #0
 80047c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80047c6:	2300      	movs	r3, #0
 80047c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047ca:	4b41      	ldr	r3, [pc, #260]	; (80048d0 <xTaskResumeAll+0x114>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d109      	bne.n	80047e6 <xTaskResumeAll+0x2a>
 80047d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d6:	f383 8811 	msr	BASEPRI, r3
 80047da:	f3bf 8f6f 	isb	sy
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	e7fe      	b.n	80047e4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047e6:	f000 fee1 	bl	80055ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047ea:	4b39      	ldr	r3, [pc, #228]	; (80048d0 <xTaskResumeAll+0x114>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	4a37      	ldr	r2, [pc, #220]	; (80048d0 <xTaskResumeAll+0x114>)
 80047f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047f4:	4b36      	ldr	r3, [pc, #216]	; (80048d0 <xTaskResumeAll+0x114>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d161      	bne.n	80048c0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047fc:	4b35      	ldr	r3, [pc, #212]	; (80048d4 <xTaskResumeAll+0x118>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d05d      	beq.n	80048c0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004804:	e02e      	b.n	8004864 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004806:	4b34      	ldr	r3, [pc, #208]	; (80048d8 <xTaskResumeAll+0x11c>)
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	3318      	adds	r3, #24
 8004812:	4618      	mov	r0, r3
 8004814:	f7fe ff3a 	bl	800368c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	3304      	adds	r3, #4
 800481c:	4618      	mov	r0, r3
 800481e:	f7fe ff35 	bl	800368c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004826:	2201      	movs	r2, #1
 8004828:	409a      	lsls	r2, r3
 800482a:	4b2c      	ldr	r3, [pc, #176]	; (80048dc <xTaskResumeAll+0x120>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4313      	orrs	r3, r2
 8004830:	4a2a      	ldr	r2, [pc, #168]	; (80048dc <xTaskResumeAll+0x120>)
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004838:	4613      	mov	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4a27      	ldr	r2, [pc, #156]	; (80048e0 <xTaskResumeAll+0x124>)
 8004842:	441a      	add	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	3304      	adds	r3, #4
 8004848:	4619      	mov	r1, r3
 800484a:	4610      	mov	r0, r2
 800484c:	f7fe fec1 	bl	80035d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004854:	4b23      	ldr	r3, [pc, #140]	; (80048e4 <xTaskResumeAll+0x128>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485a:	429a      	cmp	r2, r3
 800485c:	d302      	bcc.n	8004864 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800485e:	4b22      	ldr	r3, [pc, #136]	; (80048e8 <xTaskResumeAll+0x12c>)
 8004860:	2201      	movs	r2, #1
 8004862:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004864:	4b1c      	ldr	r3, [pc, #112]	; (80048d8 <xTaskResumeAll+0x11c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1cc      	bne.n	8004806 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004872:	f000 fb0f 	bl	8004e94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004876:	4b1d      	ldr	r3, [pc, #116]	; (80048ec <xTaskResumeAll+0x130>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d010      	beq.n	80048a4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004882:	f000 f837 	bl	80048f4 <xTaskIncrementTick>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d002      	beq.n	8004892 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800488c:	4b16      	ldr	r3, [pc, #88]	; (80048e8 <xTaskResumeAll+0x12c>)
 800488e:	2201      	movs	r2, #1
 8004890:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	3b01      	subs	r3, #1
 8004896:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f1      	bne.n	8004882 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800489e:	4b13      	ldr	r3, [pc, #76]	; (80048ec <xTaskResumeAll+0x130>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80048a4:	4b10      	ldr	r3, [pc, #64]	; (80048e8 <xTaskResumeAll+0x12c>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d009      	beq.n	80048c0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80048ac:	2301      	movs	r3, #1
 80048ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80048b0:	4b0f      	ldr	r3, [pc, #60]	; (80048f0 <xTaskResumeAll+0x134>)
 80048b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048b6:	601a      	str	r2, [r3, #0]
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048c0:	f000 fea2 	bl	8005608 <vPortExitCritical>

	return xAlreadyYielded;
 80048c4:	68bb      	ldr	r3, [r7, #8]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	200003ac 	.word	0x200003ac
 80048d4:	20000384 	.word	0x20000384
 80048d8:	20000344 	.word	0x20000344
 80048dc:	2000038c 	.word	0x2000038c
 80048e0:	20000288 	.word	0x20000288
 80048e4:	20000284 	.word	0x20000284
 80048e8:	20000398 	.word	0x20000398
 80048ec:	20000394 	.word	0x20000394
 80048f0:	e000ed04 	.word	0xe000ed04

080048f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048fa:	2300      	movs	r3, #0
 80048fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048fe:	4b50      	ldr	r3, [pc, #320]	; (8004a40 <xTaskIncrementTick+0x14c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	f040 808c 	bne.w	8004a20 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004908:	4b4e      	ldr	r3, [pc, #312]	; (8004a44 <xTaskIncrementTick+0x150>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3301      	adds	r3, #1
 800490e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004910:	4a4c      	ldr	r2, [pc, #304]	; (8004a44 <xTaskIncrementTick+0x150>)
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d11f      	bne.n	800495c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800491c:	4b4a      	ldr	r3, [pc, #296]	; (8004a48 <xTaskIncrementTick+0x154>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d009      	beq.n	800493a <xTaskIncrementTick+0x46>
 8004926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492a:	f383 8811 	msr	BASEPRI, r3
 800492e:	f3bf 8f6f 	isb	sy
 8004932:	f3bf 8f4f 	dsb	sy
 8004936:	603b      	str	r3, [r7, #0]
 8004938:	e7fe      	b.n	8004938 <xTaskIncrementTick+0x44>
 800493a:	4b43      	ldr	r3, [pc, #268]	; (8004a48 <xTaskIncrementTick+0x154>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	4b42      	ldr	r3, [pc, #264]	; (8004a4c <xTaskIncrementTick+0x158>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a40      	ldr	r2, [pc, #256]	; (8004a48 <xTaskIncrementTick+0x154>)
 8004946:	6013      	str	r3, [r2, #0]
 8004948:	4a40      	ldr	r2, [pc, #256]	; (8004a4c <xTaskIncrementTick+0x158>)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	4b40      	ldr	r3, [pc, #256]	; (8004a50 <xTaskIncrementTick+0x15c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3301      	adds	r3, #1
 8004954:	4a3e      	ldr	r2, [pc, #248]	; (8004a50 <xTaskIncrementTick+0x15c>)
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	f000 fa9c 	bl	8004e94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800495c:	4b3d      	ldr	r3, [pc, #244]	; (8004a54 <xTaskIncrementTick+0x160>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	429a      	cmp	r2, r3
 8004964:	d34d      	bcc.n	8004a02 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004966:	4b38      	ldr	r3, [pc, #224]	; (8004a48 <xTaskIncrementTick+0x154>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <xTaskIncrementTick+0x80>
 8004970:	2301      	movs	r3, #1
 8004972:	e000      	b.n	8004976 <xTaskIncrementTick+0x82>
 8004974:	2300      	movs	r3, #0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d004      	beq.n	8004984 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800497a:	4b36      	ldr	r3, [pc, #216]	; (8004a54 <xTaskIncrementTick+0x160>)
 800497c:	f04f 32ff 	mov.w	r2, #4294967295
 8004980:	601a      	str	r2, [r3, #0]
					break;
 8004982:	e03e      	b.n	8004a02 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004984:	4b30      	ldr	r3, [pc, #192]	; (8004a48 <xTaskIncrementTick+0x154>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	429a      	cmp	r2, r3
 800499a:	d203      	bcs.n	80049a4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800499c:	4a2d      	ldr	r2, [pc, #180]	; (8004a54 <xTaskIncrementTick+0x160>)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6013      	str	r3, [r2, #0]
						break;
 80049a2:	e02e      	b.n	8004a02 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	3304      	adds	r3, #4
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7fe fe6f 	bl	800368c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d004      	beq.n	80049c0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	3318      	adds	r3, #24
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fe fe66 	bl	800368c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c4:	2201      	movs	r2, #1
 80049c6:	409a      	lsls	r2, r3
 80049c8:	4b23      	ldr	r3, [pc, #140]	; (8004a58 <xTaskIncrementTick+0x164>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	4a22      	ldr	r2, [pc, #136]	; (8004a58 <xTaskIncrementTick+0x164>)
 80049d0:	6013      	str	r3, [r2, #0]
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d6:	4613      	mov	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4a1f      	ldr	r2, [pc, #124]	; (8004a5c <xTaskIncrementTick+0x168>)
 80049e0:	441a      	add	r2, r3
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	3304      	adds	r3, #4
 80049e6:	4619      	mov	r1, r3
 80049e8:	4610      	mov	r0, r2
 80049ea:	f7fe fdf2 	bl	80035d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f2:	4b1b      	ldr	r3, [pc, #108]	; (8004a60 <xTaskIncrementTick+0x16c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d3b4      	bcc.n	8004966 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80049fc:	2301      	movs	r3, #1
 80049fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a00:	e7b1      	b.n	8004966 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a02:	4b17      	ldr	r3, [pc, #92]	; (8004a60 <xTaskIncrementTick+0x16c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a08:	4914      	ldr	r1, [pc, #80]	; (8004a5c <xTaskIncrementTick+0x168>)
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	440b      	add	r3, r1
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d907      	bls.n	8004a2a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	617b      	str	r3, [r7, #20]
 8004a1e:	e004      	b.n	8004a2a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004a20:	4b10      	ldr	r3, [pc, #64]	; (8004a64 <xTaskIncrementTick+0x170>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3301      	adds	r3, #1
 8004a26:	4a0f      	ldr	r2, [pc, #60]	; (8004a64 <xTaskIncrementTick+0x170>)
 8004a28:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004a2a:	4b0f      	ldr	r3, [pc, #60]	; (8004a68 <xTaskIncrementTick+0x174>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8004a32:	2301      	movs	r3, #1
 8004a34:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004a36:	697b      	ldr	r3, [r7, #20]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3718      	adds	r7, #24
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	200003ac 	.word	0x200003ac
 8004a44:	20000388 	.word	0x20000388
 8004a48:	2000033c 	.word	0x2000033c
 8004a4c:	20000340 	.word	0x20000340
 8004a50:	2000039c 	.word	0x2000039c
 8004a54:	200003a4 	.word	0x200003a4
 8004a58:	2000038c 	.word	0x2000038c
 8004a5c:	20000288 	.word	0x20000288
 8004a60:	20000284 	.word	0x20000284
 8004a64:	20000394 	.word	0x20000394
 8004a68:	20000398 	.word	0x20000398

08004a6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a72:	4b26      	ldr	r3, [pc, #152]	; (8004b0c <vTaskSwitchContext+0xa0>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a7a:	4b25      	ldr	r3, [pc, #148]	; (8004b10 <vTaskSwitchContext+0xa4>)
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a80:	e03e      	b.n	8004b00 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004a82:	4b23      	ldr	r3, [pc, #140]	; (8004b10 <vTaskSwitchContext+0xa4>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004a88:	4b22      	ldr	r3, [pc, #136]	; (8004b14 <vTaskSwitchContext+0xa8>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	fab3 f383 	clz	r3, r3
 8004a94:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004a96:	7afb      	ldrb	r3, [r7, #11]
 8004a98:	f1c3 031f 	rsb	r3, r3, #31
 8004a9c:	617b      	str	r3, [r7, #20]
 8004a9e:	491e      	ldr	r1, [pc, #120]	; (8004b18 <vTaskSwitchContext+0xac>)
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	440b      	add	r3, r1
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d109      	bne.n	8004ac6 <vTaskSwitchContext+0x5a>
	__asm volatile
 8004ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	607b      	str	r3, [r7, #4]
 8004ac4:	e7fe      	b.n	8004ac4 <vTaskSwitchContext+0x58>
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4a11      	ldr	r2, [pc, #68]	; (8004b18 <vTaskSwitchContext+0xac>)
 8004ad2:	4413      	add	r3, r2
 8004ad4:	613b      	str	r3, [r7, #16]
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	605a      	str	r2, [r3, #4]
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	3308      	adds	r3, #8
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d104      	bne.n	8004af6 <vTaskSwitchContext+0x8a>
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	605a      	str	r2, [r3, #4]
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	4a07      	ldr	r2, [pc, #28]	; (8004b1c <vTaskSwitchContext+0xb0>)
 8004afe:	6013      	str	r3, [r2, #0]
}
 8004b00:	bf00      	nop
 8004b02:	371c      	adds	r7, #28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	200003ac 	.word	0x200003ac
 8004b10:	20000398 	.word	0x20000398
 8004b14:	2000038c 	.word	0x2000038c
 8004b18:	20000288 	.word	0x20000288
 8004b1c:	20000284 	.word	0x20000284

08004b20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d109      	bne.n	8004b44 <vTaskPlaceOnEventList+0x24>
 8004b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	60fb      	str	r3, [r7, #12]
 8004b42:	e7fe      	b.n	8004b42 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b44:	4b07      	ldr	r3, [pc, #28]	; (8004b64 <vTaskPlaceOnEventList+0x44>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	3318      	adds	r3, #24
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7fe fd64 	bl	800361a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b52:	2101      	movs	r1, #1
 8004b54:	6838      	ldr	r0, [r7, #0]
 8004b56:	f000 fb9d 	bl	8005294 <prvAddCurrentTaskToDelayedList>
}
 8004b5a:	bf00      	nop
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	20000284 	.word	0x20000284

08004b68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d109      	bne.n	8004b92 <xTaskRemoveFromEventList+0x2a>
 8004b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b82:	f383 8811 	msr	BASEPRI, r3
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	e7fe      	b.n	8004b90 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	3318      	adds	r3, #24
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7fe fd78 	bl	800368c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b9c:	4b1d      	ldr	r3, [pc, #116]	; (8004c14 <xTaskRemoveFromEventList+0xac>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d11c      	bne.n	8004bde <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7fe fd6f 	bl	800368c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	409a      	lsls	r2, r3
 8004bb6:	4b18      	ldr	r3, [pc, #96]	; (8004c18 <xTaskRemoveFromEventList+0xb0>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	4a16      	ldr	r2, [pc, #88]	; (8004c18 <xTaskRemoveFromEventList+0xb0>)
 8004bbe:	6013      	str	r3, [r2, #0]
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4a13      	ldr	r2, [pc, #76]	; (8004c1c <xTaskRemoveFromEventList+0xb4>)
 8004bce:	441a      	add	r2, r3
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	4610      	mov	r0, r2
 8004bd8:	f7fe fcfb 	bl	80035d2 <vListInsertEnd>
 8004bdc:	e005      	b.n	8004bea <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	3318      	adds	r3, #24
 8004be2:	4619      	mov	r1, r3
 8004be4:	480e      	ldr	r0, [pc, #56]	; (8004c20 <xTaskRemoveFromEventList+0xb8>)
 8004be6:	f7fe fcf4 	bl	80035d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bee:	4b0d      	ldr	r3, [pc, #52]	; (8004c24 <xTaskRemoveFromEventList+0xbc>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d905      	bls.n	8004c04 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004bfc:	4b0a      	ldr	r3, [pc, #40]	; (8004c28 <xTaskRemoveFromEventList+0xc0>)
 8004bfe:	2201      	movs	r2, #1
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	e001      	b.n	8004c08 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004c04:	2300      	movs	r3, #0
 8004c06:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004c08:	697b      	ldr	r3, [r7, #20]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	200003ac 	.word	0x200003ac
 8004c18:	2000038c 	.word	0x2000038c
 8004c1c:	20000288 	.word	0x20000288
 8004c20:	20000344 	.word	0x20000344
 8004c24:	20000284 	.word	0x20000284
 8004c28:	20000398 	.word	0x20000398

08004c2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c34:	4b06      	ldr	r3, [pc, #24]	; (8004c50 <vTaskInternalSetTimeOutState+0x24>)
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c3c:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <vTaskInternalSetTimeOutState+0x28>)
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	605a      	str	r2, [r3, #4]
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	2000039c 	.word	0x2000039c
 8004c54:	20000388 	.word	0x20000388

08004c58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b088      	sub	sp, #32
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d109      	bne.n	8004c7c <xTaskCheckForTimeOut+0x24>
 8004c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6c:	f383 8811 	msr	BASEPRI, r3
 8004c70:	f3bf 8f6f 	isb	sy
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	613b      	str	r3, [r7, #16]
 8004c7a:	e7fe      	b.n	8004c7a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d109      	bne.n	8004c96 <xTaskCheckForTimeOut+0x3e>
 8004c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	e7fe      	b.n	8004c94 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004c96:	f000 fc89 	bl	80055ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c9a:	4b1d      	ldr	r3, [pc, #116]	; (8004d10 <xTaskCheckForTimeOut+0xb8>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb2:	d102      	bne.n	8004cba <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	61fb      	str	r3, [r7, #28]
 8004cb8:	e023      	b.n	8004d02 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	4b15      	ldr	r3, [pc, #84]	; (8004d14 <xTaskCheckForTimeOut+0xbc>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d007      	beq.n	8004cd6 <xTaskCheckForTimeOut+0x7e>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d302      	bcc.n	8004cd6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	61fb      	str	r3, [r7, #28]
 8004cd4:	e015      	b.n	8004d02 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d20b      	bcs.n	8004cf8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	1ad2      	subs	r2, r2, r3
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7ff ff9d 	bl	8004c2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61fb      	str	r3, [r7, #28]
 8004cf6:	e004      	b.n	8004d02 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d02:	f000 fc81 	bl	8005608 <vPortExitCritical>

	return xReturn;
 8004d06:	69fb      	ldr	r3, [r7, #28]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3720      	adds	r7, #32
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	20000388 	.word	0x20000388
 8004d14:	2000039c 	.word	0x2000039c

08004d18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d1c:	4b03      	ldr	r3, [pc, #12]	; (8004d2c <vTaskMissedYield+0x14>)
 8004d1e:	2201      	movs	r2, #1
 8004d20:	601a      	str	r2, [r3, #0]
}
 8004d22:	bf00      	nop
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	20000398 	.word	0x20000398

08004d30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d38:	f000 f852 	bl	8004de0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d3c:	4b06      	ldr	r3, [pc, #24]	; (8004d58 <prvIdleTask+0x28>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d9f9      	bls.n	8004d38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d44:	4b05      	ldr	r3, [pc, #20]	; (8004d5c <prvIdleTask+0x2c>)
 8004d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d54:	e7f0      	b.n	8004d38 <prvIdleTask+0x8>
 8004d56:	bf00      	nop
 8004d58:	20000288 	.word	0x20000288
 8004d5c:	e000ed04 	.word	0xe000ed04

08004d60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d66:	2300      	movs	r3, #0
 8004d68:	607b      	str	r3, [r7, #4]
 8004d6a:	e00c      	b.n	8004d86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4a12      	ldr	r2, [pc, #72]	; (8004dc0 <prvInitialiseTaskLists+0x60>)
 8004d78:	4413      	add	r3, r2
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fe fbfc 	bl	8003578 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	3301      	adds	r3, #1
 8004d84:	607b      	str	r3, [r7, #4]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b06      	cmp	r3, #6
 8004d8a:	d9ef      	bls.n	8004d6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d8c:	480d      	ldr	r0, [pc, #52]	; (8004dc4 <prvInitialiseTaskLists+0x64>)
 8004d8e:	f7fe fbf3 	bl	8003578 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d92:	480d      	ldr	r0, [pc, #52]	; (8004dc8 <prvInitialiseTaskLists+0x68>)
 8004d94:	f7fe fbf0 	bl	8003578 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d98:	480c      	ldr	r0, [pc, #48]	; (8004dcc <prvInitialiseTaskLists+0x6c>)
 8004d9a:	f7fe fbed 	bl	8003578 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d9e:	480c      	ldr	r0, [pc, #48]	; (8004dd0 <prvInitialiseTaskLists+0x70>)
 8004da0:	f7fe fbea 	bl	8003578 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004da4:	480b      	ldr	r0, [pc, #44]	; (8004dd4 <prvInitialiseTaskLists+0x74>)
 8004da6:	f7fe fbe7 	bl	8003578 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004daa:	4b0b      	ldr	r3, [pc, #44]	; (8004dd8 <prvInitialiseTaskLists+0x78>)
 8004dac:	4a05      	ldr	r2, [pc, #20]	; (8004dc4 <prvInitialiseTaskLists+0x64>)
 8004dae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004db0:	4b0a      	ldr	r3, [pc, #40]	; (8004ddc <prvInitialiseTaskLists+0x7c>)
 8004db2:	4a05      	ldr	r2, [pc, #20]	; (8004dc8 <prvInitialiseTaskLists+0x68>)
 8004db4:	601a      	str	r2, [r3, #0]
}
 8004db6:	bf00      	nop
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	20000288 	.word	0x20000288
 8004dc4:	20000314 	.word	0x20000314
 8004dc8:	20000328 	.word	0x20000328
 8004dcc:	20000344 	.word	0x20000344
 8004dd0:	20000358 	.word	0x20000358
 8004dd4:	20000370 	.word	0x20000370
 8004dd8:	2000033c 	.word	0x2000033c
 8004ddc:	20000340 	.word	0x20000340

08004de0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004de6:	e019      	b.n	8004e1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004de8:	f000 fbe0 	bl	80055ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004dec:	4b0f      	ldr	r3, [pc, #60]	; (8004e2c <prvCheckTasksWaitingTermination+0x4c>)
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3304      	adds	r3, #4
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7fe fc47 	bl	800368c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004dfe:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <prvCheckTasksWaitingTermination+0x50>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3b01      	subs	r3, #1
 8004e04:	4a0a      	ldr	r2, [pc, #40]	; (8004e30 <prvCheckTasksWaitingTermination+0x50>)
 8004e06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e08:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <prvCheckTasksWaitingTermination+0x54>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	4a09      	ldr	r2, [pc, #36]	; (8004e34 <prvCheckTasksWaitingTermination+0x54>)
 8004e10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e12:	f000 fbf9 	bl	8005608 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f80e 	bl	8004e38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e1c:	4b05      	ldr	r3, [pc, #20]	; (8004e34 <prvCheckTasksWaitingTermination+0x54>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1e1      	bne.n	8004de8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e24:	bf00      	nop
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	20000358 	.word	0x20000358
 8004e30:	20000384 	.word	0x20000384
 8004e34:	2000036c 	.word	0x2000036c

08004e38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d108      	bne.n	8004e5c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 fd88 	bl	8005964 <vPortFree>
				vPortFree( pxTCB );
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 fd85 	bl	8005964 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e5a:	e017      	b.n	8004e8c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d103      	bne.n	8004e6e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fd7c 	bl	8005964 <vPortFree>
	}
 8004e6c:	e00e      	b.n	8004e8c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d009      	beq.n	8004e8c <prvDeleteTCB+0x54>
 8004e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7c:	f383 8811 	msr	BASEPRI, r3
 8004e80:	f3bf 8f6f 	isb	sy
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	e7fe      	b.n	8004e8a <prvDeleteTCB+0x52>
	}
 8004e8c:	bf00      	nop
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e9a:	4b0f      	ldr	r3, [pc, #60]	; (8004ed8 <prvResetNextTaskUnblockTime+0x44>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <prvResetNextTaskUnblockTime+0x14>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e000      	b.n	8004eaa <prvResetNextTaskUnblockTime+0x16>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d004      	beq.n	8004eb8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004eae:	4b0b      	ldr	r3, [pc, #44]	; (8004edc <prvResetNextTaskUnblockTime+0x48>)
 8004eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004eb6:	e008      	b.n	8004eca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004eb8:	4b07      	ldr	r3, [pc, #28]	; (8004ed8 <prvResetNextTaskUnblockTime+0x44>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	4a05      	ldr	r2, [pc, #20]	; (8004edc <prvResetNextTaskUnblockTime+0x48>)
 8004ec8:	6013      	str	r3, [r2, #0]
}
 8004eca:	bf00      	nop
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	2000033c 	.word	0x2000033c
 8004edc:	200003a4 	.word	0x200003a4

08004ee0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ee6:	4b0b      	ldr	r3, [pc, #44]	; (8004f14 <xTaskGetSchedulerState+0x34>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d102      	bne.n	8004ef4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	607b      	str	r3, [r7, #4]
 8004ef2:	e008      	b.n	8004f06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ef4:	4b08      	ldr	r3, [pc, #32]	; (8004f18 <xTaskGetSchedulerState+0x38>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d102      	bne.n	8004f02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004efc:	2302      	movs	r3, #2
 8004efe:	607b      	str	r3, [r7, #4]
 8004f00:	e001      	b.n	8004f06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f02:	2300      	movs	r3, #0
 8004f04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f06:	687b      	ldr	r3, [r7, #4]
	}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr
 8004f14:	20000390 	.word	0x20000390
 8004f18:	200003ac 	.word	0x200003ac

08004f1c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d06e      	beq.n	8005010 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f36:	4b39      	ldr	r3, [pc, #228]	; (800501c <xTaskPriorityInherit+0x100>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d25e      	bcs.n	8004ffe <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	db06      	blt.n	8004f56 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f48:	4b34      	ldr	r3, [pc, #208]	; (800501c <xTaskPriorityInherit+0x100>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4e:	f1c3 0207 	rsb	r2, r3, #7
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	6959      	ldr	r1, [r3, #20]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f5e:	4613      	mov	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4a2e      	ldr	r2, [pc, #184]	; (8005020 <xTaskPriorityInherit+0x104>)
 8004f68:	4413      	add	r3, r2
 8004f6a:	4299      	cmp	r1, r3
 8004f6c:	d101      	bne.n	8004f72 <xTaskPriorityInherit+0x56>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e000      	b.n	8004f74 <xTaskPriorityInherit+0x58>
 8004f72:	2300      	movs	r3, #0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d03a      	beq.n	8004fee <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	3304      	adds	r3, #4
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7fe fb85 	bl	800368c <uxListRemove>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d115      	bne.n	8004fb4 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f8c:	4924      	ldr	r1, [pc, #144]	; (8005020 <xTaskPriorityInherit+0x104>)
 8004f8e:	4613      	mov	r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	440b      	add	r3, r1
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10a      	bne.n	8004fb4 <xTaskPriorityInherit+0x98>
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa8:	43da      	mvns	r2, r3
 8004faa:	4b1e      	ldr	r3, [pc, #120]	; (8005024 <xTaskPriorityInherit+0x108>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	4a1c      	ldr	r2, [pc, #112]	; (8005024 <xTaskPriorityInherit+0x108>)
 8004fb2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004fb4:	4b19      	ldr	r3, [pc, #100]	; (800501c <xTaskPriorityInherit+0x100>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	409a      	lsls	r2, r3
 8004fc6:	4b17      	ldr	r3, [pc, #92]	; (8005024 <xTaskPriorityInherit+0x108>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	4a15      	ldr	r2, [pc, #84]	; (8005024 <xTaskPriorityInherit+0x108>)
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4413      	add	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4a10      	ldr	r2, [pc, #64]	; (8005020 <xTaskPriorityInherit+0x104>)
 8004fde:	441a      	add	r2, r3
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	f7fe faf3 	bl	80035d2 <vListInsertEnd>
 8004fec:	e004      	b.n	8004ff8 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004fee:	4b0b      	ldr	r3, [pc, #44]	; (800501c <xTaskPriorityInherit+0x100>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	e008      	b.n	8005010 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005002:	4b06      	ldr	r3, [pc, #24]	; (800501c <xTaskPriorityInherit+0x100>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	429a      	cmp	r2, r3
 800500a:	d201      	bcs.n	8005010 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800500c:	2301      	movs	r3, #1
 800500e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005010:	68fb      	ldr	r3, [r7, #12]
	}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	20000284 	.word	0x20000284
 8005020:	20000288 	.word	0x20000288
 8005024:	2000038c 	.word	0x2000038c

08005028 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005034:	2300      	movs	r3, #0
 8005036:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d06c      	beq.n	8005118 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800503e:	4b39      	ldr	r3, [pc, #228]	; (8005124 <xTaskPriorityDisinherit+0xfc>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	429a      	cmp	r2, r3
 8005046:	d009      	beq.n	800505c <xTaskPriorityDisinherit+0x34>
 8005048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504c:	f383 8811 	msr	BASEPRI, r3
 8005050:	f3bf 8f6f 	isb	sy
 8005054:	f3bf 8f4f 	dsb	sy
 8005058:	60fb      	str	r3, [r7, #12]
 800505a:	e7fe      	b.n	800505a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005060:	2b00      	cmp	r3, #0
 8005062:	d109      	bne.n	8005078 <xTaskPriorityDisinherit+0x50>
 8005064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	60bb      	str	r3, [r7, #8]
 8005076:	e7fe      	b.n	8005076 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800507c:	1e5a      	subs	r2, r3, #1
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800508a:	429a      	cmp	r2, r3
 800508c:	d044      	beq.n	8005118 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005092:	2b00      	cmp	r3, #0
 8005094:	d140      	bne.n	8005118 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	3304      	adds	r3, #4
 800509a:	4618      	mov	r0, r3
 800509c:	f7fe faf6 	bl	800368c <uxListRemove>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d115      	bne.n	80050d2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050aa:	491f      	ldr	r1, [pc, #124]	; (8005128 <xTaskPriorityDisinherit+0x100>)
 80050ac:	4613      	mov	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	440b      	add	r3, r1
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10a      	bne.n	80050d2 <xTaskPriorityDisinherit+0xaa>
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c0:	2201      	movs	r2, #1
 80050c2:	fa02 f303 	lsl.w	r3, r2, r3
 80050c6:	43da      	mvns	r2, r3
 80050c8:	4b18      	ldr	r3, [pc, #96]	; (800512c <xTaskPriorityDisinherit+0x104>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4013      	ands	r3, r2
 80050ce:	4a17      	ldr	r2, [pc, #92]	; (800512c <xTaskPriorityDisinherit+0x104>)
 80050d0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050de:	f1c3 0207 	rsb	r2, r3, #7
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ea:	2201      	movs	r2, #1
 80050ec:	409a      	lsls	r2, r3
 80050ee:	4b0f      	ldr	r3, [pc, #60]	; (800512c <xTaskPriorityDisinherit+0x104>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	4a0d      	ldr	r2, [pc, #52]	; (800512c <xTaskPriorityDisinherit+0x104>)
 80050f6:	6013      	str	r3, [r2, #0]
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050fc:	4613      	mov	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4a08      	ldr	r2, [pc, #32]	; (8005128 <xTaskPriorityDisinherit+0x100>)
 8005106:	441a      	add	r2, r3
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	3304      	adds	r3, #4
 800510c:	4619      	mov	r1, r3
 800510e:	4610      	mov	r0, r2
 8005110:	f7fe fa5f 	bl	80035d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005114:	2301      	movs	r3, #1
 8005116:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005118:	697b      	ldr	r3, [r7, #20]
	}
 800511a:	4618      	mov	r0, r3
 800511c:	3718      	adds	r7, #24
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	20000284 	.word	0x20000284
 8005128:	20000288 	.word	0x20000288
 800512c:	2000038c 	.word	0x2000038c

08005130 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800513e:	2301      	movs	r3, #1
 8005140:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 8086 	beq.w	8005256 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800514e:	2b00      	cmp	r3, #0
 8005150:	d109      	bne.n	8005166 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8005152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	e7fe      	b.n	8005164 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	429a      	cmp	r2, r3
 800516e:	d902      	bls.n	8005176 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	61fb      	str	r3, [r7, #28]
 8005174:	e002      	b.n	800517c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800517a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005180:	69fa      	ldr	r2, [r7, #28]
 8005182:	429a      	cmp	r2, r3
 8005184:	d067      	beq.n	8005256 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	429a      	cmp	r2, r3
 800518e:	d162      	bne.n	8005256 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005190:	4b33      	ldr	r3, [pc, #204]	; (8005260 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	429a      	cmp	r2, r3
 8005198:	d109      	bne.n	80051ae <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800519a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	60bb      	str	r3, [r7, #8]
 80051ac:	e7fe      	b.n	80051ac <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	69fa      	ldr	r2, [r7, #28]
 80051b8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	db04      	blt.n	80051cc <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	f1c3 0207 	rsb	r2, r3, #7
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	6959      	ldr	r1, [r3, #20]
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	4613      	mov	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4a22      	ldr	r2, [pc, #136]	; (8005264 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80051dc:	4413      	add	r3, r2
 80051de:	4299      	cmp	r1, r3
 80051e0:	d101      	bne.n	80051e6 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 80051e2:	2301      	movs	r3, #1
 80051e4:	e000      	b.n	80051e8 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80051e6:	2300      	movs	r3, #0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d034      	beq.n	8005256 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	3304      	adds	r3, #4
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7fe fa4b 	bl	800368c <uxListRemove>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d115      	bne.n	8005228 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005200:	4918      	ldr	r1, [pc, #96]	; (8005264 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005202:	4613      	mov	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	440b      	add	r3, r1
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10a      	bne.n	8005228 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005216:	2201      	movs	r2, #1
 8005218:	fa02 f303 	lsl.w	r3, r2, r3
 800521c:	43da      	mvns	r2, r3
 800521e:	4b12      	ldr	r3, [pc, #72]	; (8005268 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4013      	ands	r3, r2
 8005224:	4a10      	ldr	r2, [pc, #64]	; (8005268 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005226:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522c:	2201      	movs	r2, #1
 800522e:	409a      	lsls	r2, r3
 8005230:	4b0d      	ldr	r3, [pc, #52]	; (8005268 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4313      	orrs	r3, r2
 8005236:	4a0c      	ldr	r2, [pc, #48]	; (8005268 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005238:	6013      	str	r3, [r2, #0]
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800523e:	4613      	mov	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4413      	add	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4a07      	ldr	r2, [pc, #28]	; (8005264 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005248:	441a      	add	r2, r3
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	3304      	adds	r3, #4
 800524e:	4619      	mov	r1, r3
 8005250:	4610      	mov	r0, r2
 8005252:	f7fe f9be 	bl	80035d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005256:	bf00      	nop
 8005258:	3720      	adds	r7, #32
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	20000284 	.word	0x20000284
 8005264:	20000288 	.word	0x20000288
 8005268:	2000038c 	.word	0x2000038c

0800526c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005270:	4b07      	ldr	r3, [pc, #28]	; (8005290 <pvTaskIncrementMutexHeldCount+0x24>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d004      	beq.n	8005282 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005278:	4b05      	ldr	r3, [pc, #20]	; (8005290 <pvTaskIncrementMutexHeldCount+0x24>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800527e:	3201      	adds	r2, #1
 8005280:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005282:	4b03      	ldr	r3, [pc, #12]	; (8005290 <pvTaskIncrementMutexHeldCount+0x24>)
 8005284:	681b      	ldr	r3, [r3, #0]
	}
 8005286:	4618      	mov	r0, r3
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	20000284 	.word	0x20000284

08005294 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800529e:	4b29      	ldr	r3, [pc, #164]	; (8005344 <prvAddCurrentTaskToDelayedList+0xb0>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052a4:	4b28      	ldr	r3, [pc, #160]	; (8005348 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3304      	adds	r3, #4
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7fe f9ee 	bl	800368c <uxListRemove>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10b      	bne.n	80052ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80052b6:	4b24      	ldr	r3, [pc, #144]	; (8005348 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052bc:	2201      	movs	r2, #1
 80052be:	fa02 f303 	lsl.w	r3, r2, r3
 80052c2:	43da      	mvns	r2, r3
 80052c4:	4b21      	ldr	r3, [pc, #132]	; (800534c <prvAddCurrentTaskToDelayedList+0xb8>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4013      	ands	r3, r2
 80052ca:	4a20      	ldr	r2, [pc, #128]	; (800534c <prvAddCurrentTaskToDelayedList+0xb8>)
 80052cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d4:	d10a      	bne.n	80052ec <prvAddCurrentTaskToDelayedList+0x58>
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d007      	beq.n	80052ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052dc:	4b1a      	ldr	r3, [pc, #104]	; (8005348 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	3304      	adds	r3, #4
 80052e2:	4619      	mov	r1, r3
 80052e4:	481a      	ldr	r0, [pc, #104]	; (8005350 <prvAddCurrentTaskToDelayedList+0xbc>)
 80052e6:	f7fe f974 	bl	80035d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80052ea:	e026      	b.n	800533a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4413      	add	r3, r2
 80052f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80052f4:	4b14      	ldr	r3, [pc, #80]	; (8005348 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	429a      	cmp	r2, r3
 8005302:	d209      	bcs.n	8005318 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005304:	4b13      	ldr	r3, [pc, #76]	; (8005354 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	4b0f      	ldr	r3, [pc, #60]	; (8005348 <prvAddCurrentTaskToDelayedList+0xb4>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3304      	adds	r3, #4
 800530e:	4619      	mov	r1, r3
 8005310:	4610      	mov	r0, r2
 8005312:	f7fe f982 	bl	800361a <vListInsert>
}
 8005316:	e010      	b.n	800533a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005318:	4b0f      	ldr	r3, [pc, #60]	; (8005358 <prvAddCurrentTaskToDelayedList+0xc4>)
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	4b0a      	ldr	r3, [pc, #40]	; (8005348 <prvAddCurrentTaskToDelayedList+0xb4>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	3304      	adds	r3, #4
 8005322:	4619      	mov	r1, r3
 8005324:	4610      	mov	r0, r2
 8005326:	f7fe f978 	bl	800361a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800532a:	4b0c      	ldr	r3, [pc, #48]	; (800535c <prvAddCurrentTaskToDelayedList+0xc8>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	429a      	cmp	r2, r3
 8005332:	d202      	bcs.n	800533a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005334:	4a09      	ldr	r2, [pc, #36]	; (800535c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	6013      	str	r3, [r2, #0]
}
 800533a:	bf00      	nop
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	20000388 	.word	0x20000388
 8005348:	20000284 	.word	0x20000284
 800534c:	2000038c 	.word	0x2000038c
 8005350:	20000370 	.word	0x20000370
 8005354:	20000340 	.word	0x20000340
 8005358:	2000033c 	.word	0x2000033c
 800535c:	200003a4 	.word	0x200003a4

08005360 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	3b04      	subs	r3, #4
 8005370:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005378:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	3b04      	subs	r3, #4
 800537e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f023 0201 	bic.w	r2, r3, #1
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	3b04      	subs	r3, #4
 800538e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005390:	4a0c      	ldr	r2, [pc, #48]	; (80053c4 <pxPortInitialiseStack+0x64>)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	3b14      	subs	r3, #20
 800539a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	3b04      	subs	r3, #4
 80053a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f06f 0202 	mvn.w	r2, #2
 80053ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	3b20      	subs	r3, #32
 80053b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80053b6:	68fb      	ldr	r3, [r7, #12]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	080053c9 	.word	0x080053c9

080053c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80053ce:	2300      	movs	r3, #0
 80053d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80053d2:	4b11      	ldr	r3, [pc, #68]	; (8005418 <prvTaskExitError+0x50>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053da:	d009      	beq.n	80053f0 <prvTaskExitError+0x28>
 80053dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e0:	f383 8811 	msr	BASEPRI, r3
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	e7fe      	b.n	80053ee <prvTaskExitError+0x26>
 80053f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f4:	f383 8811 	msr	BASEPRI, r3
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005402:	bf00      	nop
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0fc      	beq.n	8005404 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800540a:	bf00      	nop
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	20000010 	.word	0x20000010
 800541c:	00000000 	.word	0x00000000

08005420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005420:	4b07      	ldr	r3, [pc, #28]	; (8005440 <pxCurrentTCBConst2>)
 8005422:	6819      	ldr	r1, [r3, #0]
 8005424:	6808      	ldr	r0, [r1, #0]
 8005426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800542a:	f380 8809 	msr	PSP, r0
 800542e:	f3bf 8f6f 	isb	sy
 8005432:	f04f 0000 	mov.w	r0, #0
 8005436:	f380 8811 	msr	BASEPRI, r0
 800543a:	4770      	bx	lr
 800543c:	f3af 8000 	nop.w

08005440 <pxCurrentTCBConst2>:
 8005440:	20000284 	.word	0x20000284
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005444:	bf00      	nop
 8005446:	bf00      	nop

08005448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005448:	4808      	ldr	r0, [pc, #32]	; (800546c <prvPortStartFirstTask+0x24>)
 800544a:	6800      	ldr	r0, [r0, #0]
 800544c:	6800      	ldr	r0, [r0, #0]
 800544e:	f380 8808 	msr	MSP, r0
 8005452:	f04f 0000 	mov.w	r0, #0
 8005456:	f380 8814 	msr	CONTROL, r0
 800545a:	b662      	cpsie	i
 800545c:	b661      	cpsie	f
 800545e:	f3bf 8f4f 	dsb	sy
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	df00      	svc	0
 8005468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800546a:	bf00      	nop
 800546c:	e000ed08 	.word	0xe000ed08

08005470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005476:	4b44      	ldr	r3, [pc, #272]	; (8005588 <xPortStartScheduler+0x118>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a44      	ldr	r2, [pc, #272]	; (800558c <xPortStartScheduler+0x11c>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d109      	bne.n	8005494 <xPortStartScheduler+0x24>
 8005480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005484:	f383 8811 	msr	BASEPRI, r3
 8005488:	f3bf 8f6f 	isb	sy
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	613b      	str	r3, [r7, #16]
 8005492:	e7fe      	b.n	8005492 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005494:	4b3c      	ldr	r3, [pc, #240]	; (8005588 <xPortStartScheduler+0x118>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a3d      	ldr	r2, [pc, #244]	; (8005590 <xPortStartScheduler+0x120>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d109      	bne.n	80054b2 <xPortStartScheduler+0x42>
 800549e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	60fb      	str	r3, [r7, #12]
 80054b0:	e7fe      	b.n	80054b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80054b2:	4b38      	ldr	r3, [pc, #224]	; (8005594 <xPortStartScheduler+0x124>)
 80054b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	22ff      	movs	r2, #255	; 0xff
 80054c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80054cc:	78fb      	ldrb	r3, [r7, #3]
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80054d4:	b2da      	uxtb	r2, r3
 80054d6:	4b30      	ldr	r3, [pc, #192]	; (8005598 <xPortStartScheduler+0x128>)
 80054d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80054da:	4b30      	ldr	r3, [pc, #192]	; (800559c <xPortStartScheduler+0x12c>)
 80054dc:	2207      	movs	r2, #7
 80054de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054e0:	e009      	b.n	80054f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80054e2:	4b2e      	ldr	r3, [pc, #184]	; (800559c <xPortStartScheduler+0x12c>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	3b01      	subs	r3, #1
 80054e8:	4a2c      	ldr	r2, [pc, #176]	; (800559c <xPortStartScheduler+0x12c>)
 80054ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80054ec:	78fb      	ldrb	r3, [r7, #3]
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054f6:	78fb      	ldrb	r3, [r7, #3]
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fe:	2b80      	cmp	r3, #128	; 0x80
 8005500:	d0ef      	beq.n	80054e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005502:	4b26      	ldr	r3, [pc, #152]	; (800559c <xPortStartScheduler+0x12c>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f1c3 0307 	rsb	r3, r3, #7
 800550a:	2b04      	cmp	r3, #4
 800550c:	d009      	beq.n	8005522 <xPortStartScheduler+0xb2>
 800550e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	60bb      	str	r3, [r7, #8]
 8005520:	e7fe      	b.n	8005520 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005522:	4b1e      	ldr	r3, [pc, #120]	; (800559c <xPortStartScheduler+0x12c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	021b      	lsls	r3, r3, #8
 8005528:	4a1c      	ldr	r2, [pc, #112]	; (800559c <xPortStartScheduler+0x12c>)
 800552a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800552c:	4b1b      	ldr	r3, [pc, #108]	; (800559c <xPortStartScheduler+0x12c>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005534:	4a19      	ldr	r2, [pc, #100]	; (800559c <xPortStartScheduler+0x12c>)
 8005536:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	b2da      	uxtb	r2, r3
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005540:	4b17      	ldr	r3, [pc, #92]	; (80055a0 <xPortStartScheduler+0x130>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a16      	ldr	r2, [pc, #88]	; (80055a0 <xPortStartScheduler+0x130>)
 8005546:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800554a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800554c:	4b14      	ldr	r3, [pc, #80]	; (80055a0 <xPortStartScheduler+0x130>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a13      	ldr	r2, [pc, #76]	; (80055a0 <xPortStartScheduler+0x130>)
 8005552:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005556:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005558:	f000 f8d6 	bl	8005708 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800555c:	4b11      	ldr	r3, [pc, #68]	; (80055a4 <xPortStartScheduler+0x134>)
 800555e:	2200      	movs	r2, #0
 8005560:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005562:	f000 f8f5 	bl	8005750 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005566:	4b10      	ldr	r3, [pc, #64]	; (80055a8 <xPortStartScheduler+0x138>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a0f      	ldr	r2, [pc, #60]	; (80055a8 <xPortStartScheduler+0x138>)
 800556c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005570:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005572:	f7ff ff69 	bl	8005448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005576:	f7ff fa79 	bl	8004a6c <vTaskSwitchContext>
	prvTaskExitError();
 800557a:	f7ff ff25 	bl	80053c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	e000ed00 	.word	0xe000ed00
 800558c:	410fc271 	.word	0x410fc271
 8005590:	410fc270 	.word	0x410fc270
 8005594:	e000e400 	.word	0xe000e400
 8005598:	200003b0 	.word	0x200003b0
 800559c:	200003b4 	.word	0x200003b4
 80055a0:	e000ed20 	.word	0xe000ed20
 80055a4:	20000010 	.word	0x20000010
 80055a8:	e000ef34 	.word	0xe000ef34

080055ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b6:	f383 8811 	msr	BASEPRI, r3
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80055c4:	4b0e      	ldr	r3, [pc, #56]	; (8005600 <vPortEnterCritical+0x54>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3301      	adds	r3, #1
 80055ca:	4a0d      	ldr	r2, [pc, #52]	; (8005600 <vPortEnterCritical+0x54>)
 80055cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80055ce:	4b0c      	ldr	r3, [pc, #48]	; (8005600 <vPortEnterCritical+0x54>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d10e      	bne.n	80055f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80055d6:	4b0b      	ldr	r3, [pc, #44]	; (8005604 <vPortEnterCritical+0x58>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d009      	beq.n	80055f4 <vPortEnterCritical+0x48>
 80055e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	603b      	str	r3, [r7, #0]
 80055f2:	e7fe      	b.n	80055f2 <vPortEnterCritical+0x46>
	}
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	20000010 	.word	0x20000010
 8005604:	e000ed04 	.word	0xe000ed04

08005608 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800560e:	4b11      	ldr	r3, [pc, #68]	; (8005654 <vPortExitCritical+0x4c>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d109      	bne.n	800562a <vPortExitCritical+0x22>
 8005616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561a:	f383 8811 	msr	BASEPRI, r3
 800561e:	f3bf 8f6f 	isb	sy
 8005622:	f3bf 8f4f 	dsb	sy
 8005626:	607b      	str	r3, [r7, #4]
 8005628:	e7fe      	b.n	8005628 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800562a:	4b0a      	ldr	r3, [pc, #40]	; (8005654 <vPortExitCritical+0x4c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	3b01      	subs	r3, #1
 8005630:	4a08      	ldr	r2, [pc, #32]	; (8005654 <vPortExitCritical+0x4c>)
 8005632:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005634:	4b07      	ldr	r3, [pc, #28]	; (8005654 <vPortExitCritical+0x4c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d104      	bne.n	8005646 <vPortExitCritical+0x3e>
 800563c:	2300      	movs	r3, #0
 800563e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005646:	bf00      	nop
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	20000010 	.word	0x20000010
	...

08005660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005660:	f3ef 8009 	mrs	r0, PSP
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	4b15      	ldr	r3, [pc, #84]	; (80056c0 <pxCurrentTCBConst>)
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	f01e 0f10 	tst.w	lr, #16
 8005670:	bf08      	it	eq
 8005672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800567a:	6010      	str	r0, [r2, #0]
 800567c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005680:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005684:	f380 8811 	msr	BASEPRI, r0
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f7ff f9ec 	bl	8004a6c <vTaskSwitchContext>
 8005694:	f04f 0000 	mov.w	r0, #0
 8005698:	f380 8811 	msr	BASEPRI, r0
 800569c:	bc09      	pop	{r0, r3}
 800569e:	6819      	ldr	r1, [r3, #0]
 80056a0:	6808      	ldr	r0, [r1, #0]
 80056a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a6:	f01e 0f10 	tst.w	lr, #16
 80056aa:	bf08      	it	eq
 80056ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80056b0:	f380 8809 	msr	PSP, r0
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	f3af 8000 	nop.w

080056c0 <pxCurrentTCBConst>:
 80056c0:	20000284 	.word	0x20000284
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80056c4:	bf00      	nop
 80056c6:	bf00      	nop

080056c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
	__asm volatile
 80056ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80056e0:	f7ff f908 	bl	80048f4 <xTaskIncrementTick>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80056ea:	4b06      	ldr	r3, [pc, #24]	; (8005704 <SysTick_Handler+0x3c>)
 80056ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	2300      	movs	r3, #0
 80056f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80056fc:	bf00      	nop
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	e000ed04 	.word	0xe000ed04

08005708 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800570c:	4b0b      	ldr	r3, [pc, #44]	; (800573c <vPortSetupTimerInterrupt+0x34>)
 800570e:	2200      	movs	r2, #0
 8005710:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005712:	4b0b      	ldr	r3, [pc, #44]	; (8005740 <vPortSetupTimerInterrupt+0x38>)
 8005714:	2200      	movs	r2, #0
 8005716:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005718:	4b0a      	ldr	r3, [pc, #40]	; (8005744 <vPortSetupTimerInterrupt+0x3c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a0a      	ldr	r2, [pc, #40]	; (8005748 <vPortSetupTimerInterrupt+0x40>)
 800571e:	fba2 2303 	umull	r2, r3, r2, r3
 8005722:	099b      	lsrs	r3, r3, #6
 8005724:	4a09      	ldr	r2, [pc, #36]	; (800574c <vPortSetupTimerInterrupt+0x44>)
 8005726:	3b01      	subs	r3, #1
 8005728:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800572a:	4b04      	ldr	r3, [pc, #16]	; (800573c <vPortSetupTimerInterrupt+0x34>)
 800572c:	2207      	movs	r2, #7
 800572e:	601a      	str	r2, [r3, #0]
}
 8005730:	bf00      	nop
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	e000e010 	.word	0xe000e010
 8005740:	e000e018 	.word	0xe000e018
 8005744:	20000004 	.word	0x20000004
 8005748:	10624dd3 	.word	0x10624dd3
 800574c:	e000e014 	.word	0xe000e014

08005750 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005750:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005760 <vPortEnableVFP+0x10>
 8005754:	6801      	ldr	r1, [r0, #0]
 8005756:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800575a:	6001      	str	r1, [r0, #0]
 800575c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800575e:	bf00      	nop
 8005760:	e000ed88 	.word	0xe000ed88

08005764 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800576a:	f3ef 8305 	mrs	r3, IPSR
 800576e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2b0f      	cmp	r3, #15
 8005774:	d913      	bls.n	800579e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005776:	4a16      	ldr	r2, [pc, #88]	; (80057d0 <vPortValidateInterruptPriority+0x6c>)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4413      	add	r3, r2
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005780:	4b14      	ldr	r3, [pc, #80]	; (80057d4 <vPortValidateInterruptPriority+0x70>)
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	7afa      	ldrb	r2, [r7, #11]
 8005786:	429a      	cmp	r2, r3
 8005788:	d209      	bcs.n	800579e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800578a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	607b      	str	r3, [r7, #4]
 800579c:	e7fe      	b.n	800579c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800579e:	4b0e      	ldr	r3, [pc, #56]	; (80057d8 <vPortValidateInterruptPriority+0x74>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80057a6:	4b0d      	ldr	r3, [pc, #52]	; (80057dc <vPortValidateInterruptPriority+0x78>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d909      	bls.n	80057c2 <vPortValidateInterruptPriority+0x5e>
 80057ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	603b      	str	r3, [r7, #0]
 80057c0:	e7fe      	b.n	80057c0 <vPortValidateInterruptPriority+0x5c>
	}
 80057c2:	bf00      	nop
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	e000e3f0 	.word	0xe000e3f0
 80057d4:	200003b0 	.word	0x200003b0
 80057d8:	e000ed0c 	.word	0xe000ed0c
 80057dc:	200003b4 	.word	0x200003b4

080057e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b08a      	sub	sp, #40	; 0x28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80057e8:	2300      	movs	r3, #0
 80057ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80057ec:	f7fe ffd8 	bl	80047a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80057f0:	4b57      	ldr	r3, [pc, #348]	; (8005950 <pvPortMalloc+0x170>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d101      	bne.n	80057fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80057f8:	f000 f90c 	bl	8005a14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057fc:	4b55      	ldr	r3, [pc, #340]	; (8005954 <pvPortMalloc+0x174>)
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4013      	ands	r3, r2
 8005804:	2b00      	cmp	r3, #0
 8005806:	f040 808c 	bne.w	8005922 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d01c      	beq.n	800584a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005810:	2208      	movs	r2, #8
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4413      	add	r3, r2
 8005816:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f003 0307 	and.w	r3, r3, #7
 800581e:	2b00      	cmp	r3, #0
 8005820:	d013      	beq.n	800584a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f023 0307 	bic.w	r3, r3, #7
 8005828:	3308      	adds	r3, #8
 800582a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f003 0307 	and.w	r3, r3, #7
 8005832:	2b00      	cmp	r3, #0
 8005834:	d009      	beq.n	800584a <pvPortMalloc+0x6a>
 8005836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583a:	f383 8811 	msr	BASEPRI, r3
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	617b      	str	r3, [r7, #20]
 8005848:	e7fe      	b.n	8005848 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d068      	beq.n	8005922 <pvPortMalloc+0x142>
 8005850:	4b41      	ldr	r3, [pc, #260]	; (8005958 <pvPortMalloc+0x178>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	429a      	cmp	r2, r3
 8005858:	d863      	bhi.n	8005922 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800585a:	4b40      	ldr	r3, [pc, #256]	; (800595c <pvPortMalloc+0x17c>)
 800585c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800585e:	4b3f      	ldr	r3, [pc, #252]	; (800595c <pvPortMalloc+0x17c>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005864:	e004      	b.n	8005870 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	429a      	cmp	r2, r3
 8005878:	d903      	bls.n	8005882 <pvPortMalloc+0xa2>
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1f1      	bne.n	8005866 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005882:	4b33      	ldr	r3, [pc, #204]	; (8005950 <pvPortMalloc+0x170>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005888:	429a      	cmp	r2, r3
 800588a:	d04a      	beq.n	8005922 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2208      	movs	r2, #8
 8005892:	4413      	add	r3, r2
 8005894:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	685a      	ldr	r2, [r3, #4]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	1ad2      	subs	r2, r2, r3
 80058a6:	2308      	movs	r3, #8
 80058a8:	005b      	lsls	r3, r3, #1
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d91e      	bls.n	80058ec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80058ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4413      	add	r3, r2
 80058b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	f003 0307 	and.w	r3, r3, #7
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d009      	beq.n	80058d4 <pvPortMalloc+0xf4>
 80058c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	613b      	str	r3, [r7, #16]
 80058d2:	e7fe      	b.n	80058d2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	1ad2      	subs	r2, r2, r3
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058e6:	69b8      	ldr	r0, [r7, #24]
 80058e8:	f000 f8f6 	bl	8005ad8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058ec:	4b1a      	ldr	r3, [pc, #104]	; (8005958 <pvPortMalloc+0x178>)
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	4a18      	ldr	r2, [pc, #96]	; (8005958 <pvPortMalloc+0x178>)
 80058f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058fa:	4b17      	ldr	r3, [pc, #92]	; (8005958 <pvPortMalloc+0x178>)
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	4b18      	ldr	r3, [pc, #96]	; (8005960 <pvPortMalloc+0x180>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	429a      	cmp	r2, r3
 8005904:	d203      	bcs.n	800590e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005906:	4b14      	ldr	r3, [pc, #80]	; (8005958 <pvPortMalloc+0x178>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a15      	ldr	r2, [pc, #84]	; (8005960 <pvPortMalloc+0x180>)
 800590c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	4b10      	ldr	r3, [pc, #64]	; (8005954 <pvPortMalloc+0x174>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	431a      	orrs	r2, r3
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	2200      	movs	r2, #0
 8005920:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005922:	f7fe ff4b 	bl	80047bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	f003 0307 	and.w	r3, r3, #7
 800592c:	2b00      	cmp	r3, #0
 800592e:	d009      	beq.n	8005944 <pvPortMalloc+0x164>
 8005930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005934:	f383 8811 	msr	BASEPRI, r3
 8005938:	f3bf 8f6f 	isb	sy
 800593c:	f3bf 8f4f 	dsb	sy
 8005940:	60fb      	str	r3, [r7, #12]
 8005942:	e7fe      	b.n	8005942 <pvPortMalloc+0x162>
	return pvReturn;
 8005944:	69fb      	ldr	r3, [r7, #28]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3728      	adds	r7, #40	; 0x28
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	20003fc0 	.word	0x20003fc0
 8005954:	20003fcc 	.word	0x20003fcc
 8005958:	20003fc4 	.word	0x20003fc4
 800595c:	20003fb8 	.word	0x20003fb8
 8005960:	20003fc8 	.word	0x20003fc8

08005964 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d046      	beq.n	8005a04 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005976:	2308      	movs	r3, #8
 8005978:	425b      	negs	r3, r3
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	4413      	add	r3, r2
 800597e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	4b20      	ldr	r3, [pc, #128]	; (8005a0c <vPortFree+0xa8>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4013      	ands	r3, r2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d109      	bne.n	80059a6 <vPortFree+0x42>
 8005992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005996:	f383 8811 	msr	BASEPRI, r3
 800599a:	f3bf 8f6f 	isb	sy
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	e7fe      	b.n	80059a4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d009      	beq.n	80059c2 <vPortFree+0x5e>
 80059ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b2:	f383 8811 	msr	BASEPRI, r3
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	60bb      	str	r3, [r7, #8]
 80059c0:	e7fe      	b.n	80059c0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	4b11      	ldr	r3, [pc, #68]	; (8005a0c <vPortFree+0xa8>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4013      	ands	r3, r2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d019      	beq.n	8005a04 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d115      	bne.n	8005a04 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	4b0b      	ldr	r3, [pc, #44]	; (8005a0c <vPortFree+0xa8>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	43db      	mvns	r3, r3
 80059e2:	401a      	ands	r2, r3
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80059e8:	f7fe feda 	bl	80047a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	4b07      	ldr	r3, [pc, #28]	; (8005a10 <vPortFree+0xac>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4413      	add	r3, r2
 80059f6:	4a06      	ldr	r2, [pc, #24]	; (8005a10 <vPortFree+0xac>)
 80059f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059fa:	6938      	ldr	r0, [r7, #16]
 80059fc:	f000 f86c 	bl	8005ad8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005a00:	f7fe fedc 	bl	80047bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a04:	bf00      	nop
 8005a06:	3718      	adds	r7, #24
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	20003fcc 	.word	0x20003fcc
 8005a10:	20003fc4 	.word	0x20003fc4

08005a14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005a1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a20:	4b27      	ldr	r3, [pc, #156]	; (8005ac0 <prvHeapInit+0xac>)
 8005a22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f003 0307 	and.w	r3, r3, #7
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00c      	beq.n	8005a48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	3307      	adds	r3, #7
 8005a32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 0307 	bic.w	r3, r3, #7
 8005a3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	4a1f      	ldr	r2, [pc, #124]	; (8005ac0 <prvHeapInit+0xac>)
 8005a44:	4413      	add	r3, r2
 8005a46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a4c:	4a1d      	ldr	r2, [pc, #116]	; (8005ac4 <prvHeapInit+0xb0>)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a52:	4b1c      	ldr	r3, [pc, #112]	; (8005ac4 <prvHeapInit+0xb0>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a60:	2208      	movs	r2, #8
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	1a9b      	subs	r3, r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0307 	bic.w	r3, r3, #7
 8005a6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4a15      	ldr	r2, [pc, #84]	; (8005ac8 <prvHeapInit+0xb4>)
 8005a74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a76:	4b14      	ldr	r3, [pc, #80]	; (8005ac8 <prvHeapInit+0xb4>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a7e:	4b12      	ldr	r3, [pc, #72]	; (8005ac8 <prvHeapInit+0xb4>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2200      	movs	r2, #0
 8005a84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	1ad2      	subs	r2, r2, r3
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a94:	4b0c      	ldr	r3, [pc, #48]	; (8005ac8 <prvHeapInit+0xb4>)
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	4a0a      	ldr	r2, [pc, #40]	; (8005acc <prvHeapInit+0xb8>)
 8005aa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	4a09      	ldr	r2, [pc, #36]	; (8005ad0 <prvHeapInit+0xbc>)
 8005aaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005aac:	4b09      	ldr	r3, [pc, #36]	; (8005ad4 <prvHeapInit+0xc0>)
 8005aae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ab2:	601a      	str	r2, [r3, #0]
}
 8005ab4:	bf00      	nop
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	200003b8 	.word	0x200003b8
 8005ac4:	20003fb8 	.word	0x20003fb8
 8005ac8:	20003fc0 	.word	0x20003fc0
 8005acc:	20003fc8 	.word	0x20003fc8
 8005ad0:	20003fc4 	.word	0x20003fc4
 8005ad4:	20003fcc 	.word	0x20003fcc

08005ad8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ae0:	4b28      	ldr	r3, [pc, #160]	; (8005b84 <prvInsertBlockIntoFreeList+0xac>)
 8005ae2:	60fb      	str	r3, [r7, #12]
 8005ae4:	e002      	b.n	8005aec <prvInsertBlockIntoFreeList+0x14>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	60fb      	str	r3, [r7, #12]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d8f7      	bhi.n	8005ae6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	4413      	add	r3, r2
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d108      	bne.n	8005b1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	685a      	ldr	r2, [r3, #4]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	441a      	add	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	441a      	add	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d118      	bne.n	8005b60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	4b15      	ldr	r3, [pc, #84]	; (8005b88 <prvInsertBlockIntoFreeList+0xb0>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d00d      	beq.n	8005b56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	441a      	add	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	e008      	b.n	8005b68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b56:	4b0c      	ldr	r3, [pc, #48]	; (8005b88 <prvInsertBlockIntoFreeList+0xb0>)
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	e003      	b.n	8005b68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d002      	beq.n	8005b76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b76:	bf00      	nop
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	20003fb8 	.word	0x20003fb8
 8005b88:	20003fc0 	.word	0x20003fc0

08005b8c <__libc_init_array>:
 8005b8c:	b570      	push	{r4, r5, r6, lr}
 8005b8e:	4e0d      	ldr	r6, [pc, #52]	; (8005bc4 <__libc_init_array+0x38>)
 8005b90:	4c0d      	ldr	r4, [pc, #52]	; (8005bc8 <__libc_init_array+0x3c>)
 8005b92:	1ba4      	subs	r4, r4, r6
 8005b94:	10a4      	asrs	r4, r4, #2
 8005b96:	2500      	movs	r5, #0
 8005b98:	42a5      	cmp	r5, r4
 8005b9a:	d109      	bne.n	8005bb0 <__libc_init_array+0x24>
 8005b9c:	4e0b      	ldr	r6, [pc, #44]	; (8005bcc <__libc_init_array+0x40>)
 8005b9e:	4c0c      	ldr	r4, [pc, #48]	; (8005bd0 <__libc_init_array+0x44>)
 8005ba0:	f000 f82c 	bl	8005bfc <_init>
 8005ba4:	1ba4      	subs	r4, r4, r6
 8005ba6:	10a4      	asrs	r4, r4, #2
 8005ba8:	2500      	movs	r5, #0
 8005baa:	42a5      	cmp	r5, r4
 8005bac:	d105      	bne.n	8005bba <__libc_init_array+0x2e>
 8005bae:	bd70      	pop	{r4, r5, r6, pc}
 8005bb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bb4:	4798      	blx	r3
 8005bb6:	3501      	adds	r5, #1
 8005bb8:	e7ee      	b.n	8005b98 <__libc_init_array+0xc>
 8005bba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bbe:	4798      	blx	r3
 8005bc0:	3501      	adds	r5, #1
 8005bc2:	e7f2      	b.n	8005baa <__libc_init_array+0x1e>
 8005bc4:	08005cbc 	.word	0x08005cbc
 8005bc8:	08005cbc 	.word	0x08005cbc
 8005bcc:	08005cbc 	.word	0x08005cbc
 8005bd0:	08005cc0 	.word	0x08005cc0

08005bd4 <memcpy>:
 8005bd4:	b510      	push	{r4, lr}
 8005bd6:	1e43      	subs	r3, r0, #1
 8005bd8:	440a      	add	r2, r1
 8005bda:	4291      	cmp	r1, r2
 8005bdc:	d100      	bne.n	8005be0 <memcpy+0xc>
 8005bde:	bd10      	pop	{r4, pc}
 8005be0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005be4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005be8:	e7f7      	b.n	8005bda <memcpy+0x6>

08005bea <memset>:
 8005bea:	4402      	add	r2, r0
 8005bec:	4603      	mov	r3, r0
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d100      	bne.n	8005bf4 <memset+0xa>
 8005bf2:	4770      	bx	lr
 8005bf4:	f803 1b01 	strb.w	r1, [r3], #1
 8005bf8:	e7f9      	b.n	8005bee <memset+0x4>
	...

08005bfc <_init>:
 8005bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfe:	bf00      	nop
 8005c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c02:	bc08      	pop	{r3}
 8005c04:	469e      	mov	lr, r3
 8005c06:	4770      	bx	lr

08005c08 <_fini>:
 8005c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c0a:	bf00      	nop
 8005c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c0e:	bc08      	pop	{r3}
 8005c10:	469e      	mov	lr, r3
 8005c12:	4770      	bx	lr
